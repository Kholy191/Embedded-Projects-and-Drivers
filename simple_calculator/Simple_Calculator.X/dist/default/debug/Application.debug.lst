

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Sep 09 01:32:50 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    50   000000                     
    51                           ; Generated 23/03/2023 GMT
    52                           ; 
    53                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution. Publication is not required when
    67                           ;        this file is used in an embedded application.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F4620 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85   000000                     
    86                           	psect	idataCOMRAM
    87   00281A                     __pidataCOMRAM:
    88                           	callstack 0
    89                           
    90                           ;initializer for _lcd_1
    91   00281A  1C                 	db	28
    92   00281B  1D                 	db	29
    93   00281C  1E                 	db	30
    94   00281D  1F                 	db	31
    95   00281E  18                 	db	24
    96   00281F  19                 	db	25
    97                           
    98                           ;initializer for _operation
    99   002820  30                 	db	48
   100                           
   101                           	psect	idataBANK0
   102   0027F4                     __pidataBANK0:
   103                           	callstack 0
   104                           
   105                           ;initializer for _PORT_REG
   106   0027F4  80                 	db	128
   107   0027F5  0F                 	db	15
   108   0027F6  81                 	db	129
   109   0027F7  0F                 	db	15
   110   0027F8  82                 	db	130
   111   0027F9  0F                 	db	15
   112   0027FA  83                 	db	131
   113   0027FB  0F                 	db	15
   114   0027FC  84                 	db	132
   115   0027FD  0F                 	db	15
   116                           
   117                           ;initializer for _TRIS_REG
   118   0027FE  92                 	db	146
   119   0027FF  0F                 	db	15
   120   002800  93                 	db	147
   121   002801  0F                 	db	15
   122   002802  94                 	db	148
   123   002803  0F                 	db	15
   124   002804  95                 	db	149
   125   002805  0F                 	db	15
   126   002806  96                 	db	150
   127   002807  0F                 	db	15
   128                           
   129                           ;initializer for _LAT_REG
   130   002808  89                 	db	137
   131   002809  0F                 	db	15
   132   00280A  8A                 	db	138
   133   00280B  0F                 	db	15
   134   00280C  8B                 	db	139
   135   00280D  0F                 	db	15
   136   00280E  8C                 	db	140
   137   00280F  0F                 	db	15
   138   002810  8D                 	db	141
   139   002811  0F                 	db	15
   140                           
   141                           ;initializer for _keypad_1
   142   002812  10                 	db	16
   143   002813  11                 	db	17
   144   002814  12                 	db	18
   145   002815  13                 	db	19
   146   002816  54                 	db	84
   147   002817  55                 	db	85
   148   002818  56                 	db	86
   149   002819  57                 	db	87
   150                           
   151                           	psect	smallconst
   152   001000                     __psmallconst:
   153                           	callstack 0
   154   001000  00                 	db	0
   155   001001                     _btn_values:
   156                           	callstack 0
   157   001001  37                 	db	55
   158   001002  38                 	db	56
   159   001003  39                 	db	57
   160   001004  2F                 	db	47
   161   001005  34                 	db	52
   162   001006  35                 	db	53
   163   001007  36                 	db	54
   164   001008  2A                 	db	42
   165   001009  31                 	db	49
   166   00100A  32                 	db	50
   167   00100B  33                 	db	51
   168   00100C  2D                 	db	45
   169   00100D  23                 	db	35
   170   00100E  30                 	db	48
   171   00100F  3D                 	db	61
   172   001010  2B                 	db	43
   173   001011                     __end_of_btn_values:
   174                           	callstack 0
   175   000000                     _PORTE	set	3972
   176   000000                     _PORTD	set	3971
   177   000000                     _PORTC	set	3970
   178   000000                     _PORTB	set	3969
   179   000000                     _PORTA	set	3968
   180   000000                     _LATA	set	3977
   181   000000                     _TRISA	set	3986
   182   000000                     _LATE	set	3981
   183   000000                     _LATD	set	3980
   184   000000                     _LATC	set	3979
   185   000000                     _LATB	set	3978
   186   000000                     _TRISE	set	3990
   187   000000                     _TRISD	set	3989
   188   000000                     _TRISC	set	3988
   189   000000                     _TRISB	set	3987
   190   001011                     STR_1:
   191   001011  65                 	db	101	;'e'
   192   001012  72                 	db	114	;'r'
   193   001013  72                 	db	114	;'r'
   194   001014  6F                 	db	111	;'o'
   195   001015  72                 	db	114	;'r'
   196   001016  00                 	db	0
   197   001017                     STR_4:
   198   001017  25                 	db	37
   199   001018  69                 	db	105	;'i'
   200   001019  00                 	db	0
   201   00101A  00                 	db	0	; dummy byte at the end
   202   000000                     
   203                           ; #config settings
   204                           
   205                           	psect	cinit
   206   002506                     __pcinit:
   207                           	callstack 0
   208   002506                     start_initialization:
   209                           	callstack 0
   210   002506                     __initialization:
   211                           	callstack 0
   212                           
   213                           ; Initialize objects allocated to BANK0 (38 bytes)
   214                           ; load TBLPTR registers with __pidataBANK0
   215   002506  0EF4               	movlw	low __pidataBANK0
   216   002508  6EF6               	movwf	tblptrl,c
   217   00250A  0E27               	movlw	high __pidataBANK0
   218   00250C  6EF7               	movwf	tblptrh,c
   219   00250E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   220   002510  6EF8               	movwf	tblptru,c
   221   002512  EE00  F080         	lfsr	0,__pdataBANK0
   222   002516  EE10 F026          	lfsr	1,38
   223   00251A                     copy_data0:
   224   00251A  0009               	tblrd		*+
   225   00251C  CFF5 FFEE          	movff	tablat,postinc0
   226   002520  50E5               	movf	postdec1,w,c
   227   002522  50E1               	movf	fsr1l,w,c
   228   002524  E1FA               	bnz	copy_data0
   229                           
   230                           ; Initialize objects allocated to COMRAM (7 bytes)
   231                           ; load TBLPTR registers with __pidataCOMRAM
   232   002526  0E1A               	movlw	low __pidataCOMRAM
   233   002528  6EF6               	movwf	tblptrl,c
   234   00252A  0E28               	movlw	high __pidataCOMRAM
   235   00252C  6EF7               	movwf	tblptrh,c
   236   00252E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   237   002530  6EF8               	movwf	tblptru,c
   238   002532  EE00  F076         	lfsr	0,__pdataCOMRAM
   239   002536  EE10 F007          	lfsr	1,7
   240   00253A                     copy_data1:
   241   00253A  0009               	tblrd		*+
   242   00253C  CFF5 FFEE          	movff	tablat,postinc0
   243   002540  50E5               	movf	postdec1,w,c
   244   002542  50E1               	movf	fsr1l,w,c
   245   002544  E1FA               	bnz	copy_data1
   246                           
   247                           ; Clear objects allocated to BANK0 (32 bytes)
   248   002546  EE00  F0A6         	lfsr	0,__pbssBANK0
   249   00254A  0E20               	movlw	32
   250   00254C                     clear_0:
   251   00254C  6AEE               	clrf	postinc0,c
   252   00254E  06E8               	decf	wreg,f,c
   253   002550  E1FD               	bnz	clear_0
   254                           
   255                           ; Clear objects allocated to COMRAM (28 bytes)
   256   002552  EE00  F05A         	lfsr	0,__pbssCOMRAM
   257   002556  0E1C               	movlw	28
   258   002558                     clear_1:
   259   002558  6AEE               	clrf	postinc0,c
   260   00255A  06E8               	decf	wreg,f,c
   261   00255C  E1FD               	bnz	clear_1
   262   00255E                     end_of_initialization:
   263                           	callstack 0
   264   00255E                     __end_of__initialization:
   265                           	callstack 0
   266   00255E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   267   002560  6EF8               	movwf	tblptru,c
   268   002562  0100               	movlb	0
   269   002564  EFA2  F009         	goto	_main	;jump to C main() function
   270                           
   271                           	psect	bssCOMRAM
   272   00005A                     __pbssCOMRAM:
   273                           	callstack 0
   274   00005A                     _width:
   275                           	callstack 0
   276   00005A                     	ds	2
   277   00005C                     _prec:
   278                           	callstack 0
   279   00005C                     	ds	2
   280   00005E                     _flags:
   281                           	callstack 0
   282   00005E                     	ds	1
   283   00005F                     _result:
   284                           	callstack 0
   285   00005F                     	ds	1
   286   000060                     _ret:
   287                           	callstack 0
   288   000060                     	ds	1
   289   000061                     relay_off@F3052:
   290                           	callstack 0
   291   000061                     	ds	1
   292   000062                     relay_on@F3047:
   293                           	callstack 0
   294   000062                     	ds	1
   295   000063                     relay_initialize@F3042:
   296                           	callstack 0
   297   000063                     	ds	1
   298   000064                     led_toggle@F3063:
   299                           	callstack 0
   300   000064                     	ds	1
   301   000065                     led_turn_off@F3058:
   302                           	callstack 0
   303   000065                     	ds	1
   304   000066                     led_turn_on@F3053:
   305                           	callstack 0
   306   000066                     	ds	1
   307   000067                     led_intialize@F3048:
   308                           	callstack 0
   309   000067                     	ds	1
   310   000068                     _result_s:
   311                           	callstack 0
   312   000068                     	ds	4
   313   00006C                     _str_2:
   314                           	callstack 0
   315   00006C                     	ds	4
   316   000070                     _str:
   317                           	callstack 0
   318   000070                     	ds	4
   319   000074                     _value_2:
   320                           	callstack 0
   321   000074                     	ds	1
   322   000075                     _value_1:
   323                           	callstack 0
   324   000075                     	ds	1
   325                           
   326                           	psect	dataCOMRAM
   327   000076                     __pdataCOMRAM:
   328                           	callstack 0
   329   000076                     _lcd_1:
   330                           	callstack 0
   331   000076                     	ds	6
   332   00007C                     _operation:
   333                           	callstack 0
   334   00007C                     	ds	1
   335                           
   336                           	psect	bssBANK0
   337   0000A6                     __pbssBANK0:
   338                           	callstack 0
   339   0000A6                     _dbuf:
   340                           	callstack 0
   341   0000A6                     	ds	32
   342                           
   343                           	psect	dataBANK0
   344   000080                     __pdataBANK0:
   345                           	callstack 0
   346   000080                     _PORT_REG:
   347                           	callstack 0
   348   000080                     	ds	10
   349   00008A                     _TRIS_REG:
   350                           	callstack 0
   351   00008A                     	ds	10
   352   000094                     _LAT_REG:
   353                           	callstack 0
   354   000094                     	ds	10
   355   00009E                     _keypad_1:
   356                           	callstack 0
   357   00009E                     	ds	8
   358                           
   359                           	psect	cstackCOMRAM
   360   000001                     __pcstackCOMRAM:
   361                           	callstack 0
   362   000001                     ?___awdiv:
   363                           	callstack 0
   364   000001                     ?___awmod:
   365                           	callstack 0
   366   000001                     gpio_pin_direction_intialize@str:
   367                           	callstack 0
   368   000001                     gpio_pin_write_logic@str:
   369                           	callstack 0
   370   000001                     gpio_pin_read_logic@str:
   371                           	callstack 0
   372   000001                     convert_string_to_numbers@str:
   373                           	callstack 0
   374   000001                     ___awdiv@dividend:
   375                           	callstack 0
   376   000001                     ___awmod@dividend:
   377                           	callstack 0
   378   000001                     memset@dest:
   379                           	callstack 0
   380   000001                     fputc@c:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x0
   384   000001                     	ds	2
   385   000003                     ??_gpio_pin_direction_intialize:
   386   000003                     gpio_pin_write_logic@LOG:
   387                           	callstack 0
   388   000003                     gpio_pin_read_logic@LOG:
   389                           	callstack 0
   390   000003                     convert_string_to_numbers@value:
   391                           	callstack 0
   392   000003                     ___awdiv@divisor:
   393                           	callstack 0
   394   000003                     ___awmod@divisor:
   395                           	callstack 0
   396   000003                     memset@c:
   397                           	callstack 0
   398   000003                     fputc@fp:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0x2
   402   000003                     	ds	1
   403   000004                     ??_gpio_pin_write_logic:
   404                           
   405                           ; 1 bytes @ 0x3
   406   000004                     	ds	1
   407   000005                     ??_gpio_pin_read_logic:
   408   000005                     ??_fputc:
   409   000005                     convert_string_to_numbers@ret:
   410                           	callstack 0
   411   000005                     ___awdiv@counter:
   412                           	callstack 0
   413   000005                     ___awmod@counter:
   414                           	callstack 0
   415   000005                     memset@n:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x4
   419   000005                     	ds	1
   420   000006                     convert_string_to_numbers@temp_1:
   421                           	callstack 0
   422   000006                     ___awdiv@sign:
   423                           	callstack 0
   424   000006                     ___awmod@sign:
   425                           	callstack 0
   426                           
   427                           ; 1 bytes @ 0x5
   428   000006                     	ds	1
   429   000007                     ??_memset:
   430   000007                     ?_abs:
   431                           	callstack 0
   432   000007                     convert_string_to_numbers@temp_2:
   433                           	callstack 0
   434   000007                     ___awdiv@quotient:
   435                           	callstack 0
   436   000007                     abs@a:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x6
   440   000007                     	ds	1
   441   000008                     convert_string_to_numbers@temp_3:
   442                           	callstack 0
   443                           
   444                           ; 1 bytes @ 0x7
   445   000008                     	ds	1
   446   000009                     ??_abs:
   447   000009                     convert_string_to_numbers@counter:
   448                           	callstack 0
   449   000009                     memset@k:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x8
   453   000009                     	ds	1
   454   00000A                     turnoff_all_rows@key_pad:
   455                           	callstack 0
   456   00000A                     gpio_pin_intialize@str:
   457                           	callstack 0
   458   00000A                     enable_pin_4bits@lcd:
   459                           	callstack 0
   460   00000A                     send_4bits@lcd:
   461                           	callstack 0
   462   00000A                     fputs@s:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x9
   466   00000A                     	ds	1
   467   00000B                     memset@s:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0xA
   471   00000B                     	ds	1
   472   00000C                     ??_gpio_pin_intialize:
   473   00000C                     ??_enable_pin_4bits:
   474   00000C                     turnoff_all_rows@ret:
   475                           	callstack 0
   476   00000C                     send_4bits@command:
   477                           	callstack 0
   478   00000C                     fputs@fp:
   479                           	callstack 0
   480                           
   481                           ; 2 bytes @ 0xB
   482   00000C                     	ds	1
   483   00000D                     turnoff_all_rows@rows_counter:
   484                           	callstack 0
   485   00000D                     gpio_pin_intialize@ret:
   486                           	callstack 0
   487   00000D                     enable_pin_4bits@ret:
   488                           	callstack 0
   489   00000D                     send_4bits@counter:
   490                           	callstack 0
   491                           
   492                           ; 1 bytes @ 0xC
   493   00000D                     	ds	1
   494   00000E                     send_4bits@ret:
   495                           	callstack 0
   496   00000E                     fputs@c:
   497                           	callstack 0
   498   00000E                     keypad_initialize@key_pad:
   499                           	callstack 0
   500   00000E                     keypad_read_value@key_pad:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0xD
   504   00000E                     	ds	1
   505   00000F                     lcd_4bits_send_command@lcd:
   506                           	callstack 0
   507   00000F                     lcd_4bits_send_char@lcd:
   508                           	callstack 0
   509   00000F                     fputs@i:
   510                           	callstack 0
   511                           
   512                           ; 2 bytes @ 0xE
   513   00000F                     	ds	1
   514   000010                     ??_keypad_initialize:
   515   000010                     keypad_read_value@value:
   516                           	callstack 0
   517                           
   518                           ; 2 bytes @ 0xF
   519   000010                     	ds	1
   520   000011                     lcd_4bits_send_command@command:
   521                           	callstack 0
   522   000011                     lcd_4bits_send_char@data:
   523                           	callstack 0
   524   000011                     pad@fp:
   525                           	callstack 0
   526                           
   527                           ; 2 bytes @ 0x10
   528   000011                     	ds	1
   529   000012                     ??_keypad_read_value:
   530   000012                     keypad_initialize@ret:
   531                           	callstack 0
   532   000012                     lcd_4bits_send_command@ret:
   533                           	callstack 0
   534   000012                     lcd_4bits_send_char@ret:
   535                           	callstack 0
   536                           
   537                           ; 1 bytes @ 0x11
   538   000012                     	ds	1
   539   000013                     keypad_initialize@rows_counter:
   540                           	callstack 0
   541   000013                     lcd_4bits_initialze@lcd:
   542                           	callstack 0
   543   000013                     lcd_4bits_send_string@lcd:
   544                           	callstack 0
   545   000013                     lcd_4bits_set_cursor@lcd:
   546                           	callstack 0
   547   000013                     pad@buf:
   548                           	callstack 0
   549                           
   550                           ; 2 bytes @ 0x12
   551   000013                     	ds	1
   552   000014                     keypad_initialize@columns_counter:
   553                           	callstack 0
   554   000014                     keypad_read_value@ret:
   555                           	callstack 0
   556                           
   557                           ; 1 bytes @ 0x13
   558   000014                     	ds	1
   559   000015                     ??_lcd_4bits_initialze:
   560   000015                     keypad_read_value@temp_value:
   561                           	callstack 0
   562   000015                     lcd_4bits_set_cursor@ROW:
   563                           	callstack 0
   564   000015                     lcd_4bits_send_string@data:
   565                           	callstack 0
   566   000015                     pad@p:
   567                           	callstack 0
   568                           
   569                           ; 2 bytes @ 0x14
   570   000015                     	ds	1
   571   000016                     keypad_read_value@rows_counter:
   572                           	callstack 0
   573   000016                     lcd_4bits_initialze@counter:
   574                           	callstack 0
   575   000016                     lcd_4bits_set_cursor@COLUMN:
   576                           	callstack 0
   577                           
   578                           ; 1 bytes @ 0x15
   579   000016                     	ds	1
   580   000017                     ??_lcd_4bits_set_cursor:
   581   000017                     ??_pad:
   582   000017                     keypad_read_value@columns_counter:
   583                           	callstack 0
   584   000017                     lcd_4bits_initialze@ret:
   585                           	callstack 0
   586   000017                     lcd_4bits_send_string@ret:
   587                           	callstack 0
   588                           
   589                           ; 1 bytes @ 0x16
   590   000017                     	ds	1
   591   000018                     pad@i:
   592                           	callstack 0
   593                           
   594                           ; 2 bytes @ 0x17
   595   000018                     	ds	1
   596   000019                     lcd_4bits_send_char_pos@lcd:
   597                           	callstack 0
   598   000019                     lcd_4bits_send_string_pos@lcd:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x18
   602   000019                     	ds	1
   603   00001A                     pad@w:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x19
   607   00001A                     	ds	1
   608   00001B                     lcd_4bits_send_char_pos@data:
   609                           	callstack 0
   610   00001B                     lcd_4bits_send_string_pos@data:
   611                           	callstack 0
   612                           
   613                           ; 2 bytes @ 0x1A
   614   00001B                     	ds	1
   615   00001C                     lcd_4bits_send_char_pos@ROW:
   616                           	callstack 0
   617   00001C                     dtoa@fp:
   618                           	callstack 0
   619                           
   620                           ; 2 bytes @ 0x1B
   621   00001C                     	ds	1
   622   00001D                     lcd_4bits_send_char_pos@COLUMN:
   623                           	callstack 0
   624   00001D                     lcd_4bits_send_string_pos@ROW:
   625                           	callstack 0
   626                           
   627                           ; 1 bytes @ 0x1C
   628   00001D                     	ds	1
   629   00001E                     lcd_4bits_send_char_pos@ret:
   630                           	callstack 0
   631   00001E                     lcd_4bits_send_string_pos@COLUMN:
   632                           	callstack 0
   633   00001E                     dtoa@d:
   634                           	callstack 0
   635                           
   636                           ; 2 bytes @ 0x1D
   637   00001E                     	ds	1
   638   00001F                     lcd_4bits_send_string_pos@ret:
   639                           	callstack 0
   640                           
   641                           ; 1 bytes @ 0x1E
   642   00001F                     	ds	1
   643   000020                     num_2_read@lcd:
   644                           	callstack 0
   645   000020                     _dtoa$1420:
   646                           	callstack 0
   647                           
   648                           ; 2 bytes @ 0x1F
   649   000020                     	ds	2
   650   000022                     num_2_read@keypad:
   651                           	callstack 0
   652   000022                     dtoa@p:
   653                           	callstack 0
   654                           
   655                           ; 2 bytes @ 0x21
   656   000022                     	ds	2
   657   000024                     num_2_read@str:
   658                           	callstack 0
   659   000024                     dtoa@w:
   660                           	callstack 0
   661                           
   662                           ; 2 bytes @ 0x23
   663   000024                     	ds	2
   664   000026                     num_2_read@counter_2:
   665                           	callstack 0
   666   000026                     dtoa@i:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0x25
   670   000026                     	ds	1
   671   000027                     num_2_read@counter_1:
   672                           	callstack 0
   673                           
   674                           ; 1 bytes @ 0x26
   675   000027                     	ds	1
   676   000028                     num_2_read@counter_3:
   677                           	callstack 0
   678   000028                     dtoa@s:
   679                           	callstack 0
   680                           
   681                           ; 1 bytes @ 0x27
   682   000028                     	ds	1
   683   000029                     num_2_read@ret:
   684                           	callstack 0
   685   000029                     vfpfcnvrt@fp:
   686                           	callstack 0
   687                           
   688                           ; 2 bytes @ 0x28
   689   000029                     	ds	1
   690   00002A                     num_2_read@temp_value:
   691                           	callstack 0
   692                           
   693                           ; 1 bytes @ 0x29
   694   00002A                     	ds	1
   695   00002B                     num_1_read@lcd:
   696                           	callstack 0
   697   00002B                     vfpfcnvrt@fmt:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0x2A
   701   00002B                     	ds	2
   702   00002D                     num_1_read@keypad:
   703                           	callstack 0
   704   00002D                     vfpfcnvrt@ap:
   705                           	callstack 0
   706                           
   707                           ; 2 bytes @ 0x2C
   708   00002D                     	ds	2
   709   00002F                     ??_vfpfcnvrt:
   710   00002F                     num_1_read@str:
   711                           	callstack 0
   712                           
   713                           ; 2 bytes @ 0x2E
   714   00002F                     	ds	2
   715   000031                     num_1_read@operation:
   716                           	callstack 0
   717   000031                     vfpfcnvrt@convarg:
   718                           	callstack 0
   719                           
   720                           ; 4 bytes @ 0x30
   721   000031                     	ds	2
   722   000033                     num_1_read@str_2:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0x32
   726   000033                     	ds	2
   727   000035                     num_1_read@counter_2:
   728                           	callstack 0
   729   000035                     vfpfcnvrt@cp:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x34
   733   000035                     	ds	1
   734   000036                     num_1_read@counter_1:
   735                           	callstack 0
   736                           
   737                           ; 1 bytes @ 0x35
   738   000036                     	ds	1
   739   000037                     ?_vfprintf:
   740                           	callstack 0
   741   000037                     num_1_read@counter_3:
   742                           	callstack 0
   743   000037                     vfprintf@fp:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x36
   747   000037                     	ds	1
   748   000038                     num_1_read@ret:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0x37
   752   000038                     	ds	1
   753   000039                     num_1_read@temp_value:
   754                           	callstack 0
   755   000039                     vfprintf@fmt:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x38
   759   000039                     	ds	2
   760   00003B                     vfprintf@ap:
   761                           	callstack 0
   762                           
   763                           ; 2 bytes @ 0x3A
   764   00003B                     	ds	2
   765   00003D                     vfprintf@cfmt:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x3C
   769   00003D                     	ds	2
   770   00003F                     ?_sprintf:
   771                           	callstack 0
   772   00003F                     sprintf@s:
   773                           	callstack 0
   774                           
   775                           ; 2 bytes @ 0x3E
   776   00003F                     	ds	2
   777   000041                     sprintf@fmt:
   778                           	callstack 0
   779                           
   780                           ; 2 bytes @ 0x40
   781   000041                     	ds	6
   782   000047                     sprintf@ap:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x46
   786   000047                     	ds	2
   787   000049                     sprintf@f:
   788                           	callstack 0
   789                           
   790                           ; 12 bytes @ 0x48
   791   000049                     	ds	12
   792   000055                     number_8bit_to_string@str:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x54
   796   000055                     	ds	2
   797   000057                     number_8bit_to_string@value:
   798                           	callstack 0
   799                           
   800                           ; 1 bytes @ 0x56
   801   000057                     	ds	1
   802   000058                     ??_main:
   803                           
   804                           ; 1 bytes @ 0x57
   805   000058                     	ds	2
   806                           
   807 ;;
   808 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   809 ;;
   810 ;; *************** function _main *****************
   811 ;; Defined at:
   812 ;;		line 17 in file "Application.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;		None
   815 ;; Auto vars:     Size  Location     Type
   816 ;;		None
   817 ;; Return value:  Size  Location     Type
   818 ;;                  2  340[None  ] int 
   819 ;; Registers used:
   820 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   828 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   829 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   830 ;;Total ram usage:        2 bytes
   831 ;; Hardware stack levels required when called: 9
   832 ;; This function calls:
   833 ;;		_convert_string_to_numbers
   834 ;;		_keypad_initialize
   835 ;;		_lcd_4bits_initialze
   836 ;;		_lcd_4bits_send_char_pos
   837 ;;		_lcd_4bits_send_string_pos
   838 ;;		_memset
   839 ;;		_num_1_read
   840 ;;		_number_8bit_to_string
   841 ;; This function is called by:
   842 ;;		Startup code after reset
   843 ;; This function uses a non-reentrant model
   844 ;;
   845                           
   846                           	psect	text0
   847   001344                     __ptext0:
   848                           	callstack 0
   849   001344                     _main:
   850                           	callstack 22
   851   001344                     
   852                           ;Application.c: 18:     memset((char *)str, '\0', 4);
   853   001344  0E70               	movlw	low _str
   854   001346  6E01               	movwf	memset@dest^0,c
   855   001348  0E00               	movlw	high _str
   856   00134A  6E02               	movwf	(memset@dest+1)^0,c
   857   00134C  0E00               	movlw	0
   858   00134E  6E04               	movwf	(memset@c+1)^0,c
   859   001350  0E00               	movlw	0
   860   001352  6E03               	movwf	memset@c^0,c
   861   001354  0E00               	movlw	0
   862   001356  6E06               	movwf	(memset@n+1)^0,c
   863   001358  0E04               	movlw	4
   864   00135A  6E05               	movwf	memset@n^0,c
   865   00135C  EC68  F00A         	call	_memset	;wreg free
   866                           
   867                           ;Application.c: 19:     memset((char *)str_2, '\0', 4);
   868   001360  0E6C               	movlw	low _str_2
   869   001362  6E01               	movwf	memset@dest^0,c
   870   001364  0E00               	movlw	high _str_2
   871   001366  6E02               	movwf	(memset@dest+1)^0,c
   872   001368  0E00               	movlw	0
   873   00136A  6E04               	movwf	(memset@c+1)^0,c
   874   00136C  0E00               	movlw	0
   875   00136E  6E03               	movwf	memset@c^0,c
   876   001370  0E00               	movlw	0
   877   001372  6E06               	movwf	(memset@n+1)^0,c
   878   001374  0E04               	movlw	4
   879   001376  6E05               	movwf	memset@n^0,c
   880   001378  EC68  F00A         	call	_memset	;wreg free
   881   00137C                     
   882                           ;Application.c: 20:     ret = lcd_4bits_initialze(&lcd_1);
   883   00137C  0E76               	movlw	low _lcd_1
   884   00137E  6E13               	movwf	lcd_4bits_initialze@lcd^0,c
   885   001380  0E00               	movlw	high _lcd_1
   886   001382  6E14               	movwf	(lcd_4bits_initialze@lcd+1)^0,c
   887   001384  ECEB  F00C         	call	_lcd_4bits_initialze	;wreg free
   888   001388  6E60               	movwf	_ret^0,c
   889   00138A                     
   890                           ;Application.c: 21:     ret = keypad_initialize(&keypad_1);
   891   00138A  0E9E               	movlw	low _keypad_1
   892   00138C  6E0E               	movwf	keypad_initialize@key_pad^0,c
   893   00138E  0E00               	movlw	high _keypad_1
   894   001390  6E0F               	movwf	(keypad_initialize@key_pad+1)^0,c
   895   001392  EC5C  F011         	call	_keypad_initialize	;wreg free
   896   001396  6E60               	movwf	_ret^0,c
   897   001398                     
   898                           ;Application.c: 22:     ret = num_1_read(&lcd_1 , &keypad_1 , str , &operation , str_2);
   899   001398  0E76               	movlw	low _lcd_1
   900   00139A  6E2B               	movwf	num_1_read@lcd^0,c
   901   00139C  0E00               	movlw	high _lcd_1
   902   00139E  6E2C               	movwf	(num_1_read@lcd+1)^0,c
   903   0013A0  0E9E               	movlw	low _keypad_1
   904   0013A2  6E2D               	movwf	num_1_read@keypad^0,c
   905   0013A4  0E00               	movlw	high _keypad_1
   906   0013A6  6E2E               	movwf	(num_1_read@keypad+1)^0,c
   907   0013A8  0E70               	movlw	low _str
   908   0013AA  6E2F               	movwf	num_1_read@str^0,c
   909   0013AC  0E00               	movlw	high _str
   910   0013AE  6E30               	movwf	(num_1_read@str+1)^0,c
   911   0013B0  0E7C               	movlw	low _operation
   912   0013B2  6E31               	movwf	num_1_read@operation^0,c
   913   0013B4  0E00               	movlw	high _operation
   914   0013B6  6E32               	movwf	(num_1_read@operation+1)^0,c
   915   0013B8  0E6C               	movlw	low _str_2
   916   0013BA  6E33               	movwf	num_1_read@str_2^0,c
   917   0013BC  0E00               	movlw	high _str_2
   918   0013BE  6E34               	movwf	(num_1_read@str_2+1)^0,c
   919   0013C0  ECD8  F008         	call	_num_1_read	;wreg free
   920   0013C4  6E60               	movwf	_ret^0,c
   921   0013C6                     
   922                           ;Application.c: 23:     ret = convert_string_to_numbers(str , &value_1);
   923   0013C6  0E70               	movlw	low _str
   924   0013C8  6E01               	movwf	convert_string_to_numbers@str^0,c
   925   0013CA  0E00               	movlw	high _str
   926   0013CC  6E02               	movwf	(convert_string_to_numbers@str+1)^0,c
   927   0013CE  0E75               	movlw	low _value_1
   928   0013D0  6E03               	movwf	convert_string_to_numbers@value^0,c
   929   0013D2  0E00               	movlw	high _value_1
   930   0013D4  6E04               	movwf	(convert_string_to_numbers@value+1)^0,c
   931   0013D6  EC23  F00B         	call	_convert_string_to_numbers	;wreg free
   932   0013DA  6E60               	movwf	_ret^0,c
   933   0013DC                     
   934                           ;Application.c: 24:     ret = convert_string_to_numbers(str_2 , &value_2);
   935   0013DC  0E6C               	movlw	low _str_2
   936   0013DE  6E01               	movwf	convert_string_to_numbers@str^0,c
   937   0013E0  0E00               	movlw	high _str_2
   938   0013E2  6E02               	movwf	(convert_string_to_numbers@str+1)^0,c
   939   0013E4  0E74               	movlw	low _value_2
   940   0013E6  6E03               	movwf	convert_string_to_numbers@value^0,c
   941   0013E8  0E00               	movlw	high _value_2
   942   0013EA  6E04               	movwf	(convert_string_to_numbers@value+1)^0,c
   943   0013EC  EC23  F00B         	call	_convert_string_to_numbers	;wreg free
   944   0013F0  6E60               	movwf	_ret^0,c
   945   0013F2                     
   946                           ;Application.c: 25:     ret = lcd_4bits_send_char_pos(&lcd_1 , operation , 3 , 3);
   947   0013F2  0E76               	movlw	low _lcd_1
   948   0013F4  6E19               	movwf	lcd_4bits_send_char_pos@lcd^0,c
   949   0013F6  0E00               	movlw	high _lcd_1
   950   0013F8  6E1A               	movwf	(lcd_4bits_send_char_pos@lcd+1)^0,c
   951   0013FA  C07C  F01B         	movff	_operation,lcd_4bits_send_char_pos@data
   952   0013FE  0E03               	movlw	3
   953   001400  6E1C               	movwf	lcd_4bits_send_char_pos@ROW^0,c
   954   001402  0E03               	movlw	3
   955   001404  6E1D               	movwf	lcd_4bits_send_char_pos@COLUMN^0,c
   956   001406  EC77  F013         	call	_lcd_4bits_send_char_pos	;wreg free
   957   00140A  6E60               	movwf	_ret^0,c
   958   00140C                     
   959                           ;Application.c: 26:     _delay((unsigned long)((3000)*(8000000U/4000.0)));
   960   00140C  0E1F               	movlw	31
   961   00140E  6E59               	movwf	(??_main+1)^0,c
   962   001410  0E71               	movlw	113
   963   001412  6E58               	movwf	??_main^0,c
   964   001414  0E1E               	movlw	30
   965   001416                     u3377:
   966   001416  2EE8               	decfsz	wreg,f,c
   967   001418  D7FE               	bra	u3377
   968   00141A  2E58               	decfsz	??_main^0,f,c
   969   00141C  D7FC               	bra	u3377
   970   00141E  2E59               	decfsz	(??_main+1)^0,f,c
   971   001420  D7FA               	bra	u3377
   972   001422  D000               	nop2	
   973   001424                     
   974                           ;Application.c: 27:     if ('+' == operation) {
   975   001424  0E2B               	movlw	43
   976   001426  187C               	xorwf	_operation^0,w,c
   977   001428  A4D8               	btfss	status,2,c
   978   00142A  EF19  F00A         	goto	u3251
   979   00142E  EF1B  F00A         	goto	u3250
   980   001432                     u3251:
   981   001432  EF37  F00A         	goto	l3864
   982   001436                     u3250:
   983   001436                     
   984                           ;Application.c: 28:         result = (value_1 + value_2);
   985   001436  5075               	movf	_value_1^0,w,c
   986   001438  2474               	addwf	_value_2^0,w,c
   987   00143A  6E5F               	movwf	_result^0,c
   988   00143C                     
   989                           ;Application.c: 29:         ret = number_8bit_to_string(result , result_s);
   990   00143C  0E68               	movlw	low _result_s
   991   00143E  6E55               	movwf	number_8bit_to_string@str^0,c
   992   001440  0E00               	movlw	high _result_s
   993   001442  6E56               	movwf	(number_8bit_to_string@str+1)^0,c
   994   001444  505F               	movf	_result^0,w,c
   995   001446  ECDC  F013         	call	_number_8bit_to_string
   996   00144A  6E60               	movwf	_ret^0,c
   997   00144C                     l3862:
   998                           
   999                           ;Application.c: 30:         ret = lcd_4bits_send_string_pos(&lcd_1 , result_s , 3 , 3);
  1000   00144C  0E76               	movlw	low _lcd_1
  1001   00144E  6E19               	movwf	lcd_4bits_send_string_pos@lcd^0,c
  1002   001450  0E00               	movlw	high _lcd_1
  1003   001452  6E1A               	movwf	(lcd_4bits_send_string_pos@lcd+1)^0,c
  1004   001454  0E68               	movlw	low _result_s
  1005   001456  6E1B               	movwf	lcd_4bits_send_string_pos@data^0,c
  1006   001458  0E00               	movlw	high _result_s
  1007   00145A  6E1C               	movwf	(lcd_4bits_send_string_pos@data+1)^0,c
  1008   00145C  0E03               	movlw	3
  1009   00145E  6E1D               	movwf	lcd_4bits_send_string_pos@ROW^0,c
  1010   001460  0E03               	movlw	3
  1011   001462  6E1E               	movwf	lcd_4bits_send_string_pos@COLUMN^0,c
  1012   001464  EC53  F013         	call	_lcd_4bits_send_string_pos	;wreg free
  1013   001468  6E60               	movwf	_ret^0,c
  1014                           
  1015                           ;Application.c: 31:     }
  1016   00146A  EF64  F00A         	goto	l346
  1017   00146E                     l3864:
  1018   00146E  0E2A               	movlw	42
  1019   001470  187C               	xorwf	_operation^0,w,c
  1020   001472  A4D8               	btfss	status,2,c
  1021   001474  EF3E  F00A         	goto	u3261
  1022   001478  EF40  F00A         	goto	u3260
  1023   00147C                     u3261:
  1024   00147C  EF4E  F00A         	goto	l3872
  1025   001480                     u3260:
  1026   001480                     
  1027                           ;Application.c: 34:         result = (value_1 * value_2);
  1028   001480  5075               	movf	_value_1^0,w,c
  1029   001482  0274               	mulwf	_value_2^0,c
  1030   001484  CFF3 F05F          	movff	prodl,_result
  1031   001488                     
  1032                           ;Application.c: 35:         ret = number_8bit_to_string(result, result_s);
  1033   001488  0E68               	movlw	low _result_s
  1034   00148A  6E55               	movwf	number_8bit_to_string@str^0,c
  1035   00148C  0E00               	movlw	high _result_s
  1036   00148E  6E56               	movwf	(number_8bit_to_string@str+1)^0,c
  1037   001490  505F               	movf	_result^0,w,c
  1038   001492  ECDC  F013         	call	_number_8bit_to_string
  1039   001496  6E60               	movwf	_ret^0,c
  1040   001498  EF26  F00A         	goto	l3862
  1041   00149C                     l3872:
  1042   00149C  0E2D               	movlw	45
  1043   00149E  187C               	xorwf	_operation^0,w,c
  1044   0014A0  A4D8               	btfss	status,2,c
  1045   0014A2  EF55  F00A         	goto	u3271
  1046   0014A6  EF57  F00A         	goto	u3270
  1047   0014AA                     u3271:
  1048   0014AA  EF64  F00A         	goto	l346
  1049   0014AE                     u3270:
  1050   0014AE                     
  1051                           ;Application.c: 40:         result = (value_1 - value_2);
  1052   0014AE  5074               	movf	_value_2^0,w,c
  1053   0014B0  5C75               	subwf	_value_1^0,w,c
  1054   0014B2  6E5F               	movwf	_result^0,c
  1055   0014B4                     
  1056                           ;Application.c: 41:         ret = number_8bit_to_string(result, result_s);
  1057   0014B4  0E68               	movlw	low _result_s
  1058   0014B6  6E55               	movwf	number_8bit_to_string@str^0,c
  1059   0014B8  0E00               	movlw	high _result_s
  1060   0014BA  6E56               	movwf	(number_8bit_to_string@str+1)^0,c
  1061   0014BC  505F               	movf	_result^0,w,c
  1062   0014BE  ECDC  F013         	call	_number_8bit_to_string
  1063   0014C2  6E60               	movwf	_ret^0,c
  1064   0014C4  EF26  F00A         	goto	l3862
  1065   0014C8                     l346:
  1066   0014C8  EF64  F00A         	goto	l346
  1067   0014CC  EF00  F000         	goto	start
  1068   0014D0                     __end_of_main:
  1069                           	callstack 0
  1070                           
  1071 ;; *************** function _number_8bit_to_string *****************
  1072 ;; Defined at:
  1073 ;;		line 359 in file "ECU_Layer/LCD/Lcd.c"
  1074 ;; Parameters:    Size  Location     Type
  1075 ;;  value           1    wreg     unsigned char 
  1076 ;;  str             2   84[COMRAM] PTR unsigned char 
  1077 ;;		 -> result_s(4), 
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;  value           1   86[COMRAM] unsigned char 
  1080 ;;  ret             1    0        unsigned char 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  1    wreg      unsigned char 
  1083 ;; Registers used:
  1084 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1091 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1094 ;;Total ram usage:        3 bytes
  1095 ;; Hardware stack levels used: 1
  1096 ;; Hardware stack levels required when called: 8
  1097 ;; This function calls:
  1098 ;;		_memset
  1099 ;;		_sprintf
  1100 ;; This function is called by:
  1101 ;;		_main
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105                           	psect	text1
  1106   0027B8                     __ptext1:
  1107                           	callstack 0
  1108   0027B8                     _number_8bit_to_string:
  1109                           	callstack 22
  1110                           
  1111                           ;incstack = 0
  1112                           ;number_8bit_to_string@value stored from wreg
  1113   0027B8  6E57               	movwf	number_8bit_to_string@value^0,c
  1114   0027BA                     
  1115                           ;ECU_Layer/LCD/Lcd.c: 362:     memset((char *)str, '\0', 4);
  1116   0027BA  C055  F001         	movff	number_8bit_to_string@str,memset@dest
  1117   0027BE  C056  F002         	movff	number_8bit_to_string@str+1,memset@dest+1
  1118   0027C2  0E00               	movlw	0
  1119   0027C4  6E04               	movwf	(memset@c+1)^0,c
  1120   0027C6  0E00               	movlw	0
  1121   0027C8  6E03               	movwf	memset@c^0,c
  1122   0027CA  0E00               	movlw	0
  1123   0027CC  6E06               	movwf	(memset@n+1)^0,c
  1124   0027CE  0E04               	movlw	4
  1125   0027D0  6E05               	movwf	memset@n^0,c
  1126   0027D2  EC68  F00A         	call	_memset	;wreg free
  1127   0027D6                     
  1128                           ;ECU_Layer/LCD/Lcd.c: 363:     sprintf(str, "%i", value);
  1129   0027D6  C055  F03F         	movff	number_8bit_to_string@str,sprintf@s
  1130   0027DA  C056  F040         	movff	number_8bit_to_string@str+1,sprintf@s+1
  1131   0027DE  0E17               	movlw	low STR_4
  1132   0027E0  6E41               	movwf	sprintf@fmt^0,c
  1133   0027E2  0E10               	movlw	high STR_4
  1134   0027E4  6E42               	movwf	(sprintf@fmt+1)^0,c
  1135   0027E6  C057  F043         	movff	number_8bit_to_string@value,?_sprintf+4
  1136   0027EA  6A44               	clrf	(?_sprintf+5)^0,c
  1137   0027EC  EC2D  F013         	call	_sprintf	;wreg free
  1138   0027F0                     
  1139                           ;ECU_Layer/LCD/Lcd.c: 364:     return ret;
  1140   0027F0  0E01               	movlw	1
  1141   0027F2  0012               	return		;funcret
  1142   0027F4                     __end_of_number_8bit_to_string:
  1143                           	callstack 0
  1144                           
  1145 ;; *************** function _sprintf *****************
  1146 ;; Defined at:
  1147 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\nf_sprintf.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;  s               2   62[COMRAM] PTR unsigned char 
  1150 ;;		 -> result_s(4), 
  1151 ;;  fmt             2   64[COMRAM] PTR const unsigned char 
  1152 ;;		 -> STR_6(3), STR_5(3), STR_4(3), 
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;  f              12   72[COMRAM] struct _IO_FILE
  1155 ;;  ap              2   70[COMRAM] PTR void [1]
  1156 ;;		 -> ?_sprintf(2), 
  1157 ;;  ret             2    0        int 
  1158 ;; Return value:  Size  Location     Type
  1159 ;;                  2   62[COMRAM] int 
  1160 ;; Registers used:
  1161 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1162 ;; Tracked objects:
  1163 ;;		On entry : 0/0
  1164 ;;		On exit  : 0/0
  1165 ;;		Unchanged: 0/0
  1166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1167 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1168 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1170 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1171 ;;Total ram usage:       22 bytes
  1172 ;; Hardware stack levels used: 1
  1173 ;; Hardware stack levels required when called: 7
  1174 ;; This function calls:
  1175 ;;		_vfprintf
  1176 ;; This function is called by:
  1177 ;;		_number_8bit_to_string
  1178 ;;		_number_16bit_to_string
  1179 ;;		_number_32bit_to_string
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           	psect	text2
  1184   00265A                     __ptext2:
  1185                           	callstack 0
  1186   00265A                     _sprintf:
  1187                           	callstack 22
  1188   00265A  0E43               	movlw	low (?_sprintf+4)
  1189   00265C  6E47               	movwf	sprintf@ap^0,c
  1190   00265E  0E00               	movlw	high (?_sprintf+4)
  1191   002660  6E48               	movwf	(sprintf@ap+1)^0,c
  1192   002662  C03F  F049         	movff	sprintf@s,sprintf@f
  1193   002666  C040  F04A         	movff	sprintf@s+1,sprintf@f+1
  1194   00266A  0E00               	movlw	0
  1195   00266C  6E4D               	movwf	(sprintf@f+4)^0,c
  1196   00266E  0E00               	movlw	0
  1197   002670  6E4C               	movwf	(sprintf@f+3)^0,c
  1198   002672  0E00               	movlw	0
  1199   002674  6E54               	movwf	(sprintf@f+11)^0,c
  1200   002676  0E00               	movlw	0
  1201   002678  6E53               	movwf	(sprintf@f+10)^0,c
  1202   00267A  0E49               	movlw	low sprintf@f
  1203   00267C  6E37               	movwf	vfprintf@fp^0,c
  1204   00267E  0E00               	movlw	high sprintf@f
  1205   002680  6E38               	movwf	(vfprintf@fp+1)^0,c
  1206   002682  C041  F039         	movff	sprintf@fmt,vfprintf@fmt
  1207   002686  C042  F03A         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1208   00268A  0E47               	movlw	low sprintf@ap
  1209   00268C  6E3B               	movwf	vfprintf@ap^0,c
  1210   00268E  0E00               	movlw	high sprintf@ap
  1211   002690  6E3C               	movwf	(vfprintf@ap+1)^0,c
  1212   002692  ECDF  F012         	call	_vfprintf	;wreg free
  1213   002696  504C               	movf	(sprintf@f+3)^0,w,c
  1214   002698  243F               	addwf	sprintf@s^0,w,c
  1215   00269A  6ED9               	movwf	fsr2l,c
  1216   00269C  504D               	movf	(sprintf@f+4)^0,w,c
  1217   00269E  2040               	addwfc	(sprintf@s+1)^0,w,c
  1218   0026A0  6EDA               	movwf	fsr2h,c
  1219   0026A2  6ADF               	clrf	indf2,c
  1220   0026A4  0012               	return		;funcret
  1221   0026A6                     __end_of_sprintf:
  1222                           	callstack 0
  1223                           
  1224 ;; *************** function _vfprintf *****************
  1225 ;; Defined at:
  1226 ;;		line 1546 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  fp              2   54[COMRAM] PTR struct _IO_FILE
  1229 ;;		 -> sprintf@f(12), 
  1230 ;;  fmt             2   56[COMRAM] PTR const unsigned char 
  1231 ;;		 -> STR_6(3), STR_5(3), STR_4(3), 
  1232 ;;  ap              2   58[COMRAM] PTR PTR void 
  1233 ;;		 -> sprintf@ap(2), 
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  cfmt            2   60[COMRAM] PTR unsigned char 
  1236 ;;		 -> STR_6(3), STR_5(3), STR_4(3), 
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  2   54[COMRAM] int 
  1239 ;; Registers used:
  1240 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1246 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1247 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;Total ram usage:        8 bytes
  1251 ;; Hardware stack levels used: 1
  1252 ;; Hardware stack levels required when called: 6
  1253 ;; This function calls:
  1254 ;;		_vfpfcnvrt
  1255 ;; This function is called by:
  1256 ;;		_sprintf
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           	psect	text3
  1261   0025BE                     __ptext3:
  1262                           	callstack 0
  1263   0025BE                     _vfprintf:
  1264                           	callstack 22
  1265   0025BE                     
  1266                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1546: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.41\pic\source
      +                          s\c99\common\doprnt.c: 1547: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\comm
      +                          on\doprnt.c: 1549:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\
      +                          common\doprnt.c: 1551:     cfmt = (char *)fmt;
  1267   0025BE  C039  F03D         	movff	vfprintf@fmt,vfprintf@cfmt
  1268   0025C2  C03A  F03E         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1269                           
  1270                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1555:     while (
      +                          *cfmt) {
  1271   0025C6  EFF3  F012         	goto	l3120
  1272   0025CA                     l3118:
  1273                           
  1274                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1559:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1275   0025CA  C037  F029         	movff	vfprintf@fp,vfpfcnvrt@fp
  1276   0025CE  C038  F02A         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1277   0025D2  0E3D               	movlw	low vfprintf@cfmt
  1278   0025D4  6E2B               	movwf	vfpfcnvrt@fmt^0,c
  1279   0025D6  0E00               	movlw	high vfprintf@cfmt
  1280   0025D8  6E2C               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1281   0025DA  C03B  F02D         	movff	vfprintf@ap,vfpfcnvrt@ap
  1282   0025DE  C03C  F02E         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1283   0025E2  EC5A  F00C         	call	_vfpfcnvrt	;wreg free
  1284   0025E6                     l3120:
  1285                           
  1286                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1555:     while (
      +                          *cfmt) {
  1287   0025E6  C03D  FFF6         	movff	vfprintf@cfmt,tblptrl
  1288   0025EA  C03E  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1289   0025EE                     	if	0	;tblptru may be non-zero
  1290   0025EE                     	endif
  1291   0025EE                     	if	0	;tblptru may be non-zero
  1292   0025EE                     	endif
  1293   0025EE  0008               	tblrd		*
  1294   0025F0  50F5               	movf	tablat,w,c
  1295   0025F2  0900               	iorlw	0
  1296   0025F4  A4D8               	btfss	status,2,c
  1297   0025F6  EFFF  F012         	goto	u2311
  1298   0025FA  EF01  F013         	goto	u2310
  1299   0025FE                     u2311:
  1300   0025FE  EFE5  F012         	goto	l3118
  1301   002602                     u2310:
  1302   002602                     
  1303                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1564:  return 0;
  1304   002602  0E00               	movlw	0
  1305   002604  6E38               	movwf	(?_vfprintf+1)^0,c
  1306   002606  0E00               	movlw	0
  1307   002608  6E37               	movwf	?_vfprintf^0,c
  1308   00260A  0012               	return		;funcret
  1309   00260C                     __end_of_vfprintf:
  1310                           	callstack 0
  1311                           
  1312 ;; *************** function _vfpfcnvrt *****************
  1313 ;; Defined at:
  1314 ;;		line 1048 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;  fp              2   40[COMRAM] PTR struct _IO_FILE
  1317 ;;		 -> sprintf@f(12), 
  1318 ;;  fmt             2   42[COMRAM] PTR PTR unsigned char 
  1319 ;;		 -> vfprintf@cfmt(2), 
  1320 ;;  ap              2   44[COMRAM] PTR PTR void 
  1321 ;;		 -> sprintf@ap(2), 
  1322 ;; Auto vars:     Size  Location     Type
  1323 ;;  convarg         4   48[COMRAM] struct .
  1324 ;;  cp              2   52[COMRAM] PTR unsigned char 
  1325 ;;		 -> STR_6(3), STR_5(3), STR_4(3), 
  1326 ;;  i               2    0        int 
  1327 ;;  done            2    0        int 
  1328 ;;  c               1    0        unsigned char 
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  1    wreg      void 
  1331 ;; Registers used:
  1332 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1338 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1339 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1340 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1341 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1342 ;;Total ram usage:       14 bytes
  1343 ;; Hardware stack levels used: 1
  1344 ;; Hardware stack levels required when called: 5
  1345 ;; This function calls:
  1346 ;;		_dtoa
  1347 ;;		_fputc
  1348 ;; This function is called by:
  1349 ;;		_vfprintf
  1350 ;; This function uses a non-reentrant model
  1351 ;;
  1352                           
  1353                           	psect	text4
  1354   0018B4                     __ptext4:
  1355                           	callstack 0
  1356   0018B4                     _vfpfcnvrt:
  1357                           	callstack 22
  1358   0018B4                     
  1359                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1048: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\c
      +                          ommon\doprnt.c: 1049: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\dopr
      +                          nt.c: 1050:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common
      +                          \doprnt.c: 1051:     int done, i;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\c
      +                          ommon\doprnt.c: 1059:  } convarg;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\c
      +                          ommon\doprnt.c: 1062:     if ((*fmt)[0] == '%') {
  1360   0018B4  C02B  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1361   0018B8  C02C  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1362   0018BC  CFDE FFF6          	movff	postinc2,tblptrl
  1363   0018C0  CFDD FFF7          	movff	postdec2,tblptrh
  1364   0018C4                     	if	0	;tblptru may be non-zero
  1365   0018C4                     	endif
  1366   0018C4                     	if	0	;tblptru may be non-zero
  1367   0018C4                     	endif
  1368   0018C4  0008               	tblrd		*
  1369   0018C6  50F5               	movf	tablat,w,c
  1370   0018C8  0A25               	xorlw	37
  1371   0018CA  A4D8               	btfss	status,2,c
  1372   0018CC  EF6A  F00C         	goto	u2171
  1373   0018D0  EF6C  F00C         	goto	u2170
  1374   0018D4                     u2171:
  1375   0018D4  EFD6  F00C         	goto	l3036
  1376   0018D8                     u2170:
  1377   0018D8                     
  1378                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1063:         ++*
      +                          fmt;
  1379   0018D8  C02B  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1380   0018DC  C02C  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1381   0018E0  2ADE               	incf	postinc2,f,c
  1382   0018E2  0E00               	movlw	0
  1383   0018E4  22DD               	addwfc	postdec2,f,c
  1384   0018E6                     
  1385                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1065:         fla
      +                          gs = width = 0;
  1386   0018E6  0E00               	movlw	0
  1387   0018E8  6E5B               	movwf	(_width+1)^0,c
  1388   0018EA  0E00               	movlw	0
  1389   0018EC  6E5A               	movwf	_width^0,c
  1390   0018EE  C05A  F05E         	movff	_width,_flags
  1391   0018F2                     
  1392                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1066:         pre
      +                          c = -1;
  1393   0018F2  685C               	setf	_prec^0,c
  1394   0018F4  685D               	setf	(_prec+1)^0,c
  1395   0018F6                     
  1396                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1143:   cp = *fmt
      +                          ;
  1397   0018F6  C02B  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1398   0018FA  C02C  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1399   0018FE  CFDE F035          	movff	postinc2,vfpfcnvrt@cp
  1400   001902  CFDD F036          	movff	postdec2,vfpfcnvrt@cp+1
  1401   001906                     
  1402                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1213:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1403   001906  C035  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1404   00190A  C036  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1405   00190E                     	if	0	;tblptru may be non-zero
  1406   00190E                     	endif
  1407   00190E                     	if	0	;tblptru may be non-zero
  1408   00190E                     	endif
  1409   00190E  0008               	tblrd		*
  1410   001910  50F5               	movf	tablat,w,c
  1411   001912  0A64               	xorlw	100
  1412   001914  B4D8               	btfsc	status,2,c
  1413   001916  EF8F  F00C         	goto	u2181
  1414   00191A  EF91  F00C         	goto	u2180
  1415   00191E                     u2181:
  1416   00191E  EF9F  F00C         	goto	l3026
  1417   001922                     u2180:
  1418   001922  C035  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1419   001926  C036  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1420   00192A                     	if	0	;tblptru may be non-zero
  1421   00192A                     	endif
  1422   00192A                     	if	0	;tblptru may be non-zero
  1423   00192A                     	endif
  1424   00192A  0008               	tblrd		*
  1425   00192C  50F5               	movf	tablat,w,c
  1426   00192E  0A69               	xorlw	105
  1427   001930  A4D8               	btfss	status,2,c
  1428   001932  EF9D  F00C         	goto	u2191
  1429   001936  EF9F  F00C         	goto	u2190
  1430   00193A                     u2191:
  1431   00193A  EFCD  F00C         	goto	l3032
  1432   00193E                     u2190:
  1433   00193E                     l3026:
  1434                           
  1435                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1256:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1436   00193E  C02D  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1437   001942  C02E  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1438   001946  CFDF F02F          	movff	indf2,??_vfpfcnvrt
  1439   00194A  0E02               	movlw	2
  1440   00194C  26DE               	addwf	postinc2,f,c
  1441   00194E  CFDF F030          	movff	indf2,??_vfpfcnvrt+1
  1442   001952  0E00               	movlw	0
  1443   001954  22DD               	addwfc	postdec2,f,c
  1444   001956  C02F  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1445   00195A  C030  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1446   00195E  CFDE F031          	movff	postinc2,vfpfcnvrt@convarg
  1447   001962  CFDD F032          	movff	postdec2,vfpfcnvrt@convarg+1
  1448                           
  1449                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1258:    *fmt = c
      +                          p+1;
  1450   001966  0E01               	movlw	1
  1451   001968  2435               	addwf	vfpfcnvrt@cp^0,w,c
  1452   00196A  6E2F               	movwf	??_vfpfcnvrt^0,c
  1453   00196C  0E00               	movlw	0
  1454   00196E  2036               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1455   001970  6E30               	movwf	(??_vfpfcnvrt+1)^0,c
  1456   001972  C02B  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1457   001976  C02C  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1458   00197A  C02F  FFDE         	movff	??_vfpfcnvrt,postinc2
  1459   00197E  C030  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1460   001982                     
  1461                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1259:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1462   001982  C029  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1463   001986  C02A  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1464   00198A  C031  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  1465   00198E  C032  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1466   001992  EC0E  F008         	call	_dtoa	;wreg free
  1467   001996  EFEA  F00C         	goto	l1298
  1468   00199A                     l3032:
  1469                           
  1470                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1535:         ++*
      +                          fmt;
  1471   00199A  C02B  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1472   00199E  C02C  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1473   0019A2  2ADE               	incf	postinc2,f,c
  1474   0019A4  0E00               	movlw	0
  1475   0019A6  22DD               	addwfc	postdec2,f,c
  1476   0019A8  EFEA  F00C         	goto	l1298
  1477   0019AC                     l3036:
  1478                           
  1479                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1540:     fputc((
      +                          int)(*fmt)[0], fp);
  1480   0019AC  C02B  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1481   0019B0  C02C  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1482   0019B4  CFDE FFF6          	movff	postinc2,tblptrl
  1483   0019B8  CFDD FFF7          	movff	postdec2,tblptrh
  1484   0019BC                     	if	0	;tblptru may be non-zero
  1485   0019BC                     	endif
  1486   0019BC                     	if	0	;tblptru may be non-zero
  1487   0019BC                     	endif
  1488   0019BC  0008               	tblrd		*
  1489   0019BE  50F5               	movf	tablat,w,c
  1490   0019C0  6E01               	movwf	fputc@c^0,c
  1491   0019C2  6A02               	clrf	(fputc@c+1)^0,c
  1492   0019C4  C029  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1493   0019C8  C02A  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1494   0019CC  EC11  F00F         	call	_fputc	;wreg free
  1495   0019D0  EFCD  F00C         	goto	l3032
  1496   0019D4                     l1298:
  1497   0019D4  0012               	return		;funcret
  1498   0019D6                     __end_of_vfpfcnvrt:
  1499                           	callstack 0
  1500                           
  1501 ;; *************** function _dtoa *****************
  1502 ;; Defined at:
  1503 ;;		line 470 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1506 ;;		 -> sprintf@f(12), 
  1507 ;;  d               2   29[COMRAM] int 
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;  i               2   37[COMRAM] int 
  1510 ;;  w               2   35[COMRAM] int 
  1511 ;;  p               2   33[COMRAM] int 
  1512 ;;  s               1   39[COMRAM] unsigned char 
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  1    wreg      void 
  1515 ;; Registers used:
  1516 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1522 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1523 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;Total ram usage:       13 bytes
  1527 ;; Hardware stack levels used: 1
  1528 ;; Hardware stack levels required when called: 4
  1529 ;; This function calls:
  1530 ;;		___awdiv
  1531 ;;		___awmod
  1532 ;;		_abs
  1533 ;;		_pad
  1534 ;; This function is called by:
  1535 ;;		_vfpfcnvrt
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           	psect	text5
  1540   00101C                     __ptext5:
  1541                           	callstack 0
  1542   00101C                     _dtoa:
  1543                           	callstack 22
  1544   00101C                     
  1545                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 470: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\commo
      +                          n\doprnt.c: 471: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c:
      +                           472:  char s;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 473
      +                          :     int i, p, w;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c:
      +                           476:     s = d < 0 ? 1 : 0;
  1546   00101C  BE1F               	btfsc	(dtoa@d+1)^0,7,c
  1547   00101E  EF13  F008         	goto	u1971
  1548   001022  EF16  F008         	goto	u1970
  1549   001026                     u1971:
  1550   001026  0E01               	movlw	1
  1551   001028  EF17  F008         	goto	u1980
  1552   00102C                     u1970:
  1553   00102C  0E00               	movlw	0
  1554   00102E                     u1980:
  1555   00102E  6E28               	movwf	dtoa@s^0,c
  1556   001030                     
  1557                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 477:     if (s) {
  1558   001030  5028               	movf	dtoa@s^0,w,c
  1559   001032  B4D8               	btfsc	status,2,c
  1560   001034  EF1E  F008         	goto	u1991
  1561   001038  EF20  F008         	goto	u1990
  1562   00103C                     u1991:
  1563   00103C  EF24  F008         	goto	l2892
  1564   001040                     u1990:
  1565   001040                     
  1566                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 478:         d = 
      +                          -d;
  1567   001040  6C1E               	negf	dtoa@d^0,c
  1568   001042  1E1F               	comf	(dtoa@d+1)^0,f,c
  1569   001044  B0D8               	btfsc	status,0,c
  1570   001046  2A1F               	incf	(dtoa@d+1)^0,f,c
  1571   001048                     l2892:
  1572                           
  1573                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 487:     p = (0 <
      +                          = prec) ? prec : 1;
  1574   001048  BE5D               	btfsc	(_prec+1)^0,7,c
  1575   00104A  EF2B  F008         	goto	u2000
  1576   00104E  EF29  F008         	goto	u2001
  1577   001052                     u2001:
  1578   001052  EF31  F008         	goto	l1277
  1579   001056                     u2000:
  1580   001056  0E00               	movlw	0
  1581   001058  6E23               	movwf	(dtoa@p+1)^0,c
  1582   00105A  0E01               	movlw	1
  1583   00105C  6E22               	movwf	dtoa@p^0,c
  1584   00105E  EF35  F008         	goto	l1279
  1585   001062                     l1277:
  1586   001062  C05C  F022         	movff	_prec,dtoa@p
  1587   001066  C05D  F023         	movff	_prec+1,dtoa@p+1
  1588   00106A                     l1279:
  1589                           
  1590                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 488:     w = widt
      +                          h;
  1591   00106A  C05A  F024         	movff	_width,dtoa@w
  1592   00106E  C05B  F025         	movff	_width+1,dtoa@w+1
  1593   001072                     
  1594                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 489:     if (s
  1595   001072  5028               	movf	dtoa@s^0,w,c
  1596   001074  B4D8               	btfsc	status,2,c
  1597   001076  EF3F  F008         	goto	u2011
  1598   00107A  EF41  F008         	goto	u2010
  1599   00107E                     u2011:
  1600   00107E  EF58  F008         	goto	l1280
  1601   001082                     u2010:
  1602   001082                     
  1603                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 493:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 494:         --w;
  1604   001082  0624               	decf	dtoa@w^0,f,c
  1605   001084  A0D8               	btfss	status,0,c
  1606   001086  0625               	decf	(dtoa@w+1)^0,f,c
  1607   001088                     
  1608                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 495:   s = s ? '-
      +                          ' : '+';
  1609   001088  5028               	movf	dtoa@s^0,w,c
  1610   00108A  A4D8               	btfss	status,2,c
  1611   00108C  EF4A  F008         	goto	u2021
  1612   001090  EF4C  F008         	goto	u2020
  1613   001094                     u2021:
  1614   001094  EF52  F008         	goto	l2904
  1615   001098                     u2020:
  1616   001098  0E00               	movlw	0
  1617   00109A  6E21               	movwf	(_dtoa$1420+1)^0,c
  1618   00109C  0E2B               	movlw	43
  1619   00109E  6E20               	movwf	_dtoa$1420^0,c
  1620   0010A0  EF56  F008         	goto	l2906
  1621   0010A4                     l2904:
  1622   0010A4  0E00               	movlw	0
  1623   0010A6  6E21               	movwf	(_dtoa$1420+1)^0,c
  1624   0010A8  0E2D               	movlw	45
  1625   0010AA  6E20               	movwf	_dtoa$1420^0,c
  1626   0010AC                     l2906:
  1627   0010AC  C020  F028         	movff	_dtoa$1420,dtoa@s
  1628   0010B0                     l1280:
  1629                           
  1630                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 505:     i = size
      +                          of(dbuf) - 1;
  1631   0010B0  0E00               	movlw	0
  1632   0010B2  6E27               	movwf	(dtoa@i+1)^0,c
  1633   0010B4  0E1F               	movlw	31
  1634   0010B6  6E26               	movwf	dtoa@i^0,c
  1635   0010B8                     
  1636                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 506:     dbuf[i] 
      +                          = '\0';
  1637   0010B8  0E00               	movlw	0
  1638   0010BA  0100               	movlb	0	; () banked
  1639   0010BC  6FC5               	movwf	(_dbuf+31)& (0+255),b
  1640                           
  1641                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 507:     while (!
      +                          (i < 1) && (d || (0 < p)
  1642   0010BE  EF91  F008         	goto	l2920
  1643   0010C2                     l2910:
  1644                           
  1645                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 511:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 512:         --i;
  1646   0010C2  0626               	decf	dtoa@i^0,f,c
  1647   0010C4  A0D8               	btfss	status,0,c
  1648   0010C6  0627               	decf	(dtoa@i+1)^0,f,c
  1649   0010C8                     
  1650                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 513:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  1651   0010C8  0EA6               	movlw	low _dbuf
  1652   0010CA  2426               	addwf	dtoa@i^0,w,c
  1653   0010CC  6ED9               	movwf	fsr2l,c
  1654   0010CE  0E00               	movlw	high _dbuf
  1655   0010D0  2027               	addwfc	(dtoa@i+1)^0,w,c
  1656   0010D2  6EDA               	movwf	fsr2h,c
  1657   0010D4  C01E  F001         	movff	dtoa@d,___awmod@dividend
  1658   0010D8  C01F  F002         	movff	dtoa@d+1,___awmod@dividend+1
  1659   0010DC  0E00               	movlw	0
  1660   0010DE  6E04               	movwf	(___awmod@divisor+1)^0,c
  1661   0010E0  0E0A               	movlw	10
  1662   0010E2  6E03               	movwf	___awmod@divisor^0,c
  1663   0010E4  ECD8  F00F         	call	___awmod	;wreg free
  1664   0010E8  C001  F007         	movff	?___awmod,abs@a
  1665   0010EC  C002  F008         	movff	?___awmod+1,abs@a+1
  1666   0010F0  ECBC  F013         	call	_abs	;wreg free
  1667   0010F4  5007               	movf	?_abs^0,w,c
  1668   0010F6  0F30               	addlw	48
  1669   0010F8  6EDF               	movwf	indf2,c
  1670   0010FA                     
  1671                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 514:         --p;
  1672   0010FA  0622               	decf	dtoa@p^0,f,c
  1673   0010FC  A0D8               	btfss	status,0,c
  1674   0010FE  0623               	decf	(dtoa@p+1)^0,f,c
  1675   001100                     
  1676                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 515:         --w;
  1677   001100  0624               	decf	dtoa@w^0,f,c
  1678   001102  A0D8               	btfss	status,0,c
  1679   001104  0625               	decf	(dtoa@w+1)^0,f,c
  1680   001106                     
  1681                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 516:         d = 
      +                          d / 10;
  1682   001106  C01E  F001         	movff	dtoa@d,___awdiv@dividend
  1683   00110A  C01F  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  1684   00110E  0E00               	movlw	0
  1685   001110  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1686   001112  0E0A               	movlw	10
  1687   001114  6E03               	movwf	___awdiv@divisor^0,c
  1688   001116  EC76  F00F         	call	___awdiv	;wreg free
  1689   00111A  C001  F01E         	movff	?___awdiv,dtoa@d
  1690   00111E  C002  F01F         	movff	?___awdiv+1,dtoa@d+1
  1691   001122                     l2920:
  1692                           
  1693                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 507:     while (!
      +                          (i < 1) && (d || (0 < p)
  1694   001122  BE27               	btfsc	(dtoa@i+1)^0,7,c
  1695   001124  EF9C  F008         	goto	u2031
  1696   001128  5027               	movf	(dtoa@i+1)^0,w,c
  1697   00112A  E108               	bnz	u2030
  1698   00112C  0426               	decf	dtoa@i^0,w,c
  1699   00112E  A0D8               	btfss	status,0,c
  1700   001130  EF9C  F008         	goto	u2031
  1701   001134  EF9E  F008         	goto	u2030
  1702   001138                     u2031:
  1703   001138  EFB4  F008         	goto	l2926
  1704   00113C                     u2030:
  1705   00113C  501E               	movf	dtoa@d^0,w,c
  1706   00113E  101F               	iorwf	(dtoa@d+1)^0,w,c
  1707   001140  A4D8               	btfss	status,2,c
  1708   001142  EFA5  F008         	goto	u2041
  1709   001146  EFA7  F008         	goto	u2040
  1710   00114A                     u2041:
  1711   00114A  EF61  F008         	goto	l2910
  1712   00114E                     u2040:
  1713   00114E  BE23               	btfsc	(dtoa@p+1)^0,7,c
  1714   001150  EFB4  F008         	goto	u2050
  1715   001154  5023               	movf	(dtoa@p+1)^0,w,c
  1716   001156  E106               	bnz	u2051
  1717   001158  0422               	decf	dtoa@p^0,w,c
  1718   00115A  B0D8               	btfsc	status,0,c
  1719   00115C  EFB2  F008         	goto	u2051
  1720   001160  EFB4  F008         	goto	u2050
  1721   001164                     u2051:
  1722   001164  EF61  F008         	goto	l2910
  1723   001168                     u2050:
  1724   001168                     l2926:
  1725                           
  1726                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 520:     if (s !=
      +                           0) {
  1727   001168  5028               	movf	dtoa@s^0,w,c
  1728   00116A  B4D8               	btfsc	status,2,c
  1729   00116C  EFBA  F008         	goto	u2061
  1730   001170  EFBC  F008         	goto	u2060
  1731   001174                     u2061:
  1732   001174  EFC7  F008         	goto	l2932
  1733   001178                     u2060:
  1734   001178                     
  1735                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 521:         --i;
  1736   001178  0626               	decf	dtoa@i^0,f,c
  1737   00117A  A0D8               	btfss	status,0,c
  1738   00117C  0627               	decf	(dtoa@i+1)^0,f,c
  1739   00117E                     
  1740                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 522:         dbuf
      +                          [i] = s;
  1741   00117E  0EA6               	movlw	low _dbuf
  1742   001180  2426               	addwf	dtoa@i^0,w,c
  1743   001182  6ED9               	movwf	fsr2l,c
  1744   001184  0E00               	movlw	high _dbuf
  1745   001186  2027               	addwfc	(dtoa@i+1)^0,w,c
  1746   001188  6EDA               	movwf	fsr2h,c
  1747   00118A  C028  FFDF         	movff	dtoa@s,indf2
  1748   00118E                     l2932:
  1749                           
  1750                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 526:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1751   00118E  C01C  F011         	movff	dtoa@fp,pad@fp
  1752   001192  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1753   001196  0EA6               	movlw	low _dbuf
  1754   001198  2426               	addwf	dtoa@i^0,w,c
  1755   00119A  6E13               	movwf	pad@buf^0,c
  1756   00119C  0E00               	movlw	high _dbuf
  1757   00119E  2027               	addwfc	(dtoa@i+1)^0,w,c
  1758   0011A0  6E14               	movwf	(pad@buf+1)^0,c
  1759   0011A2  C024  F015         	movff	dtoa@w,pad@p
  1760   0011A6  C025  F016         	movff	dtoa@w+1,pad@p+1
  1761   0011AA  EC9C  F011         	call	_pad	;wreg free
  1762   0011AE  0012               	return		;funcret
  1763   0011B0                     __end_of_dtoa:
  1764                           	callstack 0
  1765                           
  1766 ;; *************** function _pad *****************
  1767 ;; Defined at:
  1768 ;;		line 152 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1771 ;;		 -> sprintf@f(12), 
  1772 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1773 ;;		 -> dbuf(32), 
  1774 ;;  p               2   20[COMRAM] int 
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;  w               2   25[COMRAM] int 
  1777 ;;  i               2   23[COMRAM] int 
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  1    wreg      void 
  1780 ;; Registers used:
  1781 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1787 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1788 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;Total ram usage:       11 bytes
  1792 ;; Hardware stack levels used: 1
  1793 ;; Hardware stack levels required when called: 3
  1794 ;; This function calls:
  1795 ;;		_fputc
  1796 ;;		_fputs
  1797 ;; This function is called by:
  1798 ;;		_dtoa
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           	psect	text6
  1803   002338                     __ptext6:
  1804                           	callstack 0
  1805   002338                     _pad:
  1806                           	callstack 22
  1807   002338                     
  1808                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 152: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\com
      +                          mon\doprnt.c: 153: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.
      +                          c: 154:     int i, w;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt
      +                          .c: 164:     w = (p < 0) ? 0 : p;
  1809   002338  BE16               	btfsc	(pad@p+1)^0,7,c
  1810   00233A  EFA1  F011         	goto	u1921
  1811   00233E  EFA3  F011         	goto	u1920
  1812   002342                     u1921:
  1813   002342  EFA9  F011         	goto	l2848
  1814   002346                     u1920:
  1815   002346  C015  F01A         	movff	pad@p,pad@w
  1816   00234A  C016  F01B         	movff	pad@p+1,pad@w+1
  1817   00234E  EFAD  F011         	goto	l1268
  1818   002352                     l2848:
  1819   002352  0E00               	movlw	0
  1820   002354  6E1B               	movwf	(pad@w+1)^0,c
  1821   002356  0E00               	movlw	0
  1822   002358  6E1A               	movwf	pad@w^0,c
  1823   00235A                     l1268:
  1824                           
  1825                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 165:     i = 0;
  1826   00235A  0E00               	movlw	0
  1827   00235C  6E19               	movwf	(pad@i+1)^0,c
  1828   00235E  0E00               	movlw	0
  1829   002360  6E18               	movwf	pad@i^0,c
  1830                           
  1831                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 166:     while (i
      +                           < w) {
  1832   002362  EFBF  F011         	goto	l2854
  1833   002366                     l2850:
  1834                           
  1835                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 167:         fput
      +                          c(' ', fp);
  1836   002366  0E00               	movlw	0
  1837   002368  6E02               	movwf	(fputc@c+1)^0,c
  1838   00236A  0E20               	movlw	32
  1839   00236C  6E01               	movwf	fputc@c^0,c
  1840   00236E  C011  F003         	movff	pad@fp,fputc@fp
  1841   002372  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1842   002376  EC11  F00F         	call	_fputc	;wreg free
  1843   00237A                     
  1844                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 168:         ++i;
  1845   00237A  4A18               	infsnz	pad@i^0,f,c
  1846   00237C  2A19               	incf	(pad@i+1)^0,f,c
  1847   00237E                     l2854:
  1848                           
  1849                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 166:     while (i
      +                           < w) {
  1850   00237E  501A               	movf	pad@w^0,w,c
  1851   002380  5C18               	subwf	pad@i^0,w,c
  1852   002382  5019               	movf	(pad@i+1)^0,w,c
  1853   002384  0A80               	xorlw	128
  1854   002386  6E17               	movwf	??_pad^0,c
  1855   002388  501B               	movf	(pad@w+1)^0,w,c
  1856   00238A  0A80               	xorlw	128
  1857   00238C  5817               	subwfb	??_pad^0,w,c
  1858   00238E  A0D8               	btfss	status,0,c
  1859   002390  EFCC  F011         	goto	u1931
  1860   002394  EFCE  F011         	goto	u1930
  1861   002398                     u1931:
  1862   002398  EFB3  F011         	goto	l2850
  1863   00239C                     u1930:
  1864   00239C                     
  1865                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 175:         fput
      +                          s((const char *)buf, fp);
  1866   00239C  C013  F00A         	movff	pad@buf,fputs@s
  1867   0023A0  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1868   0023A4  C011  F00C         	movff	pad@fp,fputs@fp
  1869   0023A8  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1870   0023AC  EC9A  F013         	call	_fputs	;wreg free
  1871   0023B0  0012               	return		;funcret
  1872   0023B2                     __end_of_pad:
  1873                           	callstack 0
  1874                           
  1875 ;; *************** function _fputs *****************
  1876 ;; Defined at:
  1877 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\nf_fputs.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1880 ;;		 -> dbuf(32), 
  1881 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1882 ;;		 -> sprintf@f(12), 
  1883 ;; Auto vars:     Size  Location     Type
  1884 ;;  i               2   14[COMRAM] int 
  1885 ;;  c               1   13[COMRAM] unsigned char 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  2    9[COMRAM] int 
  1888 ;; Registers used:
  1889 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1895 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1896 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1898 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1899 ;;Total ram usage:        7 bytes
  1900 ;; Hardware stack levels used: 1
  1901 ;; Hardware stack levels required when called: 2
  1902 ;; This function calls:
  1903 ;;		_fputc
  1904 ;; This function is called by:
  1905 ;;		_pad
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           	psect	text7
  1910   002734                     __ptext7:
  1911                           	callstack 0
  1912   002734                     _fputs:
  1913                           	callstack 22
  1914   002734  0E00               	movlw	0
  1915   002736  6E10               	movwf	(fputs@i+1)^0,c
  1916   002738  0E00               	movlw	0
  1917   00273A  6E0F               	movwf	fputs@i^0,c
  1918   00273C  EFAB  F013         	goto	l2734
  1919   002740                     l2730:
  1920   002740  C00E  F001         	movff	fputs@c,fputc@c
  1921   002744  6A02               	clrf	(fputc@c+1)^0,c
  1922   002746  C00C  F003         	movff	fputs@fp,fputc@fp
  1923   00274A  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1924   00274E  EC11  F00F         	call	_fputc	;wreg free
  1925   002752  4A0F               	infsnz	fputs@i^0,f,c
  1926   002754  2A10               	incf	(fputs@i+1)^0,f,c
  1927   002756                     l2734:
  1928   002756  500F               	movf	fputs@i^0,w,c
  1929   002758  240A               	addwf	fputs@s^0,w,c
  1930   00275A  6ED9               	movwf	fsr2l,c
  1931   00275C  5010               	movf	(fputs@i+1)^0,w,c
  1932   00275E  200B               	addwfc	(fputs@s+1)^0,w,c
  1933   002760  6EDA               	movwf	fsr2h,c
  1934   002762  50DF               	movf	indf2,w,c
  1935   002764  6E0E               	movwf	fputs@c^0,c
  1936   002766  500E               	movf	fputs@c^0,w,c
  1937   002768  A4D8               	btfss	status,2,c
  1938   00276A  EFB9  F013         	goto	u1771
  1939   00276E  EFBB  F013         	goto	u1770
  1940   002772                     u1771:
  1941   002772  EFA0  F013         	goto	l2730
  1942   002776                     u1770:
  1943   002776  0012               	return		;funcret
  1944   002778                     __end_of_fputs:
  1945                           	callstack 0
  1946                           
  1947 ;; *************** function _fputc *****************
  1948 ;; Defined at:
  1949 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\nf_fputc.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;  c               2    0[COMRAM] int 
  1952 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1953 ;;		 -> sprintf@f(12), 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;		None
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  2    0[COMRAM] int 
  1958 ;; Registers used:
  1959 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1965 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1967 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1968 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;Total ram usage:        9 bytes
  1970 ;; Hardware stack levels used: 1
  1971 ;; Hardware stack levels required when called: 1
  1972 ;; This function calls:
  1973 ;;		_putch
  1974 ;; This function is called by:
  1975 ;;		_pad
  1976 ;;		_vfpfcnvrt
  1977 ;;		_fputs
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text8
  1982   001E22                     __ptext8:
  1983                           	callstack 0
  1984   001E22                     _fputc:
  1985                           	callstack 25
  1986   001E22  5003               	movf	fputc@fp^0,w,c
  1987   001E24  1004               	iorwf	(fputc@fp+1)^0,w,c
  1988   001E26  B4D8               	btfsc	status,2,c
  1989   001E28  EF18  F00F         	goto	u1691
  1990   001E2C  EF1A  F00F         	goto	u1690
  1991   001E30                     u1691:
  1992   001E30  EF23  F00F         	goto	l2694
  1993   001E34                     u1690:
  1994   001E34  5003               	movf	fputc@fp^0,w,c
  1995   001E36  1004               	iorwf	(fputc@fp+1)^0,w,c
  1996   001E38  A4D8               	btfss	status,2,c
  1997   001E3A  EF21  F00F         	goto	u1701
  1998   001E3E  EF23  F00F         	goto	u1700
  1999   001E42                     u1701:
  2000   001E42  EF28  F00F         	goto	l2696
  2001   001E46                     u1700:
  2002   001E46                     l2694:
  2003   001E46  5001               	movf	fputc@c^0,w,c
  2004   001E48  EC11  F014         	call	_putch
  2005   001E4C  EF75  F00F         	goto	l1323
  2006   001E50                     l2696:
  2007   001E50  EE20 F00A          	lfsr	2,10
  2008   001E54  5003               	movf	fputc@fp^0,w,c
  2009   001E56  26D9               	addwf	fsr2l,f,c
  2010   001E58  5004               	movf	(fputc@fp+1)^0,w,c
  2011   001E5A  22DA               	addwfc	fsr2h,f,c
  2012   001E5C  50DE               	movf	postinc2,w,c
  2013   001E5E  10DE               	iorwf	postinc2,w,c
  2014   001E60  B4D8               	btfsc	status,2,c
  2015   001E62  EF35  F00F         	goto	u1711
  2016   001E66  EF37  F00F         	goto	u1710
  2017   001E6A                     u1711:
  2018   001E6A  EF52  F00F         	goto	l2700
  2019   001E6E                     u1710:
  2020   001E6E  EE20 F00A          	lfsr	2,10
  2021   001E72  5003               	movf	fputc@fp^0,w,c
  2022   001E74  26D9               	addwf	fsr2l,f,c
  2023   001E76  5004               	movf	(fputc@fp+1)^0,w,c
  2024   001E78  22DA               	addwfc	fsr2h,f,c
  2025   001E7A  EE10 F003          	lfsr	1,3
  2026   001E7E  5003               	movf	fputc@fp^0,w,c
  2027   001E80  26E1               	addwf	fsr1l,f,c
  2028   001E82  5004               	movf	(fputc@fp+1)^0,w,c
  2029   001E84  22E2               	addwfc	fsr1h,f,c
  2030   001E86  50DE               	movf	postinc2,w,c
  2031   001E88  5CE6               	subwf	postinc1,w,c
  2032   001E8A  50E6               	movf	postinc1,w,c
  2033   001E8C  0A80               	xorlw	128
  2034   001E8E  6E09               	movwf	(??_fputc+4)^0,c
  2035   001E90  50DE               	movf	postinc2,w,c
  2036   001E92  0A80               	xorlw	128
  2037   001E94  5809               	subwfb	(??_fputc+4)^0,w,c
  2038   001E96  B0D8               	btfsc	status,0,c
  2039   001E98  EF50  F00F         	goto	u1721
  2040   001E9C  EF52  F00F         	goto	u1720
  2041   001EA0                     u1721:
  2042   001EA0  EF75  F00F         	goto	l1323
  2043   001EA4                     u1720:
  2044   001EA4                     l2700:
  2045   001EA4  EE20 F003          	lfsr	2,3
  2046   001EA8  5003               	movf	fputc@fp^0,w,c
  2047   001EAA  26D9               	addwf	fsr2l,f,c
  2048   001EAC  5004               	movf	(fputc@fp+1)^0,w,c
  2049   001EAE  22DA               	addwfc	fsr2h,f,c
  2050   001EB0  CFDE F005          	movff	postinc2,??_fputc
  2051   001EB4  CFDD F006          	movff	postdec2,??_fputc+1
  2052   001EB8  C003  FFD9         	movff	fputc@fp,fsr2l
  2053   001EBC  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2054   001EC0  CFDE F007          	movff	postinc2,??_fputc+2
  2055   001EC4  CFDD F008          	movff	postdec2,??_fputc+3
  2056   001EC8  5005               	movf	??_fputc^0,w,c
  2057   001ECA  2407               	addwf	(??_fputc+2)^0,w,c
  2058   001ECC  6ED9               	movwf	fsr2l,c
  2059   001ECE  5006               	movf	(??_fputc+1)^0,w,c
  2060   001ED0  2008               	addwfc	(??_fputc+3)^0,w,c
  2061   001ED2  6EDA               	movwf	fsr2h,c
  2062   001ED4  C001  FFDF         	movff	fputc@c,indf2
  2063   001ED8  EE20 F003          	lfsr	2,3
  2064   001EDC  5003               	movf	fputc@fp^0,w,c
  2065   001EDE  26D9               	addwf	fsr2l,f,c
  2066   001EE0  5004               	movf	(fputc@fp+1)^0,w,c
  2067   001EE2  22DA               	addwfc	fsr2h,f,c
  2068   001EE4  2ADE               	incf	postinc2,f,c
  2069   001EE6  0E00               	movlw	0
  2070   001EE8  22DD               	addwfc	postdec2,f,c
  2071   001EEA                     l1323:
  2072   001EEA  0012               	return		;funcret
  2073   001EEC                     __end_of_fputc:
  2074                           	callstack 0
  2075                           
  2076 ;; *************** function _putch *****************
  2077 ;; Defined at:
  2078 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\putch.c"
  2079 ;; Parameters:    Size  Location     Type
  2080 ;;  c               1    wreg     unsigned char 
  2081 ;; Auto vars:     Size  Location     Type
  2082 ;;  c               1    0[COMRAM] unsigned char 
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  1    wreg      void 
  2085 ;; Registers used:
  2086 ;;		wreg
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2096 ;;Total ram usage:        0 bytes
  2097 ;; Hardware stack levels used: 1
  2098 ;; This function calls:
  2099 ;;		Nothing
  2100 ;; This function is called by:
  2101 ;;		_fputc
  2102 ;; This function uses a non-reentrant model
  2103 ;;
  2104                           
  2105                           	psect	text9
  2106   002822                     __ptext9:
  2107                           	callstack 0
  2108   002822                     _putch:
  2109                           	callstack 25
  2110   002822  0012               	return		;funcret
  2111   002824                     __end_of_putch:
  2112                           	callstack 0
  2113                           
  2114 ;; *************** function _abs *****************
  2115 ;; Defined at:
  2116 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\abs.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;  a               2    6[COMRAM] int 
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;		None
  2121 ;; Return value:  Size  Location     Type
  2122 ;;                  2    6[COMRAM] int 
  2123 ;; Registers used:
  2124 ;;		wreg, status,2, status,0
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2130 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2132 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;Total ram usage:        4 bytes
  2135 ;; Hardware stack levels used: 1
  2136 ;; This function calls:
  2137 ;;		Nothing
  2138 ;; This function is called by:
  2139 ;;		_dtoa
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text10
  2144   002778                     __ptext10:
  2145                           	callstack 0
  2146   002778                     _abs:
  2147                           	callstack 25
  2148   002778  BE08               	btfsc	(abs@a+1)^0,7,c
  2149   00277A  EFC9  F013         	goto	u1940
  2150   00277E  5008               	movf	(abs@a+1)^0,w,c
  2151   002780  E106               	bnz	u1941
  2152   002782  0407               	decf	abs@a^0,w,c
  2153   002784  B0D8               	btfsc	status,0,c
  2154   002786  EFC7  F013         	goto	u1941
  2155   00278A  EFC9  F013         	goto	u1940
  2156   00278E                     u1941:
  2157   00278E  EFD7  F013         	goto	l1308
  2158   002792                     u1940:
  2159   002792  C007  F009         	movff	abs@a,??_abs
  2160   002796  C008  F00A         	movff	abs@a+1,??_abs+1
  2161   00279A  1E09               	comf	??_abs^0,f,c
  2162   00279C  1E0A               	comf	(??_abs+1)^0,f,c
  2163   00279E  4A09               	infsnz	??_abs^0,f,c
  2164   0027A0  2A0A               	incf	(??_abs+1)^0,f,c
  2165   0027A2  C009  F007         	movff	??_abs,?_abs
  2166   0027A6  C00A  F008         	movff	??_abs+1,?_abs+1
  2167   0027AA  EFDB  F013         	goto	l1311
  2168   0027AE                     l1308:
  2169   0027AE  C007  F007         	movff	abs@a,?_abs
  2170   0027B2  C008  F008         	movff	abs@a+1,?_abs+1
  2171   0027B6                     l1311:
  2172   0027B6  0012               	return		;funcret
  2173   0027B8                     __end_of_abs:
  2174                           	callstack 0
  2175                           
  2176 ;; *************** function ___awmod *****************
  2177 ;; Defined at:
  2178 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\awmod.c"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;  dividend        2    0[COMRAM] int 
  2181 ;;  divisor         2    2[COMRAM] int 
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  sign            1    5[COMRAM] unsigned char 
  2184 ;;  counter         1    4[COMRAM] unsigned char 
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  2    0[COMRAM] int 
  2187 ;; Registers used:
  2188 ;;		wreg, status,2, status,0
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2194 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;Total ram usage:        6 bytes
  2199 ;; Hardware stack levels used: 1
  2200 ;; This function calls:
  2201 ;;		Nothing
  2202 ;; This function is called by:
  2203 ;;		_dtoa
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text11
  2208   001FB0                     __ptext11:
  2209                           	callstack 0
  2210   001FB0                     ___awmod:
  2211                           	callstack 25
  2212   001FB0  0E00               	movlw	0
  2213   001FB2  6E06               	movwf	___awmod@sign^0,c
  2214   001FB4  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2215   001FB6  EFE1  F00F         	goto	u1860
  2216   001FBA  EFDF  F00F         	goto	u1861
  2217   001FBE                     u1861:
  2218   001FBE  EFE7  F00F         	goto	l2816
  2219   001FC2                     u1860:
  2220   001FC2  6C01               	negf	___awmod@dividend^0,c
  2221   001FC4  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2222   001FC6  B0D8               	btfsc	status,0,c
  2223   001FC8  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2224   001FCA  0E01               	movlw	1
  2225   001FCC  6E06               	movwf	___awmod@sign^0,c
  2226   001FCE                     l2816:
  2227   001FCE  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2228   001FD0  EFEE  F00F         	goto	u1870
  2229   001FD4  EFEC  F00F         	goto	u1871
  2230   001FD8                     u1871:
  2231   001FD8  EFF2  F00F         	goto	l2820
  2232   001FDC                     u1870:
  2233   001FDC  6C03               	negf	___awmod@divisor^0,c
  2234   001FDE  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2235   001FE0  B0D8               	btfsc	status,0,c
  2236   001FE2  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2237   001FE4                     l2820:
  2238   001FE4  5003               	movf	___awmod@divisor^0,w,c
  2239   001FE6  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2240   001FE8  B4D8               	btfsc	status,2,c
  2241   001FEA  EFF9  F00F         	goto	u1881
  2242   001FEE  EFFB  F00F         	goto	u1880
  2243   001FF2                     u1881:
  2244   001FF2  EF1F  F010         	goto	l2836
  2245   001FF6                     u1880:
  2246   001FF6  0E01               	movlw	1
  2247   001FF8  6E05               	movwf	___awmod@counter^0,c
  2248   001FFA  EF03  F010         	goto	l2826
  2249   001FFE                     l2824:
  2250   001FFE  90D8               	bcf	status,0,c
  2251   002000  3603               	rlcf	___awmod@divisor^0,f,c
  2252   002002  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2253   002004  2A05               	incf	___awmod@counter^0,f,c
  2254   002006                     l2826:
  2255   002006  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2256   002008  EF08  F010         	goto	u1891
  2257   00200C  EF0A  F010         	goto	u1890
  2258   002010                     u1891:
  2259   002010  EFFF  F00F         	goto	l2824
  2260   002014                     u1890:
  2261   002014                     l2828:
  2262   002014  5003               	movf	___awmod@divisor^0,w,c
  2263   002016  5C01               	subwf	___awmod@dividend^0,w,c
  2264   002018  5004               	movf	(___awmod@divisor+1)^0,w,c
  2265   00201A  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2266   00201C  A0D8               	btfss	status,0,c
  2267   00201E  EF13  F010         	goto	u1901
  2268   002022  EF15  F010         	goto	u1900
  2269   002026                     u1901:
  2270   002026  EF19  F010         	goto	l2832
  2271   00202A                     u1900:
  2272   00202A  5003               	movf	___awmod@divisor^0,w,c
  2273   00202C  5E01               	subwf	___awmod@dividend^0,f,c
  2274   00202E  5004               	movf	(___awmod@divisor+1)^0,w,c
  2275   002030  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2276   002032                     l2832:
  2277   002032  90D8               	bcf	status,0,c
  2278   002034  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2279   002036  3203               	rrcf	___awmod@divisor^0,f,c
  2280   002038  2E05               	decfsz	___awmod@counter^0,f,c
  2281   00203A  EF0A  F010         	goto	l2828
  2282   00203E                     l2836:
  2283   00203E  5006               	movf	___awmod@sign^0,w,c
  2284   002040  B4D8               	btfsc	status,2,c
  2285   002042  EF25  F010         	goto	u1911
  2286   002046  EF27  F010         	goto	u1910
  2287   00204A                     u1911:
  2288   00204A  EF2B  F010         	goto	l2840
  2289   00204E                     u1910:
  2290   00204E  6C01               	negf	___awmod@dividend^0,c
  2291   002050  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2292   002052  B0D8               	btfsc	status,0,c
  2293   002054  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2294   002056                     l2840:
  2295   002056  C001  F001         	movff	___awmod@dividend,?___awmod
  2296   00205A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2297   00205E  0012               	return		;funcret
  2298   002060                     __end_of___awmod:
  2299                           	callstack 0
  2300                           
  2301 ;; *************** function ___awdiv *****************
  2302 ;; Defined at:
  2303 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\awdiv.c"
  2304 ;; Parameters:    Size  Location     Type
  2305 ;;  dividend        2    0[COMRAM] int 
  2306 ;;  divisor         2    2[COMRAM] int 
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;  quotient        2    6[COMRAM] int 
  2309 ;;  sign            1    5[COMRAM] unsigned char 
  2310 ;;  counter         1    4[COMRAM] unsigned char 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  2    0[COMRAM] int 
  2313 ;; Registers used:
  2314 ;;		wreg, status,2, status,0
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2320 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2323 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2324 ;;Total ram usage:        8 bytes
  2325 ;; Hardware stack levels used: 1
  2326 ;; This function calls:
  2327 ;;		Nothing
  2328 ;; This function is called by:
  2329 ;;		_dtoa
  2330 ;; This function uses a non-reentrant model
  2331 ;;
  2332                           
  2333                           	psect	text12
  2334   001EEC                     __ptext12:
  2335                           	callstack 0
  2336   001EEC                     ___awdiv:
  2337                           	callstack 25
  2338   001EEC  0E00               	movlw	0
  2339   001EEE  6E06               	movwf	___awdiv@sign^0,c
  2340   001EF0  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2341   001EF2  EF7F  F00F         	goto	u1800
  2342   001EF6  EF7D  F00F         	goto	u1801
  2343   001EFA                     u1801:
  2344   001EFA  EF85  F00F         	goto	l2772
  2345   001EFE                     u1800:
  2346   001EFE  6C03               	negf	___awdiv@divisor^0,c
  2347   001F00  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2348   001F02  B0D8               	btfsc	status,0,c
  2349   001F04  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2350   001F06  0E01               	movlw	1
  2351   001F08  6E06               	movwf	___awdiv@sign^0,c
  2352   001F0A                     l2772:
  2353   001F0A  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2354   001F0C  EF8C  F00F         	goto	u1810
  2355   001F10  EF8A  F00F         	goto	u1811
  2356   001F14                     u1811:
  2357   001F14  EF92  F00F         	goto	l2778
  2358   001F18                     u1810:
  2359   001F18  6C01               	negf	___awdiv@dividend^0,c
  2360   001F1A  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2361   001F1C  B0D8               	btfsc	status,0,c
  2362   001F1E  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2363   001F20  0E01               	movlw	1
  2364   001F22  1A06               	xorwf	___awdiv@sign^0,f,c
  2365   001F24                     l2778:
  2366   001F24  0E00               	movlw	0
  2367   001F26  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2368   001F28  0E00               	movlw	0
  2369   001F2A  6E07               	movwf	___awdiv@quotient^0,c
  2370   001F2C  5003               	movf	___awdiv@divisor^0,w,c
  2371   001F2E  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2372   001F30  B4D8               	btfsc	status,2,c
  2373   001F32  EF9D  F00F         	goto	u1821
  2374   001F36  EF9F  F00F         	goto	u1820
  2375   001F3A                     u1821:
  2376   001F3A  EFC7  F00F         	goto	l2800
  2377   001F3E                     u1820:
  2378   001F3E  0E01               	movlw	1
  2379   001F40  6E05               	movwf	___awdiv@counter^0,c
  2380   001F42  EFA7  F00F         	goto	l2786
  2381   001F46                     l2784:
  2382   001F46  90D8               	bcf	status,0,c
  2383   001F48  3603               	rlcf	___awdiv@divisor^0,f,c
  2384   001F4A  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2385   001F4C  2A05               	incf	___awdiv@counter^0,f,c
  2386   001F4E                     l2786:
  2387   001F4E  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2388   001F50  EFAC  F00F         	goto	u1831
  2389   001F54  EFAE  F00F         	goto	u1830
  2390   001F58                     u1831:
  2391   001F58  EFA3  F00F         	goto	l2784
  2392   001F5C                     u1830:
  2393   001F5C                     l2788:
  2394   001F5C  90D8               	bcf	status,0,c
  2395   001F5E  3607               	rlcf	___awdiv@quotient^0,f,c
  2396   001F60  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2397   001F62  5003               	movf	___awdiv@divisor^0,w,c
  2398   001F64  5C01               	subwf	___awdiv@dividend^0,w,c
  2399   001F66  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2400   001F68  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2401   001F6A  A0D8               	btfss	status,0,c
  2402   001F6C  EFBA  F00F         	goto	u1841
  2403   001F70  EFBC  F00F         	goto	u1840
  2404   001F74                     u1841:
  2405   001F74  EFC1  F00F         	goto	l2796
  2406   001F78                     u1840:
  2407   001F78  5003               	movf	___awdiv@divisor^0,w,c
  2408   001F7A  5E01               	subwf	___awdiv@dividend^0,f,c
  2409   001F7C  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2410   001F7E  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2411   001F80  8007               	bsf	___awdiv@quotient^0,0,c
  2412   001F82                     l2796:
  2413   001F82  90D8               	bcf	status,0,c
  2414   001F84  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2415   001F86  3203               	rrcf	___awdiv@divisor^0,f,c
  2416   001F88  2E05               	decfsz	___awdiv@counter^0,f,c
  2417   001F8A  EFAE  F00F         	goto	l2788
  2418   001F8E                     l2800:
  2419   001F8E  5006               	movf	___awdiv@sign^0,w,c
  2420   001F90  B4D8               	btfsc	status,2,c
  2421   001F92  EFCD  F00F         	goto	u1851
  2422   001F96  EFCF  F00F         	goto	u1850
  2423   001F9A                     u1851:
  2424   001F9A  EFD3  F00F         	goto	l2804
  2425   001F9E                     u1850:
  2426   001F9E  6C07               	negf	___awdiv@quotient^0,c
  2427   001FA0  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2428   001FA2  B0D8               	btfsc	status,0,c
  2429   001FA4  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2430   001FA6                     l2804:
  2431   001FA6  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2432   001FAA  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2433   001FAE  0012               	return		;funcret
  2434   001FB0                     __end_of___awdiv:
  2435                           	callstack 0
  2436                           
  2437 ;; *************** function _memset *****************
  2438 ;; Defined at:
  2439 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\memset.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;  dest            2    0[COMRAM] PTR void 
  2442 ;;		 -> result_s(4), str_2(4), str(4), 
  2443 ;;  c               2    2[COMRAM] int 
  2444 ;;  n               2    4[COMRAM] unsigned int 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  s               2   10[COMRAM] PTR unsigned char 
  2447 ;;		 -> result_s(4), str_2(4), str(4), 
  2448 ;;  k               2    8[COMRAM] unsigned int 
  2449 ;; Return value:  Size  Location     Type
  2450 ;;                  2    0[COMRAM] PTR void 
  2451 ;; Registers used:
  2452 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2453 ;; Tracked objects:
  2454 ;;		On entry : 0/0
  2455 ;;		On exit  : 0/0
  2456 ;;		Unchanged: 0/0
  2457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2458 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2462 ;;Total ram usage:       12 bytes
  2463 ;; Hardware stack levels used: 1
  2464 ;; This function calls:
  2465 ;;		Nothing
  2466 ;; This function is called by:
  2467 ;;		_main
  2468 ;;		_number_8bit_to_string
  2469 ;;		_number_16bit_to_string
  2470 ;;		_number_32bit_to_string
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text13
  2475   0014D0                     __ptext13:
  2476                           	callstack 0
  2477   0014D0                     _memset:
  2478                           	callstack 29
  2479   0014D0  C001  F00B         	movff	memset@dest,memset@s
  2480   0014D4  C002  F00C         	movff	memset@dest+1,memset@s+1
  2481   0014D8  5005               	movf	memset@n^0,w,c
  2482   0014DA  1006               	iorwf	(memset@n+1)^0,w,c
  2483   0014DC  A4D8               	btfss	status,2,c
  2484   0014DE  EF73  F00A         	goto	u2341
  2485   0014E2  EF75  F00A         	goto	u2340
  2486   0014E6                     u2341:
  2487   0014E6  EF77  F00A         	goto	l3144
  2488   0014EA                     u2340:
  2489   0014EA  EF22  F00B         	goto	l1233
  2490   0014EE                     l3144:
  2491   0014EE  C00B  FFD9         	movff	memset@s,fsr2l
  2492   0014F2  C00C  FFDA         	movff	memset@s+1,fsr2h
  2493   0014F6  C003  FFDF         	movff	memset@c,indf2
  2494   0014FA  5005               	movf	memset@n^0,w,c
  2495   0014FC  240B               	addwf	memset@s^0,w,c
  2496   0014FE  6E07               	movwf	??_memset^0,c
  2497   001500  5006               	movf	(memset@n+1)^0,w,c
  2498   001502  200C               	addwfc	(memset@s+1)^0,w,c
  2499   001504  6E08               	movwf	(??_memset+1)^0,c
  2500   001506  0EFF               	movlw	255
  2501   001508  2407               	addwf	??_memset^0,w,c
  2502   00150A  6ED9               	movwf	fsr2l,c
  2503   00150C  0EFF               	movlw	255
  2504   00150E  2008               	addwfc	(??_memset+1)^0,w,c
  2505   001510  6EDA               	movwf	fsr2h,c
  2506   001512  C003  FFDF         	movff	memset@c,indf2
  2507   001516  5006               	movf	(memset@n+1)^0,w,c
  2508   001518  E107               	bnz	u2351
  2509   00151A  0E03               	movlw	3
  2510   00151C  5C05               	subwf	memset@n^0,w,c
  2511   00151E  B0D8               	btfsc	status,0,c
  2512   001520  EF94  F00A         	goto	u2351
  2513   001524  EF96  F00A         	goto	u2350
  2514   001528                     u2351:
  2515   001528  EF98  F00A         	goto	l3150
  2516   00152C                     u2350:
  2517   00152C  EF22  F00B         	goto	l1233
  2518   001530                     l3150:
  2519   001530  EE20 F001          	lfsr	2,1
  2520   001534  500B               	movf	memset@s^0,w,c
  2521   001536  26D9               	addwf	fsr2l,f,c
  2522   001538  500C               	movf	(memset@s+1)^0,w,c
  2523   00153A  22DA               	addwfc	fsr2h,f,c
  2524   00153C  C003  FFDF         	movff	memset@c,indf2
  2525   001540  EE20 F002          	lfsr	2,2
  2526   001544  500B               	movf	memset@s^0,w,c
  2527   001546  26D9               	addwf	fsr2l,f,c
  2528   001548  500C               	movf	(memset@s+1)^0,w,c
  2529   00154A  22DA               	addwfc	fsr2h,f,c
  2530   00154C  C003  FFDF         	movff	memset@c,indf2
  2531   001550  5005               	movf	memset@n^0,w,c
  2532   001552  240B               	addwf	memset@s^0,w,c
  2533   001554  6E07               	movwf	??_memset^0,c
  2534   001556  5006               	movf	(memset@n+1)^0,w,c
  2535   001558  200C               	addwfc	(memset@s+1)^0,w,c
  2536   00155A  6E08               	movwf	(??_memset+1)^0,c
  2537   00155C  0EFE               	movlw	254
  2538   00155E  2407               	addwf	??_memset^0,w,c
  2539   001560  6ED9               	movwf	fsr2l,c
  2540   001562  0EFF               	movlw	255
  2541   001564  2008               	addwfc	(??_memset+1)^0,w,c
  2542   001566  6EDA               	movwf	fsr2h,c
  2543   001568  C003  FFDF         	movff	memset@c,indf2
  2544   00156C  5005               	movf	memset@n^0,w,c
  2545   00156E  240B               	addwf	memset@s^0,w,c
  2546   001570  6E07               	movwf	??_memset^0,c
  2547   001572  5006               	movf	(memset@n+1)^0,w,c
  2548   001574  200C               	addwfc	(memset@s+1)^0,w,c
  2549   001576  6E08               	movwf	(??_memset+1)^0,c
  2550   001578  0EFD               	movlw	253
  2551   00157A  2407               	addwf	??_memset^0,w,c
  2552   00157C  6ED9               	movwf	fsr2l,c
  2553   00157E  0EFF               	movlw	255
  2554   001580  2008               	addwfc	(??_memset+1)^0,w,c
  2555   001582  6EDA               	movwf	fsr2h,c
  2556   001584  C003  FFDF         	movff	memset@c,indf2
  2557   001588  5006               	movf	(memset@n+1)^0,w,c
  2558   00158A  E107               	bnz	u2361
  2559   00158C  0E07               	movlw	7
  2560   00158E  5C05               	subwf	memset@n^0,w,c
  2561   001590  B0D8               	btfsc	status,0,c
  2562   001592  EFCD  F00A         	goto	u2361
  2563   001596  EFCF  F00A         	goto	u2360
  2564   00159A                     u2361:
  2565   00159A  EFD1  F00A         	goto	l3156
  2566   00159E                     u2360:
  2567   00159E  EF22  F00B         	goto	l1233
  2568   0015A2                     l3156:
  2569   0015A2  EE20 F003          	lfsr	2,3
  2570   0015A6  500B               	movf	memset@s^0,w,c
  2571   0015A8  26D9               	addwf	fsr2l,f,c
  2572   0015AA  500C               	movf	(memset@s+1)^0,w,c
  2573   0015AC  22DA               	addwfc	fsr2h,f,c
  2574   0015AE  C003  FFDF         	movff	memset@c,indf2
  2575   0015B2  5005               	movf	memset@n^0,w,c
  2576   0015B4  240B               	addwf	memset@s^0,w,c
  2577   0015B6  6E07               	movwf	??_memset^0,c
  2578   0015B8  5006               	movf	(memset@n+1)^0,w,c
  2579   0015BA  200C               	addwfc	(memset@s+1)^0,w,c
  2580   0015BC  6E08               	movwf	(??_memset+1)^0,c
  2581   0015BE  0EFC               	movlw	252
  2582   0015C0  2407               	addwf	??_memset^0,w,c
  2583   0015C2  6ED9               	movwf	fsr2l,c
  2584   0015C4  0EFF               	movlw	255
  2585   0015C6  2008               	addwfc	(??_memset+1)^0,w,c
  2586   0015C8  6EDA               	movwf	fsr2h,c
  2587   0015CA  C003  FFDF         	movff	memset@c,indf2
  2588   0015CE  5006               	movf	(memset@n+1)^0,w,c
  2589   0015D0  E107               	bnz	u2371
  2590   0015D2  0E09               	movlw	9
  2591   0015D4  5C05               	subwf	memset@n^0,w,c
  2592   0015D6  B0D8               	btfsc	status,0,c
  2593   0015D8  EFF0  F00A         	goto	u2371
  2594   0015DC  EFF2  F00A         	goto	u2370
  2595   0015E0                     u2371:
  2596   0015E0  EFF4  F00A         	goto	l3162
  2597   0015E4                     u2370:
  2598   0015E4  EF22  F00B         	goto	l1233
  2599   0015E8                     l3162:
  2600   0015E8  C00B  F007         	movff	memset@s,??_memset
  2601   0015EC  C00C  F008         	movff	memset@s+1,??_memset+1
  2602   0015F0  1E07               	comf	??_memset^0,f,c
  2603   0015F2  1E08               	comf	(??_memset+1)^0,f,c
  2604   0015F4  4A07               	infsnz	??_memset^0,f,c
  2605   0015F6  2A08               	incf	(??_memset+1)^0,f,c
  2606   0015F8  0E03               	movlw	3
  2607   0015FA  1407               	andwf	??_memset^0,w,c
  2608   0015FC  6E09               	movwf	memset@k^0,c
  2609   0015FE  6A0A               	clrf	(memset@k+1)^0,c
  2610   001600  5009               	movf	memset@k^0,w,c
  2611   001602  260B               	addwf	memset@s^0,f,c
  2612   001604  500A               	movf	(memset@k+1)^0,w,c
  2613   001606  220C               	addwfc	(memset@s+1)^0,f,c
  2614   001608  5009               	movf	memset@k^0,w,c
  2615   00160A  5E05               	subwf	memset@n^0,f,c
  2616   00160C  500A               	movf	(memset@k+1)^0,w,c
  2617   00160E  5A06               	subwfb	(memset@n+1)^0,f,c
  2618   001610  0EFC               	movlw	252
  2619   001612  1605               	andwf	memset@n^0,f,c
  2620   001614  0EFF               	movlw	255
  2621   001616  1606               	andwf	(memset@n+1)^0,f,c
  2622   001618  EF19  F00B         	goto	l3170
  2623   00161C                     l3164:
  2624   00161C  C00B  FFD9         	movff	memset@s,fsr2l
  2625   001620  C00C  FFDA         	movff	memset@s+1,fsr2h
  2626   001624  C003  FFDF         	movff	memset@c,indf2
  2627   001628  0605               	decf	memset@n^0,f,c
  2628   00162A  A0D8               	btfss	status,0,c
  2629   00162C  0606               	decf	(memset@n+1)^0,f,c
  2630   00162E  4A0B               	infsnz	memset@s^0,f,c
  2631   001630  2A0C               	incf	(memset@s+1)^0,f,c
  2632   001632                     l3170:
  2633   001632  5005               	movf	memset@n^0,w,c
  2634   001634  1006               	iorwf	(memset@n+1)^0,w,c
  2635   001636  A4D8               	btfss	status,2,c
  2636   001638  EF20  F00B         	goto	u2381
  2637   00163C  EF22  F00B         	goto	u2380
  2638   001640                     u2381:
  2639   001640  EF0E  F00B         	goto	l3164
  2640   001644                     u2380:
  2641   001644                     l1233:
  2642   001644  0012               	return		;funcret
  2643   001646                     __end_of_memset:
  2644                           	callstack 0
  2645                           
  2646 ;; *************** function _num_1_read *****************
  2647 ;; Defined at:
  2648 ;;		line 54 in file "Application.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;  lcd             2   42[COMRAM] PTR struct .
  2651 ;;		 -> lcd_1(6), 
  2652 ;;  keypad          2   44[COMRAM] PTR struct .
  2653 ;;		 -> keypad_1(8), 
  2654 ;;  str             2   46[COMRAM] PTR unsigned char 
  2655 ;;		 -> str(4), 
  2656 ;;  operation       2   48[COMRAM] PTR unsigned char 
  2657 ;;		 -> operation(1), 
  2658 ;;  str_2           2   50[COMRAM] PTR unsigned char 
  2659 ;;		 -> str_2(4), 
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;  temp_value      1   56[COMRAM] unsigned char 
  2662 ;;  ret             1   55[COMRAM] unsigned char 
  2663 ;;  counter_3       1   54[COMRAM] unsigned char 
  2664 ;;  counter_1       1   53[COMRAM] unsigned char 
  2665 ;;  counter_2       1   52[COMRAM] unsigned char 
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      unsigned char 
  2668 ;; Registers used:
  2669 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2675 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2676 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2678 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;Total ram usage:       15 bytes
  2680 ;; Hardware stack levels used: 1
  2681 ;; Hardware stack levels required when called: 6
  2682 ;; This function calls:
  2683 ;;		_convert_string_to_numbers
  2684 ;;		_keypad_read_value
  2685 ;;		_lcd_4bits_send_char
  2686 ;;		_lcd_4bits_send_string_pos
  2687 ;;		_num_2_read
  2688 ;; This function is called by:
  2689 ;;		_main
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           	psect	text14
  2694   0011B0                     __ptext14:
  2695                           	callstack 0
  2696   0011B0                     _num_1_read:
  2697                           	callstack 24
  2698   0011B0                     
  2699                           ;Application.c: 56:     uint8 counter_1 = 0;
  2700   0011B0  0E00               	movlw	0
  2701   0011B2  6E36               	movwf	num_1_read@counter_1^0,c
  2702                           
  2703                           ;Application.c: 57:     uint8 counter_2 = 0;
  2704   0011B4  0E00               	movlw	0
  2705   0011B6  6E35               	movwf	num_1_read@counter_2^0,c
  2706                           
  2707                           ;Application.c: 58:     uint8 counter_3 = 0;
  2708   0011B8  0E00               	movlw	0
  2709   0011BA  6E37               	movwf	num_1_read@counter_3^0,c
  2710                           
  2711                           ;Application.c: 59:     uint8 temp_value = 0;
  2712   0011BC  0E00               	movlw	0
  2713   0011BE  6E39               	movwf	num_1_read@temp_value^0,c
  2714   0011C0                     l3392:
  2715                           
  2716                           ;Application.c: 61:         if(counter_1 > 3){
  2717   0011C0  0E03               	movlw	3
  2718   0011C2  6436               	cpfsgt	num_1_read@counter_1^0,c
  2719   0011C4  EFE6  F008         	goto	u2611
  2720   0011C8  EFE8  F008         	goto	u2610
  2721   0011CC                     u2611:
  2722   0011CC  EFFA  F008         	goto	l3402
  2723   0011D0                     u2610:
  2724   0011D0                     
  2725                           ;Application.c: 62:             ret = lcd_4bits_send_string_pos(lcd , "error" , 3 , 1 );
  2726   0011D0  C02B  F019         	movff	num_1_read@lcd,lcd_4bits_send_string_pos@lcd
  2727   0011D4  C02C  F01A         	movff	num_1_read@lcd+1,lcd_4bits_send_string_pos@lcd+1
  2728   0011D8  0E11               	movlw	low STR_1
  2729   0011DA  6E1B               	movwf	lcd_4bits_send_string_pos@data^0,c
  2730   0011DC  0E10               	movlw	high STR_1
  2731   0011DE  6E1C               	movwf	(lcd_4bits_send_string_pos@data+1)^0,c
  2732   0011E0  0E03               	movlw	3
  2733   0011E2  6E1D               	movwf	lcd_4bits_send_string_pos@ROW^0,c
  2734   0011E4  0E01               	movlw	1
  2735   0011E6  6E1E               	movwf	lcd_4bits_send_string_pos@COLUMN^0,c
  2736   0011E8  EC53  F013         	call	_lcd_4bits_send_string_pos	;wreg free
  2737   0011EC  6E38               	movwf	num_1_read@ret^0,c
  2738   0011EE                     l3396:
  2739                           
  2740                           ;Application.c: 63:             return ret;
  2741   0011EE  5038               	movf	num_1_read@ret^0,w,c
  2742   0011F0  EFA1  F009         	goto	l354
  2743   0011F4                     l3402:
  2744   0011F4  C02D  F00E         	movff	num_1_read@keypad,keypad_read_value@key_pad
  2745   0011F8  C02E  F00F         	movff	num_1_read@keypad+1,keypad_read_value@key_pad+1
  2746   0011FC  0E39               	movlw	low num_1_read@temp_value
  2747   0011FE  6E10               	movwf	keypad_read_value@value^0,c
  2748   001200  0E00               	movlw	high num_1_read@temp_value
  2749   001202  6E11               	movwf	(keypad_read_value@value+1)^0,c
  2750   001204  EC9A  F00E         	call	_keypad_read_value	;wreg free
  2751   001208                     
  2752                           ;Application.c: 68:                 if(temp_value != 0){
  2753   001208  5039               	movf	num_1_read@temp_value^0,w,c
  2754   00120A  B4D8               	btfsc	status,2,c
  2755   00120C  EF0A  F009         	goto	u2621
  2756   001210  EF0C  F009         	goto	u2620
  2757   001214                     u2621:
  2758   001214  EFE0  F008         	goto	l3392
  2759   001218                     u2620:
  2760   001218                     
  2761                           ;Application.c: 70:                     if((temp_value == '+') || (temp_value == '*') ||
      +                           (temp_value == '-')){
  2762   001218  0E2B               	movlw	43
  2763   00121A  1839               	xorwf	num_1_read@temp_value^0,w,c
  2764   00121C  B4D8               	btfsc	status,2,c
  2765   00121E  EF13  F009         	goto	u2631
  2766   001222  EF15  F009         	goto	u2630
  2767   001226                     u2631:
  2768   001226  EF27  F009         	goto	l3412
  2769   00122A                     u2630:
  2770   00122A  0E2A               	movlw	42
  2771   00122C  1839               	xorwf	num_1_read@temp_value^0,w,c
  2772   00122E  B4D8               	btfsc	status,2,c
  2773   001230  EF1C  F009         	goto	u2641
  2774   001234  EF1E  F009         	goto	u2640
  2775   001238                     u2641:
  2776   001238  EF27  F009         	goto	l3412
  2777   00123C                     u2640:
  2778   00123C  0E2D               	movlw	45
  2779   00123E  1839               	xorwf	num_1_read@temp_value^0,w,c
  2780   001240  A4D8               	btfss	status,2,c
  2781   001242  EF25  F009         	goto	u2651
  2782   001246  EF27  F009         	goto	u2650
  2783   00124A                     u2651:
  2784   00124A  EF64  F009         	goto	l3434
  2785   00124E                     u2650:
  2786   00124E                     l3412:
  2787                           
  2788                           ;Application.c: 71:                         *operation = temp_value;
  2789   00124E  C031  FFD9         	movff	num_1_read@operation,fsr2l
  2790   001252  C032  FFDA         	movff	num_1_read@operation+1,fsr2h
  2791   001256  C039  FFDF         	movff	num_1_read@temp_value,indf2
  2792   00125A                     
  2793                           ;Application.c: 72:                         counter_3++;
  2794   00125A  2A37               	incf	num_1_read@counter_3^0,f,c
  2795   00125C                     
  2796                           ;Application.c: 73:                         if(counter_3 == 10){
  2797   00125C  0E0A               	movlw	10
  2798   00125E  1837               	xorwf	num_1_read@counter_3^0,w,c
  2799   001260  A4D8               	btfss	status,2,c
  2800   001262  EF35  F009         	goto	u2661
  2801   001266  EF37  F009         	goto	u2660
  2802   00126A                     u2661:
  2803   00126A  EFE0  F008         	goto	l3392
  2804   00126E                     u2660:
  2805   00126E  C02B  F00F         	movff	num_1_read@lcd,lcd_4bits_send_char@lcd
  2806   001272  C02C  F010         	movff	num_1_read@lcd+1,lcd_4bits_send_char@lcd+1
  2807   001276  C039  F011         	movff	num_1_read@temp_value,lcd_4bits_send_char@data
  2808   00127A  ECD9  F011         	call	_lcd_4bits_send_char	;wreg free
  2809   00127E  C02B  F020         	movff	num_1_read@lcd,num_2_read@lcd
  2810   001282  C02C  F021         	movff	num_1_read@lcd+1,num_2_read@lcd+1
  2811   001286  C02D  F022         	movff	num_1_read@keypad,num_2_read@keypad
  2812   00128A  C02E  F023         	movff	num_1_read@keypad+1,num_2_read@keypad+1
  2813   00128E  C033  F024         	movff	num_1_read@str_2,num_2_read@str
  2814   001292  C034  F025         	movff	num_1_read@str_2+1,num_2_read@str+1
  2815   001296  ECC0  F00B         	call	_num_2_read	;wreg free
  2816   00129A  C02F  F001         	movff	num_1_read@str,convert_string_to_numbers@str
  2817   00129E  C030  F002         	movff	num_1_read@str+1,convert_string_to_numbers@str+1
  2818   0012A2  0E75               	movlw	low _value_1
  2819   0012A4  6E03               	movwf	convert_string_to_numbers@value^0,c
  2820   0012A6  0E00               	movlw	high _value_1
  2821   0012A8  6E04               	movwf	(convert_string_to_numbers@value+1)^0,c
  2822   0012AA  EC23  F00B         	call	_convert_string_to_numbers	;wreg free
  2823   0012AE                     
  2824                           ;Application.c: 79:                             ret = convert_string_to_numbers(str_2 , 
      +                          &value_2);
  2825   0012AE  C033  F001         	movff	num_1_read@str_2,convert_string_to_numbers@str
  2826   0012B2  C034  F002         	movff	num_1_read@str_2+1,convert_string_to_numbers@str+1
  2827   0012B6  0E74               	movlw	low _value_2
  2828   0012B8  6E03               	movwf	convert_string_to_numbers@value^0,c
  2829   0012BA  0E00               	movlw	high _value_2
  2830   0012BC  6E04               	movwf	(convert_string_to_numbers@value+1)^0,c
  2831   0012BE  EC23  F00B         	call	_convert_string_to_numbers	;wreg free
  2832   0012C2  6E38               	movwf	num_1_read@ret^0,c
  2833   0012C4  EFF7  F008         	goto	l3396
  2834   0012C8                     l3434:
  2835   0012C8  0E3D               	movlw	61
  2836   0012CA  1839               	xorwf	num_1_read@temp_value^0,w,c
  2837   0012CC  A4D8               	btfss	status,2,c
  2838   0012CE  EF6B  F009         	goto	u2671
  2839   0012D2  EF6D  F009         	goto	u2670
  2840   0012D6                     u2671:
  2841   0012D6  EF7E  F009         	goto	l3444
  2842   0012DA                     u2670:
  2843   0012DA                     
  2844                           ;Application.c: 85:                         ret = lcd_4bits_send_string_pos(lcd , str , 
      +                          3 , 1 );
  2845   0012DA  C02B  F019         	movff	num_1_read@lcd,lcd_4bits_send_string_pos@lcd
  2846   0012DE  C02C  F01A         	movff	num_1_read@lcd+1,lcd_4bits_send_string_pos@lcd+1
  2847   0012E2  C02F  F01B         	movff	num_1_read@str,lcd_4bits_send_string_pos@data
  2848   0012E6  C030  F01C         	movff	num_1_read@str+1,lcd_4bits_send_string_pos@data+1
  2849   0012EA  0E03               	movlw	3
  2850   0012EC  6E1D               	movwf	lcd_4bits_send_string_pos@ROW^0,c
  2851   0012EE  0E01               	movlw	1
  2852   0012F0  6E1E               	movwf	lcd_4bits_send_string_pos@COLUMN^0,c
  2853   0012F2  EC53  F013         	call	_lcd_4bits_send_string_pos	;wreg free
  2854   0012F6  6E38               	movwf	num_1_read@ret^0,c
  2855   0012F8  EFF7  F008         	goto	l3396
  2856   0012FC                     l3444:
  2857                           
  2858                           ;Application.c: 89:                         counter_3++;
  2859   0012FC  2A37               	incf	num_1_read@counter_3^0,f,c
  2860   0012FE                     
  2861                           ;Application.c: 90:                         if(counter_3 == 5){
  2862   0012FE  0E05               	movlw	5
  2863   001300  1837               	xorwf	num_1_read@counter_3^0,w,c
  2864   001302  A4D8               	btfss	status,2,c
  2865   001304  EF86  F009         	goto	u2681
  2866   001308  EF88  F009         	goto	u2680
  2867   00130C                     u2681:
  2868   00130C  EF9F  F009         	goto	l356
  2869   001310                     u2680:
  2870   001310  C02B  F00F         	movff	num_1_read@lcd,lcd_4bits_send_char@lcd
  2871   001314  C02C  F010         	movff	num_1_read@lcd+1,lcd_4bits_send_char@lcd+1
  2872   001318  C039  F011         	movff	num_1_read@temp_value,lcd_4bits_send_char@data
  2873   00131C  ECD9  F011         	call	_lcd_4bits_send_char	;wreg free
  2874   001320                     
  2875                           ;Application.c: 92:                             str[counter_1] = temp_value;
  2876   001320  5036               	movf	num_1_read@counter_1^0,w,c
  2877   001322  242F               	addwf	num_1_read@str^0,w,c
  2878   001324  6ED9               	movwf	fsr2l,c
  2879   001326  0E00               	movlw	0
  2880   001328  2030               	addwfc	(num_1_read@str+1)^0,w,c
  2881   00132A  6EDA               	movwf	fsr2h,c
  2882   00132C  C039  FFDF         	movff	num_1_read@temp_value,indf2
  2883   001330                     
  2884                           ;Application.c: 93:                             counter_1++;
  2885   001330  2A36               	incf	num_1_read@counter_1^0,f,c
  2886   001332                     
  2887                           ;Application.c: 94:                             temp_value = 0;
  2888   001332  0E00               	movlw	0
  2889   001334  6E39               	movwf	num_1_read@temp_value^0,c
  2890   001336                     
  2891                           ;Application.c: 95:                             counter_3 = 0;
  2892   001336  0E00               	movlw	0
  2893   001338  6E37               	movwf	num_1_read@counter_3^0,c
  2894   00133A  EFE0  F008         	goto	l3392
  2895   00133E                     l356:
  2896   00133E  EFE0  F008         	goto	l3392
  2897   001342                     l354:
  2898   001342  0012               	return		;funcret
  2899   001344                     __end_of_num_1_read:
  2900                           	callstack 0
  2901                           
  2902 ;; *************** function _num_2_read *****************
  2903 ;; Defined at:
  2904 ;;		line 110 in file "Application.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;  lcd             2   31[COMRAM] PTR struct .
  2907 ;;		 -> lcd_1(6), 
  2908 ;;  keypad          2   33[COMRAM] PTR struct .
  2909 ;;		 -> keypad_1(8), 
  2910 ;;  str             2   35[COMRAM] PTR unsigned char 
  2911 ;;		 -> str_2(4), 
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;  temp_value      1   41[COMRAM] unsigned char 
  2914 ;;  ret             1   40[COMRAM] unsigned char 
  2915 ;;  counter_3       1   39[COMRAM] unsigned char 
  2916 ;;  counter_1       1   38[COMRAM] unsigned char 
  2917 ;;  counter_2       1   37[COMRAM] unsigned char 
  2918 ;; Return value:  Size  Location     Type
  2919 ;;                  1    wreg      unsigned char 
  2920 ;; Registers used:
  2921 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2922 ;; Tracked objects:
  2923 ;;		On entry : 0/0
  2924 ;;		On exit  : 0/0
  2925 ;;		Unchanged: 0/0
  2926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2927 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;Total ram usage:       11 bytes
  2932 ;; Hardware stack levels used: 1
  2933 ;; Hardware stack levels required when called: 5
  2934 ;; This function calls:
  2935 ;;		_keypad_read_value
  2936 ;;		_lcd_4bits_send_char
  2937 ;;		_lcd_4bits_send_string_pos
  2938 ;; This function is called by:
  2939 ;;		_num_1_read
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text15
  2944   001780                     __ptext15:
  2945                           	callstack 0
  2946   001780                     _num_2_read:
  2947                           	callstack 24
  2948   001780                     
  2949                           ;Application.c: 112:     uint8 counter_1 = 0;
  2950   001780  0E00               	movlw	0
  2951   001782  6E27               	movwf	num_2_read@counter_1^0,c
  2952                           
  2953                           ;Application.c: 113:     uint8 counter_2 = 0;
  2954   001784  0E00               	movlw	0
  2955   001786  6E26               	movwf	num_2_read@counter_2^0,c
  2956                           
  2957                           ;Application.c: 114:     uint8 counter_3 = 0;
  2958   001788  0E00               	movlw	0
  2959   00178A  6E28               	movwf	num_2_read@counter_3^0,c
  2960                           
  2961                           ;Application.c: 115:     uint8 temp_value = 0;
  2962   00178C  0E00               	movlw	0
  2963   00178E  6E2A               	movwf	num_2_read@temp_value^0,c
  2964   001790                     l3216:
  2965                           
  2966                           ;Application.c: 117:         if(counter_1 > 3){
  2967   001790  0E03               	movlw	3
  2968   001792  6427               	cpfsgt	num_2_read@counter_1^0,c
  2969   001794  EFCE  F00B         	goto	u2451
  2970   001798  EFD0  F00B         	goto	u2450
  2971   00179C                     u2451:
  2972   00179C  EFE2  F00B         	goto	l3226
  2973   0017A0                     u2450:
  2974   0017A0                     
  2975                           ;Application.c: 118:             ret = lcd_4bits_send_string_pos(lcd , "error" , 3 , 1 )
      +                          ;
  2976   0017A0  C020  F019         	movff	num_2_read@lcd,lcd_4bits_send_string_pos@lcd
  2977   0017A4  C021  F01A         	movff	num_2_read@lcd+1,lcd_4bits_send_string_pos@lcd+1
  2978   0017A8  0E11               	movlw	low STR_1
  2979   0017AA  6E1B               	movwf	lcd_4bits_send_string_pos@data^0,c
  2980   0017AC  0E10               	movlw	high STR_1
  2981   0017AE  6E1C               	movwf	(lcd_4bits_send_string_pos@data+1)^0,c
  2982   0017B0  0E03               	movlw	3
  2983   0017B2  6E1D               	movwf	lcd_4bits_send_string_pos@ROW^0,c
  2984   0017B4  0E01               	movlw	1
  2985   0017B6  6E1E               	movwf	lcd_4bits_send_string_pos@COLUMN^0,c
  2986   0017B8  EC53  F013         	call	_lcd_4bits_send_string_pos	;wreg free
  2987   0017BC  6E29               	movwf	num_2_read@ret^0,c
  2988   0017BE                     l3220:
  2989                           
  2990                           ;Application.c: 119:             return ret;
  2991   0017BE  5029               	movf	num_2_read@ret^0,w,c
  2992   0017C0  EF59  F00C         	goto	l371
  2993   0017C4                     l3226:
  2994                           
  2995                           ;Application.c: 123:             ret = keypad_read_value(keypad , &temp_value);
  2996   0017C4  C022  F00E         	movff	num_2_read@keypad,keypad_read_value@key_pad
  2997   0017C8  C023  F00F         	movff	num_2_read@keypad+1,keypad_read_value@key_pad+1
  2998   0017CC  0E2A               	movlw	low num_2_read@temp_value
  2999   0017CE  6E10               	movwf	keypad_read_value@value^0,c
  3000   0017D0  0E00               	movlw	high num_2_read@temp_value
  3001   0017D2  6E11               	movwf	(keypad_read_value@value+1)^0,c
  3002   0017D4  EC9A  F00E         	call	_keypad_read_value	;wreg free
  3003   0017D8  6E29               	movwf	num_2_read@ret^0,c
  3004   0017DA                     
  3005                           ;Application.c: 124:                 if(temp_value != 0){
  3006   0017DA  502A               	movf	num_2_read@temp_value^0,w,c
  3007   0017DC  B4D8               	btfsc	status,2,c
  3008   0017DE  EFF3  F00B         	goto	u2461
  3009   0017E2  EFF5  F00B         	goto	u2460
  3010   0017E6                     u2461:
  3011   0017E6  EFC8  F00B         	goto	l3216
  3012   0017EA                     u2460:
  3013   0017EA                     
  3014                           ;Application.c: 125:                     if((temp_value == '+') || (temp_value == '*') |
      +                          | (temp_value == '-')){
  3015   0017EA  0E2B               	movlw	43
  3016   0017EC  182A               	xorwf	num_2_read@temp_value^0,w,c
  3017   0017EE  B4D8               	btfsc	status,2,c
  3018   0017F0  EFFC  F00B         	goto	u2471
  3019   0017F4  EFFE  F00B         	goto	u2470
  3020   0017F8                     u2471:
  3021   0017F8  EF10  F00C         	goto	l3236
  3022   0017FC                     u2470:
  3023   0017FC  0E2A               	movlw	42
  3024   0017FE  182A               	xorwf	num_2_read@temp_value^0,w,c
  3025   001800  B4D8               	btfsc	status,2,c
  3026   001802  EF05  F00C         	goto	u2481
  3027   001806  EF07  F00C         	goto	u2480
  3028   00180A                     u2481:
  3029   00180A  EF10  F00C         	goto	l3236
  3030   00180E                     u2480:
  3031   00180E  0E2D               	movlw	45
  3032   001810  182A               	xorwf	num_2_read@temp_value^0,w,c
  3033   001812  A4D8               	btfss	status,2,c
  3034   001814  EF0E  F00C         	goto	u2491
  3035   001818  EF10  F00C         	goto	u2490
  3036   00181C                     u2491:
  3037   00181C  EF2B  F00C         	goto	l3250
  3038   001820                     u2490:
  3039   001820                     l3236:
  3040                           
  3041                           ;Application.c: 126:                         counter_3++;
  3042   001820  2A28               	incf	num_2_read@counter_3^0,f,c
  3043   001822                     
  3044                           ;Application.c: 127:                         if(counter_3 == 10){
  3045   001822  0E0A               	movlw	10
  3046   001824  1828               	xorwf	num_2_read@counter_3^0,w,c
  3047   001826  A4D8               	btfss	status,2,c
  3048   001828  EF18  F00C         	goto	u2501
  3049   00182C  EF1A  F00C         	goto	u2500
  3050   001830                     u2501:
  3051   001830  EFC8  F00B         	goto	l3216
  3052   001834                     u2500:
  3053   001834                     
  3054                           ;Application.c: 128:                             ret = lcd_4bits_send_string_pos(lcd , "
      +                          error" , 3 , 1 );
  3055   001834  C020  F019         	movff	num_2_read@lcd,lcd_4bits_send_string_pos@lcd
  3056   001838  C021  F01A         	movff	num_2_read@lcd+1,lcd_4bits_send_string_pos@lcd+1
  3057   00183C  0E11               	movlw	low STR_1
  3058   00183E  6E1B               	movwf	lcd_4bits_send_string_pos@data^0,c
  3059   001840  0E10               	movlw	high STR_1
  3060   001842  6E1C               	movwf	(lcd_4bits_send_string_pos@data+1)^0,c
  3061   001844  0E03               	movlw	3
  3062   001846  6E1D               	movwf	lcd_4bits_send_string_pos@ROW^0,c
  3063   001848  0E01               	movlw	1
  3064   00184A  6E1E               	movwf	lcd_4bits_send_string_pos@COLUMN^0,c
  3065   00184C  EC53  F013         	call	_lcd_4bits_send_string_pos	;wreg free
  3066   001850  6E29               	movwf	num_2_read@ret^0,c
  3067   001852  EFDF  F00B         	goto	l3220
  3068   001856                     l3250:
  3069   001856  0E3D               	movlw	61
  3070   001858  182A               	xorwf	num_2_read@temp_value^0,w,c
  3071   00185A  A4D8               	btfss	status,2,c
  3072   00185C  EF32  F00C         	goto	u2511
  3073   001860  EF34  F00C         	goto	u2510
  3074   001864                     u2511:
  3075   001864  EF36  F00C         	goto	l3258
  3076   001868                     u2510:
  3077   001868  EFDF  F00B         	goto	l3220
  3078   00186C                     l3258:
  3079                           
  3080                           ;Application.c: 138:                         counter_3++;
  3081   00186C  2A28               	incf	num_2_read@counter_3^0,f,c
  3082   00186E                     
  3083                           ;Application.c: 139:                         if(counter_3 == 10){
  3084   00186E  0E0A               	movlw	10
  3085   001870  1828               	xorwf	num_2_read@counter_3^0,w,c
  3086   001872  A4D8               	btfss	status,2,c
  3087   001874  EF3E  F00C         	goto	u2521
  3088   001878  EF40  F00C         	goto	u2520
  3089   00187C                     u2521:
  3090   00187C  EF57  F00C         	goto	l373
  3091   001880                     u2520:
  3092   001880  C020  F00F         	movff	num_2_read@lcd,lcd_4bits_send_char@lcd
  3093   001884  C021  F010         	movff	num_2_read@lcd+1,lcd_4bits_send_char@lcd+1
  3094   001888  C02A  F011         	movff	num_2_read@temp_value,lcd_4bits_send_char@data
  3095   00188C  ECD9  F011         	call	_lcd_4bits_send_char	;wreg free
  3096   001890                     
  3097                           ;Application.c: 141:                             str[counter_1] = temp_value;
  3098   001890  5027               	movf	num_2_read@counter_1^0,w,c
  3099   001892  2424               	addwf	num_2_read@str^0,w,c
  3100   001894  6ED9               	movwf	fsr2l,c
  3101   001896  0E00               	movlw	0
  3102   001898  2025               	addwfc	(num_2_read@str+1)^0,w,c
  3103   00189A  6EDA               	movwf	fsr2h,c
  3104   00189C  C02A  FFDF         	movff	num_2_read@temp_value,indf2
  3105   0018A0                     
  3106                           ;Application.c: 142:                             counter_1++;
  3107   0018A0  2A27               	incf	num_2_read@counter_1^0,f,c
  3108   0018A2                     
  3109                           ;Application.c: 143:                             temp_value = 0;
  3110   0018A2  0E00               	movlw	0
  3111   0018A4  6E2A               	movwf	num_2_read@temp_value^0,c
  3112   0018A6                     
  3113                           ;Application.c: 144:                             counter_3 = 0;
  3114   0018A6  0E00               	movlw	0
  3115   0018A8  6E28               	movwf	num_2_read@counter_3^0,c
  3116   0018AA  EFC8  F00B         	goto	l3216
  3117   0018AE                     l373:
  3118   0018AE  EFC8  F00B         	goto	l3216
  3119   0018B2                     l371:
  3120   0018B2  0012               	return		;funcret
  3121   0018B4                     __end_of_num_2_read:
  3122                           	callstack 0
  3123                           
  3124 ;; *************** function _lcd_4bits_send_string_pos *****************
  3125 ;; Defined at:
  3126 ;;		line 111 in file "ECU_Layer/LCD/Lcd.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  lcd             2   24[COMRAM] PTR const struct .
  3129 ;;		 -> lcd_1(6), 
  3130 ;;  data            2   26[COMRAM] PTR unsigned char 
  3131 ;;		 -> STR_3(6), STR_2(6), STR_1(6), result_s(4), 
  3132 ;;		 -> str(4), 
  3133 ;;  ROW             1   28[COMRAM] unsigned char 
  3134 ;;  COLUMN          1   29[COMRAM] unsigned char 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  ret             1   30[COMRAM] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      unsigned char 
  3139 ;; Registers used:
  3140 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3146 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;Total ram usage:        7 bytes
  3151 ;; Hardware stack levels used: 1
  3152 ;; Hardware stack levels required when called: 4
  3153 ;; This function calls:
  3154 ;;		_lcd_4bits_send_string
  3155 ;;		_lcd_4bits_set_cursor
  3156 ;; This function is called by:
  3157 ;;		_main
  3158 ;;		_num_1_read
  3159 ;;		_num_2_read
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           	psect	text16
  3164   0026A6                     __ptext16:
  3165                           	callstack 0
  3166   0026A6                     _lcd_4bits_send_string_pos:
  3167                           	callstack 24
  3168   0026A6                     
  3169                           ;ECU_Layer/LCD/Lcd.c: 115:     if(lcd == ((void*)0)){
  3170   0026A6  5019               	movf	lcd_4bits_send_string_pos@lcd^0,w,c
  3171   0026A8  101A               	iorwf	(lcd_4bits_send_string_pos@lcd+1)^0,w,c
  3172   0026AA  A4D8               	btfss	status,2,c
  3173   0026AC  EF5A  F013         	goto	u2301
  3174   0026B0  EF5C  F013         	goto	u2300
  3175   0026B4                     u2301:
  3176   0026B4  EF60  F013         	goto	l3108
  3177   0026B8                     u2300:
  3178   0026B8                     
  3179                           ;ECU_Layer/LCD/Lcd.c: 116:         ret = (Std_ReturnType)0x01;
  3180   0026B8  0E01               	movlw	1
  3181   0026BA  6E1F               	movwf	lcd_4bits_send_string_pos@ret^0,c
  3182                           
  3183                           ;ECU_Layer/LCD/Lcd.c: 117:     }
  3184   0026BC  EF75  F013         	goto	l3112
  3185   0026C0                     l3108:
  3186   0026C0  C019  F013         	movff	lcd_4bits_send_string_pos@lcd,lcd_4bits_set_cursor@lcd
  3187   0026C4  C01A  F014         	movff	lcd_4bits_send_string_pos@lcd+1,lcd_4bits_set_cursor@lcd+1
  3188   0026C8  C01D  F015         	movff	lcd_4bits_send_string_pos@ROW,lcd_4bits_set_cursor@ROW
  3189   0026CC  C01E  F016         	movff	lcd_4bits_send_string_pos@COLUMN,lcd_4bits_set_cursor@COLUMN
  3190   0026D0  EC30  F010         	call	_lcd_4bits_set_cursor	;wreg free
  3191   0026D4                     
  3192                           ;ECU_Layer/LCD/Lcd.c: 120:         ret = lcd_4bits_send_string(lcd , data);
  3193   0026D4  C019  F013         	movff	lcd_4bits_send_string_pos@lcd,lcd_4bits_send_string@lcd
  3194   0026D8  C01A  F014         	movff	lcd_4bits_send_string_pos@lcd+1,lcd_4bits_send_string@lcd+1
  3195   0026DC  C01B  F015         	movff	lcd_4bits_send_string_pos@data,lcd_4bits_send_string@data
  3196   0026E0  C01C  F016         	movff	lcd_4bits_send_string_pos@data+1,lcd_4bits_send_string@data+1
  3197   0026E4  ECD3  F010         	call	_lcd_4bits_send_string	;wreg free
  3198   0026E8  6E1F               	movwf	lcd_4bits_send_string_pos@ret^0,c
  3199   0026EA                     l3112:
  3200                           
  3201                           ;ECU_Layer/LCD/Lcd.c: 122:     return ret;
  3202   0026EA  501F               	movf	lcd_4bits_send_string_pos@ret^0,w,c
  3203   0026EC  0012               	return		;funcret
  3204   0026EE                     __end_of_lcd_4bits_send_string_pos:
  3205                           	callstack 0
  3206                           
  3207 ;; *************** function _lcd_4bits_send_string *****************
  3208 ;; Defined at:
  3209 ;;		line 97 in file "ECU_Layer/LCD/Lcd.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;  lcd             2   18[COMRAM] PTR const struct .
  3212 ;;		 -> lcd_1(6), 
  3213 ;;  data            2   20[COMRAM] PTR unsigned char 
  3214 ;;		 -> STR_3(6), STR_2(6), STR_1(6), result_s(4), 
  3215 ;;		 -> str(4), 
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;  ret             1   22[COMRAM] unsigned char 
  3218 ;; Return value:  Size  Location     Type
  3219 ;;                  1    wreg      unsigned char 
  3220 ;; Registers used:
  3221 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3227 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;Total ram usage:        5 bytes
  3232 ;; Hardware stack levels used: 1
  3233 ;; Hardware stack levels required when called: 3
  3234 ;; This function calls:
  3235 ;;		_lcd_4bits_send_char
  3236 ;; This function is called by:
  3237 ;;		_lcd_4bits_send_string_pos
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241                           	psect	text17
  3242   0021A6                     __ptext17:
  3243                           	callstack 0
  3244   0021A6                     _lcd_4bits_send_string:
  3245                           	callstack 24
  3246   0021A6                     
  3247                           ;ECU_Layer/LCD/Lcd.c: 99:     Std_ReturnType ret = (Std_ReturnType)0x01;
  3248   0021A6  0E01               	movlw	1
  3249   0021A8  6E17               	movwf	lcd_4bits_send_string@ret^0,c
  3250   0021AA                     
  3251                           ;ECU_Layer/LCD/Lcd.c: 100:     if(lcd == ((void*)0)){
  3252   0021AA  5013               	movf	lcd_4bits_send_string@lcd^0,w,c
  3253   0021AC  1014               	iorwf	(lcd_4bits_send_string@lcd+1)^0,w,c
  3254   0021AE  A4D8               	btfss	status,2,c
  3255   0021B0  EFDC  F010         	goto	u2131
  3256   0021B4  EFDE  F010         	goto	u2130
  3257   0021B8                     u2131:
  3258   0021B8  EFFD  F010         	goto	l3006
  3259   0021BC                     u2130:
  3260   0021BC                     
  3261                           ;ECU_Layer/LCD/Lcd.c: 101:         ret = (Std_ReturnType)0x01;
  3262   0021BC  0E01               	movlw	1
  3263   0021BE  6E17               	movwf	lcd_4bits_send_string@ret^0,c
  3264                           
  3265                           ;ECU_Layer/LCD/Lcd.c: 102:     }
  3266   0021C0  EF16  F011         	goto	l3008
  3267   0021C4                     l3002:
  3268                           
  3269                           ;ECU_Layer/LCD/Lcd.c: 105:             ret = lcd_4bits_send_char(lcd , *data++);
  3270   0021C4  C013  F00F         	movff	lcd_4bits_send_string@lcd,lcd_4bits_send_char@lcd
  3271   0021C8  C014  F010         	movff	lcd_4bits_send_string@lcd+1,lcd_4bits_send_char@lcd+1
  3272   0021CC  C015  FFF6         	movff	lcd_4bits_send_string@data,tblptrl
  3273   0021D0  C016  FFF7         	movff	lcd_4bits_send_string@data+1,tblptrh
  3274   0021D4  0E00               	movlw	low (__smallconst shr (0+16))
  3275   0021D6  6EF8               	movwf	tblptru,c
  3276   0021D8  0E0F               	movlw	(high __ramtop+-1)
  3277   0021DA  64F7               	cpfsgt	tblptrh,c
  3278   0021DC  D003               	bra	u2147
  3279   0021DE  0008               	tblrd		*
  3280   0021E0  50F5               	movf	tablat,w,c
  3281   0021E2  D005               	bra	u2140
  3282   0021E4                     u2147:
  3283   0021E4  CFF6 FFE9          	movff	tblptrl,fsr0l
  3284   0021E8  CFF7 FFEA          	movff	tblptrh,fsr0h
  3285   0021EC  50EF               	movf	indf0,w,c
  3286   0021EE                     u2140:
  3287   0021EE  6E11               	movwf	lcd_4bits_send_char@data^0,c
  3288   0021F0  ECD9  F011         	call	_lcd_4bits_send_char	;wreg free
  3289   0021F4  6E17               	movwf	lcd_4bits_send_string@ret^0,c
  3290   0021F6  4A15               	infsnz	lcd_4bits_send_string@data^0,f,c
  3291   0021F8  2A16               	incf	(lcd_4bits_send_string@data+1)^0,f,c
  3292   0021FA                     l3006:
  3293                           
  3294                           ;ECU_Layer/LCD/Lcd.c: 104:         while(*data){
  3295   0021FA  C015  FFF6         	movff	lcd_4bits_send_string@data,tblptrl
  3296   0021FE  C016  FFF7         	movff	lcd_4bits_send_string@data+1,tblptrh
  3297   002202  0E00               	movlw	low (__smallconst shr (0+16))
  3298   002204  6EF8               	movwf	tblptru,c
  3299   002206  0E0F               	movlw	(high __ramtop+-1)
  3300   002208  64F7               	cpfsgt	tblptrh,c
  3301   00220A  D003               	bra	u2157
  3302   00220C  0008               	tblrd		*
  3303   00220E  50F5               	movf	tablat,w,c
  3304   002210  D005               	bra	u2150
  3305   002212                     u2157:
  3306   002212  CFF6 FFE9          	movff	tblptrl,fsr0l
  3307   002216  CFF7 FFEA          	movff	tblptrh,fsr0h
  3308   00221A  50EF               	movf	indf0,w,c
  3309   00221C                     u2150:
  3310   00221C  0900               	iorlw	0
  3311   00221E  A4D8               	btfss	status,2,c
  3312   002220  EF14  F011         	goto	u2161
  3313   002224  EF16  F011         	goto	u2160
  3314   002228                     u2161:
  3315   002228  EFE2  F010         	goto	l3002
  3316   00222C                     u2160:
  3317   00222C                     l3008:
  3318                           
  3319                           ;ECU_Layer/LCD/Lcd.c: 108:     return ret;
  3320   00222C  5017               	movf	lcd_4bits_send_string@ret^0,w,c
  3321   00222E  0012               	return		;funcret
  3322   002230                     __end_of_lcd_4bits_send_string:
  3323                           	callstack 0
  3324                           
  3325 ;; *************** function _keypad_read_value *****************
  3326 ;; Defined at:
  3327 ;;		line 43 in file "ECU_Layer/KEYPAD/KeyPad.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;  key_pad         2   13[COMRAM] PTR struct .
  3330 ;;		 -> keypad_1(8), 
  3331 ;;  value           2   15[COMRAM] PTR unsigned char 
  3332 ;;		 -> num_2_read@temp_value(1), num_1_read@temp_value(1), 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  columns_coun    1   22[COMRAM] unsigned char 
  3335 ;;  rows_counter    1   21[COMRAM] unsigned char 
  3336 ;;  temp_value      1   20[COMRAM] unsigned char 
  3337 ;;  ret             1   19[COMRAM] unsigned char 
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  1    wreg      unsigned char 
  3340 ;; Registers used:
  3341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3347 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;Total ram usage:       10 bytes
  3352 ;; Hardware stack levels used: 1
  3353 ;; Hardware stack levels required when called: 2
  3354 ;; This function calls:
  3355 ;;		_gpio_pin_read_logic
  3356 ;;		_gpio_pin_write_logic
  3357 ;;		_turnoff_all_rows
  3358 ;; This function is called by:
  3359 ;;		_num_1_read
  3360 ;;		_num_2_read
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           	psect	text18
  3365   001D34                     __ptext18:
  3366                           	callstack 0
  3367   001D34                     _keypad_read_value:
  3368                           	callstack 26
  3369   001D34                     
  3370                           ;ECU_Layer/KEYPAD/KeyPad.c: 46:     uint8 rows_counter = 0;
  3371   001D34  0E00               	movlw	0
  3372   001D36  6E16               	movwf	keypad_read_value@rows_counter^0,c
  3373                           
  3374                           ;ECU_Layer/KEYPAD/KeyPad.c: 47:     uint8 columns_counter = 0;
  3375   001D38  0E00               	movlw	0
  3376   001D3A  6E17               	movwf	keypad_read_value@columns_counter^0,c
  3377                           
  3378                           ;ECU_Layer/KEYPAD/KeyPad.c: 48:     uint8 temp_value = 0;
  3379   001D3C  0E00               	movlw	0
  3380   001D3E  6E15               	movwf	keypad_read_value@temp_value^0,c
  3381   001D40                     
  3382                           ;ECU_Layer/KEYPAD/KeyPad.c: 50:     if(key_pad == ((void*)0)){
  3383   001D40  500E               	movf	keypad_read_value@key_pad^0,w,c
  3384   001D42  100F               	iorwf	(keypad_read_value@key_pad+1)^0,w,c
  3385   001D44  A4D8               	btfss	status,2,c
  3386   001D46  EFA7  F00E         	goto	u2261
  3387   001D4A  EFA9  F00E         	goto	u2260
  3388   001D4E                     u2261:
  3389   001D4E  EFAD  F00E         	goto	l3068
  3390   001D52                     u2260:
  3391   001D52                     
  3392                           ;ECU_Layer/KEYPAD/KeyPad.c: 51:         ret = (Std_ReturnType)0x01;
  3393   001D52  0E01               	movlw	1
  3394   001D54  6E14               	movwf	keypad_read_value@ret^0,c
  3395                           
  3396                           ;ECU_Layer/KEYPAD/KeyPad.c: 52:     }
  3397   001D56  EF0F  F00F         	goto	l3098
  3398   001D5A                     l3068:
  3399                           
  3400                           ;ECU_Layer/KEYPAD/KeyPad.c: 55:         for(rows_counter=0; rows_counter<4; rows_counter
      +                          ++){
  3401   001D5A  0E00               	movlw	0
  3402   001D5C  6E16               	movwf	keypad_read_value@rows_counter^0,c
  3403   001D5E                     l3074:
  3404                           
  3405                           ;ECU_Layer/KEYPAD/KeyPad.c: 57:             ret = turnoff_all_rows(key_pad);
  3406   001D5E  C00E  F00A         	movff	keypad_read_value@key_pad,turnoff_all_rows@key_pad
  3407   001D62  C00F  F00B         	movff	keypad_read_value@key_pad+1,turnoff_all_rows@key_pad+1
  3408   001D66  EC06  F013         	call	_turnoff_all_rows	;wreg free
  3409   001D6A  6E14               	movwf	keypad_read_value@ret^0,c
  3410                           
  3411                           ;ECU_Layer/KEYPAD/KeyPad.c: 59:             ret = gpio_pin_write_logic(&(key_pad->rows[r
      +                          ows_counter]) , GPIO_HIGH);
  3412   001D6C  5016               	movf	keypad_read_value@rows_counter^0,w,c
  3413   001D6E  240E               	addwf	keypad_read_value@key_pad^0,w,c
  3414   001D70  6E01               	movwf	gpio_pin_write_logic@str^0,c
  3415   001D72  0E00               	movlw	0
  3416   001D74  200F               	addwfc	(keypad_read_value@key_pad+1)^0,w,c
  3417   001D76  6E02               	movwf	(gpio_pin_write_logic@str+1)^0,c
  3418   001D78  0E01               	movlw	1
  3419   001D7A  6E03               	movwf	gpio_pin_write_logic@LOG^0,c
  3420   001D7C  EC7B  F00D         	call	_gpio_pin_write_logic	;wreg free
  3421   001D80  6E14               	movwf	keypad_read_value@ret^0,c
  3422   001D82                     
  3423                           ;ECU_Layer/KEYPAD/KeyPad.c: 60:             _delay((unsigned long)((10)*(8000000U/4000.0
      +                          )));
  3424   001D82  0E1A               	movlw	26
  3425   001D84  6E12               	movwf	??_keypad_read_value^0,c
  3426   001D86  0EF8               	movlw	248
  3427   001D88                     u3387:
  3428   001D88  2EE8               	decfsz	wreg,f,c
  3429   001D8A  D7FE               	bra	u3387
  3430   001D8C  2E12               	decfsz	??_keypad_read_value^0,f,c
  3431   001D8E  D7FC               	bra	u3387
  3432   001D90  D000               	nop2	
  3433   001D92                     
  3434                           ;ECU_Layer/KEYPAD/KeyPad.c: 62:             for(columns_counter=0; columns_counter<4; co
      +                          lumns_counter++){
  3435   001D92  0E00               	movlw	0
  3436   001D94  6E17               	movwf	keypad_read_value@columns_counter^0,c
  3437   001D96                     l3084:
  3438                           
  3439                           ;ECU_Layer/KEYPAD/KeyPad.c: 63:                 ret = gpio_pin_read_logic(&(key_pad->col
      +                          umns[columns_counter]) , &temp_value);
  3440   001D96  5017               	movf	keypad_read_value@columns_counter^0,w,c
  3441   001D98  240E               	addwf	keypad_read_value@key_pad^0,w,c
  3442   001D9A  6E12               	movwf	??_keypad_read_value^0,c
  3443   001D9C  0E00               	movlw	0
  3444   001D9E  200F               	addwfc	(keypad_read_value@key_pad+1)^0,w,c
  3445   001DA0  6E13               	movwf	(??_keypad_read_value+1)^0,c
  3446   001DA2  0E04               	movlw	4
  3447   001DA4  2412               	addwf	??_keypad_read_value^0,w,c
  3448   001DA6  6E01               	movwf	gpio_pin_read_logic@str^0,c
  3449   001DA8  0E00               	movlw	0
  3450   001DAA  2013               	addwfc	(??_keypad_read_value+1)^0,w,c
  3451   001DAC  6E02               	movwf	(gpio_pin_read_logic@str+1)^0,c
  3452   001DAE  0E15               	movlw	low keypad_read_value@temp_value
  3453   001DB0  6E03               	movwf	gpio_pin_read_logic@LOG^0,c
  3454   001DB2  0E00               	movlw	high keypad_read_value@temp_value
  3455   001DB4  6E04               	movwf	(gpio_pin_read_logic@LOG+1)^0,c
  3456   001DB6  EC86  F010         	call	_gpio_pin_read_logic	;wreg free
  3457   001DBA  6E14               	movwf	keypad_read_value@ret^0,c
  3458   001DBC                     
  3459                           ;ECU_Layer/KEYPAD/KeyPad.c: 65:                 if (GPIO_HIGH == temp_value){
  3460   001DBC  0415               	decf	keypad_read_value@temp_value^0,w,c
  3461   001DBE  A4D8               	btfss	status,2,c
  3462   001DC0  EFE4  F00E         	goto	u2271
  3463   001DC4  EFE6  F00E         	goto	u2270
  3464   001DC8                     u2271:
  3465   001DC8  EFFD  F00E         	goto	l3090
  3466   001DCC                     u2270:
  3467   001DCC                     
  3468                           ;ECU_Layer/KEYPAD/KeyPad.c: 66:                     *value = btn_values[rows_counter][co
      +                          lumns_counter];
  3469   001DCC  5016               	movf	keypad_read_value@rows_counter^0,w,c
  3470   001DCE  0D04               	mullw	4
  3471   001DD0  0E01               	movlw	low _btn_values
  3472   001DD2  24F3               	addwf	243,w,c
  3473   001DD4  6E12               	movwf	??_keypad_read_value^0,c
  3474   001DD6  0E10               	movlw	high _btn_values
  3475   001DD8  20F4               	addwfc	prodh,w,c
  3476   001DDA  6E13               	movwf	(??_keypad_read_value+1)^0,c
  3477   001DDC  5017               	movf	keypad_read_value@columns_counter^0,w,c
  3478   001DDE  2612               	addwf	??_keypad_read_value^0,f,c
  3479   001DE0  0E00               	movlw	0
  3480   001DE2  2213               	addwfc	(??_keypad_read_value+1)^0,f,c
  3481   001DE4  C012  FFF6         	movff	??_keypad_read_value,tblptrl
  3482   001DE8  C013  FFF7         	movff	??_keypad_read_value+1,tblptrh
  3483   001DEC                     	if	0	;tblptru may be non-zero
  3484   001DEC                     	endif
  3485   001DEC                     	if	0	;tblptru may be non-zero
  3486   001DEC                     	endif
  3487   001DEC  C010  FFD9         	movff	keypad_read_value@value,fsr2l
  3488   001DF0  C011  FFDA         	movff	keypad_read_value@value+1,fsr2h
  3489   001DF4  0008               	tblrd		*
  3490   001DF6  CFF5 FFDF          	movff	tablat,indf2
  3491   001DFA                     l3090:
  3492                           
  3493                           ;ECU_Layer/KEYPAD/KeyPad.c: 72:             }
  3494   001DFA  2A17               	incf	keypad_read_value@columns_counter^0,f,c
  3495   001DFC  0E03               	movlw	3
  3496   001DFE  6417               	cpfsgt	keypad_read_value@columns_counter^0,c
  3497   001E00  EF04  F00F         	goto	u2281
  3498   001E04  EF06  F00F         	goto	u2280
  3499   001E08                     u2281:
  3500   001E08  EFCB  F00E         	goto	l3084
  3501   001E0C                     u2280:
  3502   001E0C                     
  3503                           ;ECU_Layer/KEYPAD/KeyPad.c: 74:         }
  3504   001E0C  2A16               	incf	keypad_read_value@rows_counter^0,f,c
  3505   001E0E  0E03               	movlw	3
  3506   001E10  6416               	cpfsgt	keypad_read_value@rows_counter^0,c
  3507   001E12  EF0D  F00F         	goto	u2291
  3508   001E16  EF0F  F00F         	goto	u2290
  3509   001E1A                     u2291:
  3510   001E1A  EFAF  F00E         	goto	l3074
  3511   001E1E                     u2290:
  3512   001E1E                     l3098:
  3513                           
  3514                           ;ECU_Layer/KEYPAD/KeyPad.c: 78:     return ret;
  3515   001E1E  5014               	movf	keypad_read_value@ret^0,w,c
  3516   001E20  0012               	return		;funcret
  3517   001E22                     __end_of_keypad_read_value:
  3518                           	callstack 0
  3519                           
  3520 ;; *************** function _turnoff_all_rows *****************
  3521 ;; Defined at:
  3522 ;;		line 81 in file "ECU_Layer/KEYPAD/KeyPad.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;  key_pad         2    9[COMRAM] PTR struct .
  3525 ;;		 -> keypad_1(8), 
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;  rows_counter    1   12[COMRAM] unsigned char 
  3528 ;;  ret             1   11[COMRAM] unsigned char 
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      unsigned char 
  3531 ;; Registers used:
  3532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3538 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3539 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;Total ram usage:        4 bytes
  3543 ;; Hardware stack levels used: 1
  3544 ;; Hardware stack levels required when called: 1
  3545 ;; This function calls:
  3546 ;;		_gpio_pin_write_logic
  3547 ;; This function is called by:
  3548 ;;		_keypad_read_value
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           	psect	text19
  3553   00260C                     __ptext19:
  3554                           	callstack 0
  3555   00260C                     _turnoff_all_rows:
  3556                           	callstack 26
  3557   00260C                     
  3558                           ;ECU_Layer/KEYPAD/KeyPad.c: 85:     uint8 rows_counter = 0;
  3559   00260C  0E00               	movlw	0
  3560   00260E  6E0D               	movwf	turnoff_all_rows@rows_counter^0,c
  3561   002610                     
  3562                           ;ECU_Layer/KEYPAD/KeyPad.c: 87:     if(key_pad == ((void*)0)){
  3563   002610  500A               	movf	turnoff_all_rows@key_pad^0,w,c
  3564   002612  100B               	iorwf	(turnoff_all_rows@key_pad+1)^0,w,c
  3565   002614  A4D8               	btfss	status,2,c
  3566   002616  EF0F  F013         	goto	u2101
  3567   00261A  EF11  F013         	goto	u2100
  3568   00261E                     u2101:
  3569   00261E  EF15  F013         	goto	l2956
  3570   002622                     u2100:
  3571   002622                     
  3572                           ;ECU_Layer/KEYPAD/KeyPad.c: 88:         ret = (Std_ReturnType)0x01;
  3573   002622  0E01               	movlw	1
  3574   002624  6E0C               	movwf	turnoff_all_rows@ret^0,c
  3575                           
  3576                           ;ECU_Layer/KEYPAD/KeyPad.c: 89:     }
  3577   002626  EF2B  F013         	goto	l2968
  3578   00262A                     l2956:
  3579                           
  3580                           ;ECU_Layer/KEYPAD/KeyPad.c: 92:         for(rows_counter=0; rows_counter<4; rows_counter
      +                          ++){
  3581   00262A  0E00               	movlw	0
  3582   00262C  6E0D               	movwf	turnoff_all_rows@rows_counter^0,c
  3583   00262E                     l2962:
  3584                           
  3585                           ;ECU_Layer/KEYPAD/KeyPad.c: 93:             ret = gpio_pin_write_logic(&(key_pad->rows[r
      +                          ows_counter]) , GPIO_LOW);
  3586   00262E  500D               	movf	turnoff_all_rows@rows_counter^0,w,c
  3587   002630  240A               	addwf	turnoff_all_rows@key_pad^0,w,c
  3588   002632  6E01               	movwf	gpio_pin_write_logic@str^0,c
  3589   002634  0E00               	movlw	0
  3590   002636  200B               	addwfc	(turnoff_all_rows@key_pad+1)^0,w,c
  3591   002638  6E02               	movwf	(gpio_pin_write_logic@str+1)^0,c
  3592   00263A  0E00               	movlw	0
  3593   00263C  6E03               	movwf	gpio_pin_write_logic@LOG^0,c
  3594   00263E  EC7B  F00D         	call	_gpio_pin_write_logic	;wreg free
  3595   002642  6E0C               	movwf	turnoff_all_rows@ret^0,c
  3596   002644                     
  3597                           ;ECU_Layer/KEYPAD/KeyPad.c: 94:         }
  3598   002644  2A0D               	incf	turnoff_all_rows@rows_counter^0,f,c
  3599   002646  0E03               	movlw	3
  3600   002648  640D               	cpfsgt	turnoff_all_rows@rows_counter^0,c
  3601   00264A  EF29  F013         	goto	u2111
  3602   00264E  EF2B  F013         	goto	u2110
  3603   002652                     u2111:
  3604   002652  EF17  F013         	goto	l2962
  3605   002656                     u2110:
  3606   002656                     l2968:
  3607                           
  3608                           ;ECU_Layer/KEYPAD/KeyPad.c: 97:     return ret;
  3609   002656  500C               	movf	turnoff_all_rows@ret^0,w,c
  3610   002658  0012               	return		;funcret
  3611   00265A                     __end_of_turnoff_all_rows:
  3612                           	callstack 0
  3613                           
  3614 ;; *************** function _gpio_pin_read_logic *****************
  3615 ;; Defined at:
  3616 ;;		line 82 in file "MCAL_Layer/GPIO/hal_gpio.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;  str             2    0[COMRAM] PTR const struct .
  3619 ;;		 -> keypad_1.columns(4), keypad_1(8), 
  3620 ;;  LOG             2    2[COMRAM] PTR enum E2989
  3621 ;;		 -> keypad_read_value@temp_value(1), button_read@PIN_STATUS(1), 
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;  ret             1    0        unsigned char 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  1    wreg      unsigned char 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3635 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3636 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3637 ;;Total ram usage:        9 bytes
  3638 ;; Hardware stack levels used: 1
  3639 ;; This function calls:
  3640 ;;		Nothing
  3641 ;; This function is called by:
  3642 ;;		_keypad_read_value
  3643 ;;		_button_read
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           	psect	text20
  3648   00210C                     __ptext20:
  3649                           	callstack 0
  3650   00210C                     _gpio_pin_read_logic:
  3651                           	callstack 27
  3652   00210C                     
  3653                           ;MCAL_Layer/GPIO/hal_gpio.c: 84:     if(str == ((void*)0) || (str->PIN > 7)){
  3654   00210C  5001               	movf	gpio_pin_read_logic@str^0,w,c
  3655   00210E  1002               	iorwf	(gpio_pin_read_logic@str+1)^0,w,c
  3656   002110  B4D8               	btfsc	status,2,c
  3657   002112  EF8D  F010         	goto	u2071
  3658   002116  EF8F  F010         	goto	u2070
  3659   00211A                     u2071:
  3660   00211A  EF9E  F010         	goto	l2942
  3661   00211E                     u2070:
  3662   00211E  C001  FFD9         	movff	gpio_pin_read_logic@str,fsr2l
  3663   002122  C002  FFDA         	movff	gpio_pin_read_logic@str+1,fsr2h
  3664   002126  50DF               	movf	223,w,c
  3665   002128  0B07               	andlw	7
  3666   00212A  6E05               	movwf	??_gpio_pin_read_logic^0,c
  3667   00212C  0E07               	movlw	7
  3668   00212E  6405               	cpfsgt	??_gpio_pin_read_logic^0,c
  3669   002130  EF9C  F010         	goto	u2081
  3670   002134  EF9E  F010         	goto	u2080
  3671   002138                     u2081:
  3672   002138  EFA0  F010         	goto	l2944
  3673   00213C                     u2080:
  3674   00213C                     l2942:
  3675                           
  3676                           ;MCAL_Layer/GPIO/hal_gpio.c: 86:     }
  3677   00213C  EFD1  F010         	goto	l2946
  3678   002140                     l2944:
  3679                           
  3680                           ;MCAL_Layer/GPIO/hal_gpio.c: 88:         *LOG = ((*PORT_REG[str->PORT] >> str->PIN) & 0x
      +                          01);
  3681   002140  C001  FFD9         	movff	gpio_pin_read_logic@str,fsr2l
  3682   002144  C002  FFDA         	movff	gpio_pin_read_logic@str+1,fsr2h
  3683   002148  50DF               	movf	223,w,c
  3684   00214A  0B07               	andlw	7
  3685   00214C  6E05               	movwf	??_gpio_pin_read_logic^0,c
  3686   00214E  C001  FFD9         	movff	gpio_pin_read_logic@str,fsr2l
  3687   002152  C002  FFDA         	movff	gpio_pin_read_logic@str+1,fsr2h
  3688   002156  30DF               	rrcf	223,w,c
  3689   002158  32E8               	rrcf	wreg,f,c
  3690   00215A  32E8               	rrcf	wreg,f,c
  3691   00215C  0B07               	andlw	7
  3692   00215E  6E06               	movwf	(??_gpio_pin_read_logic+1)^0,c
  3693   002160  5006               	movf	(??_gpio_pin_read_logic+1)^0,w,c
  3694   002162  0D02               	mullw	2
  3695   002164  0E80               	movlw	low _PORT_REG
  3696   002166  24F3               	addwf	243,w,c
  3697   002168  6ED9               	movwf	fsr2l,c
  3698   00216A  0E00               	movlw	high _PORT_REG
  3699   00216C  20F4               	addwfc	prodh,w,c
  3700   00216E  6EDA               	movwf	fsr2h,c
  3701   002170  CFDE F007          	movff	postinc2,??_gpio_pin_read_logic+2
  3702   002174  CFDD F008          	movff	postdec2,??_gpio_pin_read_logic+3
  3703   002178  C007  FFD9         	movff	??_gpio_pin_read_logic+2,fsr2l
  3704   00217C  C008  FFDA         	movff	??_gpio_pin_read_logic+3,fsr2h
  3705   002180  50DF               	movf	indf2,w,c
  3706   002182  6E09               	movwf	(??_gpio_pin_read_logic+4)^0,c
  3707   002184  2A05               	incf	??_gpio_pin_read_logic^0,f,c
  3708   002186  EFC7  F010         	goto	u2094
  3709   00218A                     u2095:
  3710   00218A  90D8               	bcf	status,0,c
  3711   00218C  3209               	rrcf	(??_gpio_pin_read_logic+4)^0,f,c
  3712   00218E                     u2094:
  3713   00218E  2E05               	decfsz	??_gpio_pin_read_logic^0,f,c
  3714   002190  EFC5  F010         	goto	u2095
  3715   002194  5009               	movf	(??_gpio_pin_read_logic+4)^0,w,c
  3716   002196  0B01               	andlw	1
  3717   002198  C003  FFD9         	movff	gpio_pin_read_logic@LOG,fsr2l
  3718   00219C  C004  FFDA         	movff	gpio_pin_read_logic@LOG+1,fsr2h
  3719   0021A0  6EDF               	movwf	indf2,c
  3720   0021A2                     l2946:
  3721                           
  3722                           ;MCAL_Layer/GPIO/hal_gpio.c: 90:     return ret;
  3723   0021A2  0E01               	movlw	1
  3724   0021A4  0012               	return		;funcret
  3725   0021A6                     __end_of_gpio_pin_read_logic:
  3726                           	callstack 0
  3727                           
  3728 ;; *************** function _convert_string_to_numbers *****************
  3729 ;; Defined at:
  3730 ;;		line 156 in file "Application.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;  str             2    0[COMRAM] PTR unsigned char 
  3733 ;;		 -> str_2(4), str(4), 
  3734 ;;  value           2    2[COMRAM] PTR unsigned char 
  3735 ;;		 -> value_2(1), value_1(1), 
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;  counter         1    8[COMRAM] unsigned char 
  3738 ;;  temp_3          1    7[COMRAM] unsigned char 
  3739 ;;  temp_2          1    6[COMRAM] unsigned char 
  3740 ;;  temp_1          1    5[COMRAM] unsigned char 
  3741 ;;  ret             1    4[COMRAM] unsigned char 
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  1    wreg      unsigned char 
  3744 ;; Registers used:
  3745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3751 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3754 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;Total ram usage:        9 bytes
  3756 ;; Hardware stack levels used: 1
  3757 ;; This function calls:
  3758 ;;		Nothing
  3759 ;; This function is called by:
  3760 ;;		_main
  3761 ;;		_num_1_read
  3762 ;; This function uses a non-reentrant model
  3763 ;;
  3764                           
  3765                           	psect	text21
  3766   001646                     __ptext21:
  3767                           	callstack 0
  3768   001646                     _convert_string_to_numbers:
  3769                           	callstack 29
  3770   001646                     
  3771                           ;Application.c: 157:     Std_ReturnType ret = (Std_ReturnType)0x01;
  3772   001646  0E01               	movlw	1
  3773   001648  6E05               	movwf	convert_string_to_numbers@ret^0,c
  3774                           
  3775                           ;Application.c: 158:     uint8 counter = 0;
  3776   00164A  0E00               	movlw	0
  3777   00164C  6E09               	movwf	convert_string_to_numbers@counter^0,c
  3778                           
  3779                           ;Application.c: 159:     uint8 temp_1 = 0;
  3780   00164E  0E00               	movlw	0
  3781   001650  6E06               	movwf	convert_string_to_numbers@temp_1^0,c
  3782                           
  3783                           ;Application.c: 160:     uint8 temp_2 = 0;
  3784   001652  0E00               	movlw	0
  3785   001654  6E07               	movwf	convert_string_to_numbers@temp_2^0,c
  3786                           
  3787                           ;Application.c: 161:     uint8 temp_3 = 0;
  3788   001656  0E00               	movlw	0
  3789   001658  6E08               	movwf	convert_string_to_numbers@temp_3^0,c
  3790                           
  3791                           ;Application.c: 162:     for(counter=0; counter<3; counter++){
  3792   00165A  0E00               	movlw	0
  3793   00165C  6E09               	movwf	convert_string_to_numbers@counter^0,c
  3794   00165E                     l3178:
  3795                           
  3796                           ;Application.c: 163:         if(0 == str[2]){
  3797   00165E  EE20 F002          	lfsr	2,2
  3798   001662  5001               	movf	convert_string_to_numbers@str^0,w,c
  3799   001664  26D9               	addwf	fsr2l,f,c
  3800   001666  5002               	movf	(convert_string_to_numbers@str+1)^0,w,c
  3801   001668  22DA               	addwfc	fsr2h,f,c
  3802   00166A  50DF               	movf	indf2,w,c
  3803   00166C  A4D8               	btfss	status,2,c
  3804   00166E  EF3B  F00B         	goto	u2391
  3805   001672  EF3D  F00B         	goto	u2390
  3806   001676                     u2391:
  3807   001676  EF75  F00B         	goto	l3192
  3808   00167A                     u2390:
  3809   00167A                     
  3810                           ;Application.c: 164:             if(0 == str[1]){
  3811   00167A  EE20 F001          	lfsr	2,1
  3812   00167E  5001               	movf	convert_string_to_numbers@str^0,w,c
  3813   001680  26D9               	addwf	fsr2l,f,c
  3814   001682  5002               	movf	(convert_string_to_numbers@str+1)^0,w,c
  3815   001684  22DA               	addwfc	fsr2h,f,c
  3816   001686  50DF               	movf	indf2,w,c
  3817   001688  A4D8               	btfss	status,2,c
  3818   00168A  EF49  F00B         	goto	u2401
  3819   00168E  EF4B  F00B         	goto	u2400
  3820   001692                     u2401:
  3821   001692  EF5A  F00B         	goto	l3186
  3822   001696                     u2400:
  3823   001696                     
  3824                           ;Application.c: 165:                 temp_3 = ((str[0] - '0') * 1);
  3825   001696  C001  FFD9         	movff	convert_string_to_numbers@str,fsr2l
  3826   00169A  C002  FFDA         	movff	convert_string_to_numbers@str+1,fsr2h
  3827   00169E  50DF               	movf	indf2,w,c
  3828   0016A0  0FD0               	addlw	208
  3829   0016A2  6E08               	movwf	convert_string_to_numbers@temp_3^0,c
  3830   0016A4                     
  3831                           ;Application.c: 166:                 *value = temp_3;
  3832   0016A4  C003  FFD9         	movff	convert_string_to_numbers@value,fsr2l
  3833   0016A8  C004  FFDA         	movff	convert_string_to_numbers@value+1,fsr2h
  3834   0016AC  C008  FFDF         	movff	convert_string_to_numbers@temp_3,indf2
  3835                           
  3836                           ;Application.c: 167:             }
  3837   0016B0  EFAD  F00B         	goto	l3204
  3838   0016B4                     l3186:
  3839                           
  3840                           ;Application.c: 169:                 temp_2 = ((str[0] - '0') * 10);
  3841   0016B4  C001  FFD9         	movff	convert_string_to_numbers@str,fsr2l
  3842   0016B8  C002  FFDA         	movff	convert_string_to_numbers@str+1,fsr2h
  3843   0016BC  50DF               	movf	indf2,w,c
  3844   0016BE  0FD0               	addlw	208
  3845   0016C0  0D0A               	mullw	10
  3846   0016C2  CFF3 F007          	movff	prodl,convert_string_to_numbers@temp_2
  3847   0016C6                     
  3848                           ;Application.c: 170:                 temp_3 = ((str[1] - '0') * 1);
  3849   0016C6  EE20 F001          	lfsr	2,1
  3850   0016CA  5001               	movf	convert_string_to_numbers@str^0,w,c
  3851   0016CC  26D9               	addwf	fsr2l,f,c
  3852   0016CE  5002               	movf	(convert_string_to_numbers@str+1)^0,w,c
  3853   0016D0  22DA               	addwfc	fsr2h,f,c
  3854   0016D2  50DF               	movf	indf2,w,c
  3855   0016D4  0FD0               	addlw	208
  3856   0016D6  6E08               	movwf	convert_string_to_numbers@temp_3^0,c
  3857   0016D8                     
  3858                           ;Application.c: 171:                 *value = (temp_2 + temp_3);
  3859   0016D8  5007               	movf	convert_string_to_numbers@temp_2^0,w,c
  3860   0016DA  2408               	addwf	convert_string_to_numbers@temp_3^0,w,c
  3861   0016DC  C003  FFD9         	movff	convert_string_to_numbers@value,fsr2l
  3862   0016E0  C004  FFDA         	movff	convert_string_to_numbers@value+1,fsr2h
  3863   0016E4  6EDF               	movwf	indf2,c
  3864   0016E6  EFAD  F00B         	goto	l3204
  3865   0016EA                     l3192:
  3866                           
  3867                           ;Application.c: 176:         if(0 == counter){
  3868   0016EA  5009               	movf	convert_string_to_numbers@counter^0,w,c
  3869   0016EC  A4D8               	btfss	status,2,c
  3870   0016EE  EF7B  F00B         	goto	u2411
  3871   0016F2  EF7D  F00B         	goto	u2410
  3872   0016F6                     u2411:
  3873   0016F6  EF88  F00B         	goto	l3196
  3874   0016FA                     u2410:
  3875   0016FA                     
  3876                           ;Application.c: 177:             temp_1 = ((str[counter] - '0') * 100);
  3877   0016FA  5009               	movf	convert_string_to_numbers@counter^0,w,c
  3878   0016FC  2401               	addwf	convert_string_to_numbers@str^0,w,c
  3879   0016FE  6ED9               	movwf	fsr2l,c
  3880   001700  0E00               	movlw	0
  3881   001702  2002               	addwfc	(convert_string_to_numbers@str+1)^0,w,c
  3882   001704  6EDA               	movwf	fsr2h,c
  3883   001706  50DF               	movf	indf2,w,c
  3884   001708  0FD0               	addlw	208
  3885   00170A  0D64               	mullw	100
  3886   00170C  CFF3 F006          	movff	prodl,convert_string_to_numbers@temp_1
  3887   001710                     l3196:
  3888                           
  3889                           ;Application.c: 179:         if(1 == counter){
  3890   001710  0409               	decf	convert_string_to_numbers@counter^0,w,c
  3891   001712  A4D8               	btfss	status,2,c
  3892   001714  EF8E  F00B         	goto	u2421
  3893   001718  EF90  F00B         	goto	u2420
  3894   00171C                     u2421:
  3895   00171C  EF9B  F00B         	goto	l3200
  3896   001720                     u2420:
  3897   001720                     
  3898                           ;Application.c: 180:             temp_2 = ((str[counter] - '0') * 10);
  3899   001720  5009               	movf	convert_string_to_numbers@counter^0,w,c
  3900   001722  2401               	addwf	convert_string_to_numbers@str^0,w,c
  3901   001724  6ED9               	movwf	fsr2l,c
  3902   001726  0E00               	movlw	0
  3903   001728  2002               	addwfc	(convert_string_to_numbers@str+1)^0,w,c
  3904   00172A  6EDA               	movwf	fsr2h,c
  3905   00172C  50DF               	movf	indf2,w,c
  3906   00172E  0FD0               	addlw	208
  3907   001730  0D0A               	mullw	10
  3908   001732  CFF3 F007          	movff	prodl,convert_string_to_numbers@temp_2
  3909   001736                     l3200:
  3910                           
  3911                           ;Application.c: 182:         if(2 == counter){
  3912   001736  0E02               	movlw	2
  3913   001738  1809               	xorwf	convert_string_to_numbers@counter^0,w,c
  3914   00173A  A4D8               	btfss	status,2,c
  3915   00173C  EFA2  F00B         	goto	u2431
  3916   001740  EFA4  F00B         	goto	u2430
  3917   001744                     u2431:
  3918   001744  EFAD  F00B         	goto	l3204
  3919   001748                     u2430:
  3920   001748                     
  3921                           ;Application.c: 183:             temp_3 = ((str[counter] - '0') * 1);
  3922   001748  5009               	movf	convert_string_to_numbers@counter^0,w,c
  3923   00174A  2401               	addwf	convert_string_to_numbers@str^0,w,c
  3924   00174C  6ED9               	movwf	fsr2l,c
  3925   00174E  0E00               	movlw	0
  3926   001750  2002               	addwfc	(convert_string_to_numbers@str+1)^0,w,c
  3927   001752  6EDA               	movwf	fsr2h,c
  3928   001754  50DF               	movf	indf2,w,c
  3929   001756  0FD0               	addlw	208
  3930   001758  6E08               	movwf	convert_string_to_numbers@temp_3^0,c
  3931   00175A                     l3204:
  3932                           
  3933                           ;Application.c: 186:     }
  3934   00175A  2A09               	incf	convert_string_to_numbers@counter^0,f,c
  3935   00175C  0E02               	movlw	2
  3936   00175E  6409               	cpfsgt	convert_string_to_numbers@counter^0,c
  3937   001760  EFB4  F00B         	goto	u2441
  3938   001764  EFB6  F00B         	goto	u2440
  3939   001768                     u2441:
  3940   001768  EF2F  F00B         	goto	l3178
  3941   00176C                     u2440:
  3942   00176C                     
  3943                           ;Application.c: 187:     *value = (temp_1 + temp_2 + temp_3);
  3944   00176C  5006               	movf	convert_string_to_numbers@temp_1^0,w,c
  3945   00176E  2407               	addwf	convert_string_to_numbers@temp_2^0,w,c
  3946   001770  2408               	addwf	convert_string_to_numbers@temp_3^0,w,c
  3947   001772  C003  FFD9         	movff	convert_string_to_numbers@value,fsr2l
  3948   001776  C004  FFDA         	movff	convert_string_to_numbers@value+1,fsr2h
  3949   00177A  6EDF               	movwf	indf2,c
  3950   00177C                     
  3951                           ;Application.c: 189:     return ret;
  3952   00177C  5005               	movf	convert_string_to_numbers@ret^0,w,c
  3953   00177E  0012               	return		;funcret
  3954   001780                     __end_of_convert_string_to_numbers:
  3955                           	callstack 0
  3956                           
  3957 ;; *************** function _lcd_4bits_send_char_pos *****************
  3958 ;; Defined at:
  3959 ;;		line 83 in file "ECU_Layer/LCD/Lcd.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;  lcd             2   24[COMRAM] PTR const struct .
  3962 ;;		 -> lcd_1(6), 
  3963 ;;  data            1   26[COMRAM] unsigned char 
  3964 ;;  ROW             1   27[COMRAM] unsigned char 
  3965 ;;  COLUMN          1   28[COMRAM] unsigned char 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;  ret             1   29[COMRAM] unsigned char 
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  1    wreg      unsigned char 
  3970 ;; Registers used:
  3971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3972 ;; Tracked objects:
  3973 ;;		On entry : 0/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3977 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;Total ram usage:        6 bytes
  3982 ;; Hardware stack levels used: 1
  3983 ;; Hardware stack levels required when called: 4
  3984 ;; This function calls:
  3985 ;;		_lcd_4bits_send_char
  3986 ;;		_lcd_4bits_set_cursor
  3987 ;; This function is called by:
  3988 ;;		_main
  3989 ;;		_lcd_4bits_send_custom_char
  3990 ;; This function uses a non-reentrant model
  3991 ;;
  3992                           
  3993                           	psect	text22
  3994   0026EE                     __ptext22:
  3995                           	callstack 0
  3996   0026EE                     _lcd_4bits_send_char_pos:
  3997                           	callstack 26
  3998   0026EE                     
  3999                           ;ECU_Layer/LCD/Lcd.c: 87:     if(lcd == ((void*)0)){
  4000   0026EE  5019               	movf	lcd_4bits_send_char_pos@lcd^0,w,c
  4001   0026F0  101A               	iorwf	(lcd_4bits_send_char_pos@lcd+1)^0,w,c
  4002   0026F2  A4D8               	btfss	status,2,c
  4003   0026F4  EF7E  F013         	goto	u2691
  4004   0026F8  EF80  F013         	goto	u2690
  4005   0026FC                     u2691:
  4006   0026FC  EF84  F013         	goto	l3464
  4007   002700                     u2690:
  4008   002700                     
  4009                           ;ECU_Layer/LCD/Lcd.c: 88:         ret = (Std_ReturnType)0x01;
  4010   002700  0E01               	movlw	1
  4011   002702  6E1E               	movwf	lcd_4bits_send_char_pos@ret^0,c
  4012                           
  4013                           ;ECU_Layer/LCD/Lcd.c: 89:     }
  4014   002704  EF98  F013         	goto	l3466
  4015   002708                     l3464:
  4016                           
  4017                           ;ECU_Layer/LCD/Lcd.c: 91:         ret = lcd_4bits_set_cursor(lcd , ROW , COLUMN);
  4018   002708  C019  F013         	movff	lcd_4bits_send_char_pos@lcd,lcd_4bits_set_cursor@lcd
  4019   00270C  C01A  F014         	movff	lcd_4bits_send_char_pos@lcd+1,lcd_4bits_set_cursor@lcd+1
  4020   002710  C01C  F015         	movff	lcd_4bits_send_char_pos@ROW,lcd_4bits_set_cursor@ROW
  4021   002714  C01D  F016         	movff	lcd_4bits_send_char_pos@COLUMN,lcd_4bits_set_cursor@COLUMN
  4022   002718  EC30  F010         	call	_lcd_4bits_set_cursor	;wreg free
  4023   00271C  6E1E               	movwf	lcd_4bits_send_char_pos@ret^0,c
  4024                           
  4025                           ;ECU_Layer/LCD/Lcd.c: 92:         ret = lcd_4bits_send_char(lcd , data);
  4026   00271E  C019  F00F         	movff	lcd_4bits_send_char_pos@lcd,lcd_4bits_send_char@lcd
  4027   002722  C01A  F010         	movff	lcd_4bits_send_char_pos@lcd+1,lcd_4bits_send_char@lcd+1
  4028   002726  C01B  F011         	movff	lcd_4bits_send_char_pos@data,lcd_4bits_send_char@data
  4029   00272A  ECD9  F011         	call	_lcd_4bits_send_char	;wreg free
  4030   00272E  6E1E               	movwf	lcd_4bits_send_char_pos@ret^0,c
  4031   002730                     l3466:
  4032                           
  4033                           ;ECU_Layer/LCD/Lcd.c: 94:     return ret;
  4034   002730  501E               	movf	lcd_4bits_send_char_pos@ret^0,w,c
  4035   002732  0012               	return		;funcret
  4036   002734                     __end_of_lcd_4bits_send_char_pos:
  4037                           	callstack 0
  4038                           
  4039 ;; *************** function _lcd_4bits_set_cursor *****************
  4040 ;; Defined at:
  4041 ;;		line 144 in file "ECU_Layer/LCD/Lcd.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;  lcd             2   18[COMRAM] PTR const struct .
  4044 ;;		 -> lcd_1(6), 
  4045 ;;  ROW             1   20[COMRAM] unsigned char 
  4046 ;;  COLUMN          1   21[COMRAM] unsigned char 
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;  ret             1    0        unsigned char 
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  1    wreg      unsigned char 
  4051 ;; Registers used:
  4052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4058 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;Total ram usage:        6 bytes
  4063 ;; Hardware stack levels used: 1
  4064 ;; Hardware stack levels required when called: 3
  4065 ;; This function calls:
  4066 ;;		_lcd_4bits_send_command
  4067 ;; This function is called by:
  4068 ;;		_lcd_4bits_send_char_pos
  4069 ;;		_lcd_4bits_send_string_pos
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text23
  4074   002060                     __ptext23:
  4075                           	callstack 0
  4076   002060                     _lcd_4bits_set_cursor:
  4077                           	callstack 24
  4078   002060                     
  4079                           ;ECU_Layer/LCD/Lcd.c: 148:     if(lcd == ((void*)0)){
  4080   002060  5013               	movf	lcd_4bits_set_cursor@lcd^0,w,c
  4081   002062  1014               	iorwf	(lcd_4bits_set_cursor@lcd+1)^0,w,c
  4082   002064  A4D8               	btfss	status,2,c
  4083   002066  EF37  F010         	goto	u2121
  4084   00206A  EF39  F010         	goto	u2120
  4085   00206E                     u2121:
  4086   00206E  EF67  F010         	goto	l2986
  4087   002072                     u2120:
  4088   002072                     
  4089                           ;ECU_Layer/LCD/Lcd.c: 150:     }
  4090   002072  EF84  F010         	goto	l2988
  4091   002076                     l2978:
  4092   002076  C013  F00F         	movff	lcd_4bits_set_cursor@lcd,lcd_4bits_send_command@lcd
  4093   00207A  C014  F010         	movff	lcd_4bits_set_cursor@lcd+1,lcd_4bits_send_command@lcd+1
  4094   00207E  5016               	movf	lcd_4bits_set_cursor@COLUMN^0,w,c
  4095   002080  0F80               	addlw	128
  4096   002082  6E11               	movwf	lcd_4bits_send_command@command^0,c
  4097   002084  EC14  F012         	call	_lcd_4bits_send_command	;wreg free
  4098   002088  EF84  F010         	goto	l2988
  4099   00208C                     l2980:
  4100   00208C  C013  F00F         	movff	lcd_4bits_set_cursor@lcd,lcd_4bits_send_command@lcd
  4101   002090  C014  F010         	movff	lcd_4bits_set_cursor@lcd+1,lcd_4bits_send_command@lcd+1
  4102   002094  5016               	movf	lcd_4bits_set_cursor@COLUMN^0,w,c
  4103   002096  0FC0               	addlw	192
  4104   002098  6E11               	movwf	lcd_4bits_send_command@command^0,c
  4105   00209A  EC14  F012         	call	_lcd_4bits_send_command	;wreg free
  4106   00209E  EF84  F010         	goto	l2988
  4107   0020A2                     l2982:
  4108   0020A2  C013  F00F         	movff	lcd_4bits_set_cursor@lcd,lcd_4bits_send_command@lcd
  4109   0020A6  C014  F010         	movff	lcd_4bits_set_cursor@lcd+1,lcd_4bits_send_command@lcd+1
  4110   0020AA  5016               	movf	lcd_4bits_set_cursor@COLUMN^0,w,c
  4111   0020AC  0F94               	addlw	148
  4112   0020AE  6E11               	movwf	lcd_4bits_send_command@command^0,c
  4113   0020B0  EC14  F012         	call	_lcd_4bits_send_command	;wreg free
  4114   0020B4  EF84  F010         	goto	l2988
  4115   0020B8                     l2984:
  4116   0020B8  C013  F00F         	movff	lcd_4bits_set_cursor@lcd,lcd_4bits_send_command@lcd
  4117   0020BC  C014  F010         	movff	lcd_4bits_set_cursor@lcd+1,lcd_4bits_send_command@lcd+1
  4118   0020C0  5016               	movf	lcd_4bits_set_cursor@COLUMN^0,w,c
  4119   0020C2  0FD4               	addlw	212
  4120   0020C4  6E11               	movwf	lcd_4bits_send_command@command^0,c
  4121   0020C6  EC14  F012         	call	_lcd_4bits_send_command	;wreg free
  4122   0020CA  EF84  F010         	goto	l2988
  4123   0020CE                     l2986:
  4124   0020CE  5015               	movf	lcd_4bits_set_cursor@ROW^0,w,c
  4125   0020D0  6E17               	movwf	??_lcd_4bits_set_cursor^0,c
  4126   0020D2  6A18               	clrf	(??_lcd_4bits_set_cursor+1)^0,c
  4127                           
  4128                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4129                           ; Switch size 1, requested type "simple"
  4130                           ; Number of cases is 1, Range of values is 0 to 0
  4131                           ; switch strategies available:
  4132                           ; Name         Instructions Cycles
  4133                           ; simple_byte            4     3 (average)
  4134                           ;	Chosen strategy is simple_byte
  4135   0020D4  5018               	movf	(??_lcd_4bits_set_cursor+1)^0,w,c
  4136   0020D6  0A00               	xorlw	0	; case 0
  4137   0020D8  B4D8               	btfsc	status,2,c
  4138   0020DA  EF71  F010         	goto	l4078
  4139   0020DE  EF84  F010         	goto	l2988
  4140   0020E2                     l4078:
  4141                           
  4142                           ; Switch size 1, requested type "simple"
  4143                           ; Number of cases is 4, Range of values is 1 to 4
  4144                           ; switch strategies available:
  4145                           ; Name         Instructions Cycles
  4146                           ; simple_byte           13     7 (average)
  4147                           ;	Chosen strategy is simple_byte
  4148   0020E2  5017               	movf	??_lcd_4bits_set_cursor^0,w,c
  4149   0020E4  0A01               	xorlw	1	; case 1
  4150   0020E6  B4D8               	btfsc	status,2,c
  4151   0020E8  EF3B  F010         	goto	l2978
  4152   0020EC  0A03               	xorlw	3	; case 2
  4153   0020EE  B4D8               	btfsc	status,2,c
  4154   0020F0  EF46  F010         	goto	l2980
  4155   0020F4  0A01               	xorlw	1	; case 3
  4156   0020F6  B4D8               	btfsc	status,2,c
  4157   0020F8  EF51  F010         	goto	l2982
  4158   0020FC  0A07               	xorlw	7	; case 4
  4159   0020FE  B4D8               	btfsc	status,2,c
  4160   002100  EF5C  F010         	goto	l2984
  4161   002104  EF84  F010         	goto	l2988
  4162   002108                     l2988:
  4163                           
  4164                           ;ECU_Layer/LCD/Lcd.c: 160:     return ret;
  4165   002108  0E01               	movlw	1
  4166   00210A  0012               	return		;funcret
  4167   00210C                     __end_of_lcd_4bits_set_cursor:
  4168                           	callstack 0
  4169                           
  4170 ;; *************** function _lcd_4bits_send_char *****************
  4171 ;; Defined at:
  4172 ;;		line 66 in file "ECU_Layer/LCD/Lcd.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;  lcd             2   14[COMRAM] PTR const struct .
  4175 ;;		 -> lcd_1(6), 
  4176 ;;  data            1   16[COMRAM] unsigned char 
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;  ret             1   17[COMRAM] unsigned char 
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  1    wreg      unsigned char 
  4181 ;; Registers used:
  4182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4188 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;Total ram usage:        4 bytes
  4193 ;; Hardware stack levels used: 1
  4194 ;; Hardware stack levels required when called: 2
  4195 ;; This function calls:
  4196 ;;		_enable_pin_4bits
  4197 ;;		_gpio_pin_write_logic
  4198 ;;		_send_4bits
  4199 ;; This function is called by:
  4200 ;;		_num_1_read
  4201 ;;		_num_2_read
  4202 ;;		_lcd_4bits_send_char_pos
  4203 ;;		_lcd_4bits_send_string
  4204 ;;		_lcd_4bits_send_custom_char
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           	psect	text24
  4209   0023B2                     __ptext24:
  4210                           	callstack 0
  4211   0023B2                     _lcd_4bits_send_char:
  4212                           	callstack 24
  4213   0023B2                     
  4214                           ;ECU_Layer/LCD/Lcd.c: 70:     if(lcd == ((void*)0)){
  4215   0023B2  500F               	movf	lcd_4bits_send_char@lcd^0,w,c
  4216   0023B4  1010               	iorwf	(lcd_4bits_send_char@lcd+1)^0,w,c
  4217   0023B6  A4D8               	btfss	status,2,c
  4218   0023B8  EFE0  F011         	goto	u1951
  4219   0023BC  EFE2  F011         	goto	u1950
  4220   0023C0                     u1951:
  4221   0023C0  EFE6  F011         	goto	l2868
  4222   0023C4                     u1950:
  4223   0023C4                     
  4224                           ;ECU_Layer/LCD/Lcd.c: 71:         ret = (Std_ReturnType)0x01;
  4225   0023C4  0E01               	movlw	1
  4226   0023C6  6E12               	movwf	lcd_4bits_send_char@ret^0,c
  4227                           
  4228                           ;ECU_Layer/LCD/Lcd.c: 72:     }
  4229   0023C8  EF12  F012         	goto	l2870
  4230   0023CC                     l2868:
  4231                           
  4232                           ;ECU_Layer/LCD/Lcd.c: 74:         ret = gpio_pin_write_logic(&(lcd->RS_REG), GPIO_HIGH);
  4233   0023CC  0E04               	movlw	4
  4234   0023CE  240F               	addwf	lcd_4bits_send_char@lcd^0,w,c
  4235   0023D0  6E01               	movwf	gpio_pin_write_logic@str^0,c
  4236   0023D2  0E00               	movlw	0
  4237   0023D4  2010               	addwfc	(lcd_4bits_send_char@lcd+1)^0,w,c
  4238   0023D6  6E02               	movwf	(gpio_pin_write_logic@str+1)^0,c
  4239   0023D8  0E01               	movlw	1
  4240   0023DA  6E03               	movwf	gpio_pin_write_logic@LOG^0,c
  4241   0023DC  EC7B  F00D         	call	_gpio_pin_write_logic	;wreg free
  4242   0023E0  6E12               	movwf	lcd_4bits_send_char@ret^0,c
  4243                           
  4244                           ;ECU_Layer/LCD/Lcd.c: 75:         ret = send_4bits(lcd , data >> 4 );
  4245   0023E2  C00F  F00A         	movff	lcd_4bits_send_char@lcd,send_4bits@lcd
  4246   0023E6  C010  F00B         	movff	lcd_4bits_send_char@lcd+1,send_4bits@lcd+1
  4247   0023EA  3811               	swapf	lcd_4bits_send_char@data^0,w,c
  4248   0023EC  0B0F               	andlw	15
  4249   0023EE  6E0C               	movwf	send_4bits@command^0,c
  4250   0023F0  EC18  F011         	call	_send_4bits	;wreg free
  4251   0023F4  6E12               	movwf	lcd_4bits_send_char@ret^0,c
  4252                           
  4253                           ;ECU_Layer/LCD/Lcd.c: 76:         ret = enable_pin_4bits(lcd);
  4254   0023F6  C00F  F00A         	movff	lcd_4bits_send_char@lcd,enable_pin_4bits@lcd
  4255   0023FA  C010  F00B         	movff	lcd_4bits_send_char@lcd+1,enable_pin_4bits@lcd+1
  4256   0023FE  ECB4  F012         	call	_enable_pin_4bits	;wreg free
  4257   002402  6E12               	movwf	lcd_4bits_send_char@ret^0,c
  4258                           
  4259                           ;ECU_Layer/LCD/Lcd.c: 77:         ret = send_4bits(lcd , data);
  4260   002404  C00F  F00A         	movff	lcd_4bits_send_char@lcd,send_4bits@lcd
  4261   002408  C010  F00B         	movff	lcd_4bits_send_char@lcd+1,send_4bits@lcd+1
  4262   00240C  C011  F00C         	movff	lcd_4bits_send_char@data,send_4bits@command
  4263   002410  EC18  F011         	call	_send_4bits	;wreg free
  4264   002414  6E12               	movwf	lcd_4bits_send_char@ret^0,c
  4265                           
  4266                           ;ECU_Layer/LCD/Lcd.c: 78:         ret = enable_pin_4bits(lcd);
  4267   002416  C00F  F00A         	movff	lcd_4bits_send_char@lcd,enable_pin_4bits@lcd
  4268   00241A  C010  F00B         	movff	lcd_4bits_send_char@lcd+1,enable_pin_4bits@lcd+1
  4269   00241E  ECB4  F012         	call	_enable_pin_4bits	;wreg free
  4270   002422  6E12               	movwf	lcd_4bits_send_char@ret^0,c
  4271   002424                     l2870:
  4272                           
  4273                           ;ECU_Layer/LCD/Lcd.c: 80:     return ret;
  4274   002424  5012               	movf	lcd_4bits_send_char@ret^0,w,c
  4275   002426  0012               	return		;funcret
  4276   002428                     __end_of_lcd_4bits_send_char:
  4277                           	callstack 0
  4278                           
  4279 ;; *************** function _lcd_4bits_initialze *****************
  4280 ;; Defined at:
  4281 ;;		line 18 in file "ECU_Layer/LCD/Lcd.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;  lcd             2   18[COMRAM] PTR const struct .
  4284 ;;		 -> lcd_1(6), 
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;  ret             1   22[COMRAM] unsigned char 
  4287 ;;  counter         1   21[COMRAM] unsigned char 
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  1    wreg      unsigned char 
  4290 ;; Registers used:
  4291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4297 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;Total ram usage:        5 bytes
  4302 ;; Hardware stack levels used: 1
  4303 ;; Hardware stack levels required when called: 3
  4304 ;; This function calls:
  4305 ;;		_gpio_pin_intialize
  4306 ;;		_lcd_4bits_send_command
  4307 ;; This function is called by:
  4308 ;;		_main
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           	psect	text25
  4313   0019D6                     __ptext25:
  4314                           	callstack 0
  4315   0019D6                     _lcd_4bits_initialze:
  4316                           	callstack 27
  4317   0019D6                     
  4318                           ;ECU_Layer/LCD/Lcd.c: 21:     uint8 counter = 0;
  4319   0019D6  0E00               	movlw	0
  4320   0019D8  6E16               	movwf	lcd_4bits_initialze@counter^0,c
  4321   0019DA                     
  4322                           ;ECU_Layer/LCD/Lcd.c: 22:     if(lcd == ((void*)0)){
  4323   0019DA  5013               	movf	lcd_4bits_initialze@lcd^0,w,c
  4324   0019DC  1014               	iorwf	(lcd_4bits_initialze@lcd+1)^0,w,c
  4325   0019DE  A4D8               	btfss	status,2,c
  4326   0019E0  EFF4  F00C         	goto	u2591
  4327   0019E4  EFF6  F00C         	goto	u2590
  4328   0019E8                     u2591:
  4329   0019E8  EFFA  F00C         	goto	l3350
  4330   0019EC                     u2590:
  4331   0019EC                     
  4332                           ;ECU_Layer/LCD/Lcd.c: 23:         ret = (Std_ReturnType)0x01;
  4333   0019EC  0E01               	movlw	1
  4334   0019EE  6E17               	movwf	lcd_4bits_initialze@ret^0,c
  4335                           
  4336                           ;ECU_Layer/LCD/Lcd.c: 24:     }
  4337   0019F0  EF79  F00D         	goto	l3386
  4338   0019F4                     l3350:
  4339                           
  4340                           ;ECU_Layer/LCD/Lcd.c: 26:         ret = gpio_pin_intialize(&(lcd->RS_REG));
  4341   0019F4  0E04               	movlw	4
  4342   0019F6  2413               	addwf	lcd_4bits_initialze@lcd^0,w,c
  4343   0019F8  6E0A               	movwf	gpio_pin_intialize@str^0,c
  4344   0019FA  0E00               	movlw	0
  4345   0019FC  2014               	addwfc	(lcd_4bits_initialze@lcd+1)^0,w,c
  4346   0019FE  6E0B               	movwf	(gpio_pin_intialize@str+1)^0,c
  4347   001A00  EC4F  F012         	call	_gpio_pin_intialize	;wreg free
  4348   001A04  6E17               	movwf	lcd_4bits_initialze@ret^0,c
  4349                           
  4350                           ;ECU_Layer/LCD/Lcd.c: 27:         ret = gpio_pin_intialize(&(lcd->EN_BIT));
  4351   001A06  0E05               	movlw	5
  4352   001A08  2413               	addwf	lcd_4bits_initialze@lcd^0,w,c
  4353   001A0A  6E0A               	movwf	gpio_pin_intialize@str^0,c
  4354   001A0C  0E00               	movlw	0
  4355   001A0E  2014               	addwfc	(lcd_4bits_initialze@lcd+1)^0,w,c
  4356   001A10  6E0B               	movwf	(gpio_pin_intialize@str+1)^0,c
  4357   001A12  EC4F  F012         	call	_gpio_pin_intialize	;wreg free
  4358   001A16  6E17               	movwf	lcd_4bits_initialze@ret^0,c
  4359   001A18                     
  4360                           ;ECU_Layer/LCD/Lcd.c: 28:         for(counter = 0; counter<4; counter++){
  4361   001A18  0E00               	movlw	0
  4362   001A1A  6E16               	movwf	lcd_4bits_initialze@counter^0,c
  4363   001A1C                     l3358:
  4364   001A1C  5016               	movf	lcd_4bits_initialze@counter^0,w,c
  4365   001A1E  2413               	addwf	lcd_4bits_initialze@lcd^0,w,c
  4366   001A20  6E0A               	movwf	gpio_pin_intialize@str^0,c
  4367   001A22  0E00               	movlw	0
  4368   001A24  2014               	addwfc	(lcd_4bits_initialze@lcd+1)^0,w,c
  4369   001A26  6E0B               	movwf	(gpio_pin_intialize@str+1)^0,c
  4370   001A28  EC4F  F012         	call	_gpio_pin_intialize	;wreg free
  4371   001A2C                     
  4372                           ;ECU_Layer/LCD/Lcd.c: 30:         }
  4373   001A2C  2A16               	incf	lcd_4bits_initialze@counter^0,f,c
  4374   001A2E  0E03               	movlw	3
  4375   001A30  6416               	cpfsgt	lcd_4bits_initialze@counter^0,c
  4376   001A32  EF1D  F00D         	goto	u2601
  4377   001A36  EF1F  F00D         	goto	u2600
  4378   001A3A                     u2601:
  4379   001A3A  EF0E  F00D         	goto	l3358
  4380   001A3E                     u2600:
  4381   001A3E                     
  4382                           ;ECU_Layer/LCD/Lcd.c: 31:         _delay((unsigned long)((20)*(8000000U/4000.0)));
  4383   001A3E  0E34               	movlw	52
  4384   001A40  6E15               	movwf	??_lcd_4bits_initialze^0,c
  4385   001A42  0EF2               	movlw	242
  4386   001A44                     u3397:
  4387   001A44  2EE8               	decfsz	wreg,f,c
  4388   001A46  D7FE               	bra	u3397
  4389   001A48  2E15               	decfsz	??_lcd_4bits_initialze^0,f,c
  4390   001A4A  D7FC               	bra	u3397
  4391   001A4C  C013  F00F         	movff	lcd_4bits_initialze@lcd,lcd_4bits_send_command@lcd
  4392   001A50  C014  F010         	movff	lcd_4bits_initialze@lcd+1,lcd_4bits_send_command@lcd+1
  4393   001A54  0E38               	movlw	56
  4394   001A56  6E11               	movwf	lcd_4bits_send_command@command^0,c
  4395   001A58  EC14  F012         	call	_lcd_4bits_send_command	;wreg free
  4396   001A5C                     
  4397                           ;ECU_Layer/LCD/Lcd.c: 33:         _delay((unsigned long)((5)*(8000000U/4000.0)));
  4398   001A5C  0E0D               	movlw	13
  4399   001A5E  6E15               	movwf	??_lcd_4bits_initialze^0,c
  4400   001A60  0EFC               	movlw	252
  4401   001A62                     u3407:
  4402   001A62  2EE8               	decfsz	wreg,f,c
  4403   001A64  D7FE               	bra	u3407
  4404   001A66  2E15               	decfsz	??_lcd_4bits_initialze^0,f,c
  4405   001A68  D7FC               	bra	u3407
  4406   001A6A  C013  F00F         	movff	lcd_4bits_initialze@lcd,lcd_4bits_send_command@lcd
  4407   001A6E  C014  F010         	movff	lcd_4bits_initialze@lcd+1,lcd_4bits_send_command@lcd+1
  4408   001A72  0E38               	movlw	56
  4409   001A74  6E11               	movwf	lcd_4bits_send_command@command^0,c
  4410   001A76  EC14  F012         	call	_lcd_4bits_send_command	;wreg free
  4411   001A7A                     
  4412                           ;ECU_Layer/LCD/Lcd.c: 35:         _delay((unsigned long)((150)*(8000000U/4000000.0)));
  4413   001A7A  0E64               	movlw	100
  4414   001A7C                     u3417:
  4415   001A7C  2EE8               	decfsz	wreg,f,c
  4416   001A7E  D7FE               	bra	u3417
  4417   001A80  C013  F00F         	movff	lcd_4bits_initialze@lcd,lcd_4bits_send_command@lcd
  4418   001A84  C014  F010         	movff	lcd_4bits_initialze@lcd+1,lcd_4bits_send_command@lcd+1
  4419   001A88  0E38               	movlw	56
  4420   001A8A  6E11               	movwf	lcd_4bits_send_command@command^0,c
  4421   001A8C  EC14  F012         	call	_lcd_4bits_send_command	;wreg free
  4422   001A90  C013  F00F         	movff	lcd_4bits_initialze@lcd,lcd_4bits_send_command@lcd
  4423   001A94  C014  F010         	movff	lcd_4bits_initialze@lcd+1,lcd_4bits_send_command@lcd+1
  4424   001A98  0E01               	movlw	1
  4425   001A9A  6E11               	movwf	lcd_4bits_send_command@command^0,c
  4426   001A9C  EC14  F012         	call	_lcd_4bits_send_command	;wreg free
  4427   001AA0  C013  F00F         	movff	lcd_4bits_initialze@lcd,lcd_4bits_send_command@lcd
  4428   001AA4  C014  F010         	movff	lcd_4bits_initialze@lcd+1,lcd_4bits_send_command@lcd+1
  4429   001AA8  0E02               	movlw	2
  4430   001AAA  6E11               	movwf	lcd_4bits_send_command@command^0,c
  4431   001AAC  EC14  F012         	call	_lcd_4bits_send_command	;wreg free
  4432   001AB0  C013  F00F         	movff	lcd_4bits_initialze@lcd,lcd_4bits_send_command@lcd
  4433   001AB4  C014  F010         	movff	lcd_4bits_initialze@lcd+1,lcd_4bits_send_command@lcd+1
  4434   001AB8  0E06               	movlw	6
  4435   001ABA  6E11               	movwf	lcd_4bits_send_command@command^0,c
  4436   001ABC  EC14  F012         	call	_lcd_4bits_send_command	;wreg free
  4437   001AC0  C013  F00F         	movff	lcd_4bits_initialze@lcd,lcd_4bits_send_command@lcd
  4438   001AC4  C014  F010         	movff	lcd_4bits_initialze@lcd+1,lcd_4bits_send_command@lcd+1
  4439   001AC8  0E0C               	movlw	12
  4440   001ACA  6E11               	movwf	lcd_4bits_send_command@command^0,c
  4441   001ACC  EC14  F012         	call	_lcd_4bits_send_command	;wreg free
  4442   001AD0  C013  F00F         	movff	lcd_4bits_initialze@lcd,lcd_4bits_send_command@lcd
  4443   001AD4  C014  F010         	movff	lcd_4bits_initialze@lcd+1,lcd_4bits_send_command@lcd+1
  4444   001AD8  0E28               	movlw	40
  4445   001ADA  6E11               	movwf	lcd_4bits_send_command@command^0,c
  4446   001ADC  EC14  F012         	call	_lcd_4bits_send_command	;wreg free
  4447   001AE0                     
  4448                           ;ECU_Layer/LCD/Lcd.c: 43:         ret = lcd_4bits_send_command(lcd, 0x80);
  4449   001AE0  C013  F00F         	movff	lcd_4bits_initialze@lcd,lcd_4bits_send_command@lcd
  4450   001AE4  C014  F010         	movff	lcd_4bits_initialze@lcd+1,lcd_4bits_send_command@lcd+1
  4451   001AE8  0E80               	movlw	128
  4452   001AEA  6E11               	movwf	lcd_4bits_send_command@command^0,c
  4453   001AEC  EC14  F012         	call	_lcd_4bits_send_command	;wreg free
  4454   001AF0  6E17               	movwf	lcd_4bits_initialze@ret^0,c
  4455   001AF2                     l3386:
  4456                           
  4457                           ;ECU_Layer/LCD/Lcd.c: 46:     return ret;
  4458   001AF2  5017               	movf	lcd_4bits_initialze@ret^0,w,c
  4459   001AF4  0012               	return		;funcret
  4460   001AF6                     __end_of_lcd_4bits_initialze:
  4461                           	callstack 0
  4462                           
  4463 ;; *************** function _lcd_4bits_send_command *****************
  4464 ;; Defined at:
  4465 ;;		line 49 in file "ECU_Layer/LCD/Lcd.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  lcd             2   14[COMRAM] PTR const struct .
  4468 ;;		 -> lcd_1(6), 
  4469 ;;  command         1   16[COMRAM] unsigned char 
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;  ret             1   17[COMRAM] unsigned char 
  4472 ;; Return value:  Size  Location     Type
  4473 ;;                  1    wreg      unsigned char 
  4474 ;; Registers used:
  4475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4481 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4485 ;;Total ram usage:        4 bytes
  4486 ;; Hardware stack levels used: 1
  4487 ;; Hardware stack levels required when called: 2
  4488 ;; This function calls:
  4489 ;;		_enable_pin_4bits
  4490 ;;		_gpio_pin_write_logic
  4491 ;;		_send_4bits
  4492 ;; This function is called by:
  4493 ;;		_lcd_4bits_initialze
  4494 ;;		_lcd_4bits_set_cursor
  4495 ;;		_lcd_4bits_send_custom_char
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           	psect	text26
  4500   002428                     __ptext26:
  4501                           	callstack 0
  4502   002428                     _lcd_4bits_send_command:
  4503                           	callstack 24
  4504   002428                     
  4505                           ;ECU_Layer/LCD/Lcd.c: 53:     if(lcd == ((void*)0)){
  4506   002428  500F               	movf	lcd_4bits_send_command@lcd^0,w,c
  4507   00242A  1010               	iorwf	(lcd_4bits_send_command@lcd+1)^0,w,c
  4508   00242C  A4D8               	btfss	status,2,c
  4509   00242E  EF1B  F012         	goto	u1961
  4510   002432  EF1D  F012         	goto	u1960
  4511   002436                     u1961:
  4512   002436  EF21  F012         	goto	l2880
  4513   00243A                     u1960:
  4514   00243A                     
  4515                           ;ECU_Layer/LCD/Lcd.c: 54:         ret = (Std_ReturnType)0x01;
  4516   00243A  0E01               	movlw	1
  4517   00243C  6E12               	movwf	lcd_4bits_send_command@ret^0,c
  4518                           
  4519                           ;ECU_Layer/LCD/Lcd.c: 55:     }
  4520   00243E  EF4D  F012         	goto	l2882
  4521   002442                     l2880:
  4522                           
  4523                           ;ECU_Layer/LCD/Lcd.c: 57:         ret = gpio_pin_write_logic(&(lcd->RS_REG), GPIO_LOW);
  4524   002442  0E04               	movlw	4
  4525   002444  240F               	addwf	lcd_4bits_send_command@lcd^0,w,c
  4526   002446  6E01               	movwf	gpio_pin_write_logic@str^0,c
  4527   002448  0E00               	movlw	0
  4528   00244A  2010               	addwfc	(lcd_4bits_send_command@lcd+1)^0,w,c
  4529   00244C  6E02               	movwf	(gpio_pin_write_logic@str+1)^0,c
  4530   00244E  0E00               	movlw	0
  4531   002450  6E03               	movwf	gpio_pin_write_logic@LOG^0,c
  4532   002452  EC7B  F00D         	call	_gpio_pin_write_logic	;wreg free
  4533   002456  6E12               	movwf	lcd_4bits_send_command@ret^0,c
  4534                           
  4535                           ;ECU_Layer/LCD/Lcd.c: 58:         ret = send_4bits(lcd , command>>4);
  4536   002458  C00F  F00A         	movff	lcd_4bits_send_command@lcd,send_4bits@lcd
  4537   00245C  C010  F00B         	movff	lcd_4bits_send_command@lcd+1,send_4bits@lcd+1
  4538   002460  3811               	swapf	lcd_4bits_send_command@command^0,w,c
  4539   002462  0B0F               	andlw	15
  4540   002464  6E0C               	movwf	send_4bits@command^0,c
  4541   002466  EC18  F011         	call	_send_4bits	;wreg free
  4542   00246A  6E12               	movwf	lcd_4bits_send_command@ret^0,c
  4543                           
  4544                           ;ECU_Layer/LCD/Lcd.c: 59:         ret = enable_pin_4bits(lcd);
  4545   00246C  C00F  F00A         	movff	lcd_4bits_send_command@lcd,enable_pin_4bits@lcd
  4546   002470  C010  F00B         	movff	lcd_4bits_send_command@lcd+1,enable_pin_4bits@lcd+1
  4547   002474  ECB4  F012         	call	_enable_pin_4bits	;wreg free
  4548   002478  6E12               	movwf	lcd_4bits_send_command@ret^0,c
  4549                           
  4550                           ;ECU_Layer/LCD/Lcd.c: 60:         ret = send_4bits(lcd , command);
  4551   00247A  C00F  F00A         	movff	lcd_4bits_send_command@lcd,send_4bits@lcd
  4552   00247E  C010  F00B         	movff	lcd_4bits_send_command@lcd+1,send_4bits@lcd+1
  4553   002482  C011  F00C         	movff	lcd_4bits_send_command@command,send_4bits@command
  4554   002486  EC18  F011         	call	_send_4bits	;wreg free
  4555   00248A  6E12               	movwf	lcd_4bits_send_command@ret^0,c
  4556                           
  4557                           ;ECU_Layer/LCD/Lcd.c: 61:         ret = enable_pin_4bits(lcd);
  4558   00248C  C00F  F00A         	movff	lcd_4bits_send_command@lcd,enable_pin_4bits@lcd
  4559   002490  C010  F00B         	movff	lcd_4bits_send_command@lcd+1,enable_pin_4bits@lcd+1
  4560   002494  ECB4  F012         	call	_enable_pin_4bits	;wreg free
  4561   002498  6E12               	movwf	lcd_4bits_send_command@ret^0,c
  4562   00249A                     l2882:
  4563                           
  4564                           ;ECU_Layer/LCD/Lcd.c: 63:     return ret;
  4565   00249A  5012               	movf	lcd_4bits_send_command@ret^0,w,c
  4566   00249C  0012               	return		;funcret
  4567   00249E                     __end_of_lcd_4bits_send_command:
  4568                           	callstack 0
  4569                           
  4570 ;; *************** function _send_4bits *****************
  4571 ;; Defined at:
  4572 ;;		line 178 in file "ECU_Layer/LCD/Lcd.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  lcd             2    9[COMRAM] PTR const struct .
  4575 ;;		 -> lcd_1(6), 
  4576 ;;  command         1   11[COMRAM] unsigned char 
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;  ret             1   13[COMRAM] unsigned char 
  4579 ;;  counter         1   12[COMRAM] unsigned char 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      unsigned char 
  4582 ;; Registers used:
  4583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4589 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;Total ram usage:        5 bytes
  4594 ;; Hardware stack levels used: 1
  4595 ;; Hardware stack levels required when called: 1
  4596 ;; This function calls:
  4597 ;;		_gpio_pin_write_logic
  4598 ;; This function is called by:
  4599 ;;		_lcd_4bits_send_command
  4600 ;;		_lcd_4bits_send_char
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           	psect	text27
  4605   002230                     __ptext27:
  4606                           	callstack 0
  4607   002230                     _send_4bits:
  4608                           	callstack 24
  4609   002230                     
  4610                           ;ECU_Layer/LCD/Lcd.c: 180:     uint8 counter = 0;
  4611   002230  0E00               	movlw	0
  4612   002232  6E0D               	movwf	send_4bits@counter^0,c
  4613   002234                     
  4614                           ;ECU_Layer/LCD/Lcd.c: 182:     if(lcd == ((void*)0)){
  4615   002234  500A               	movf	send_4bits@lcd^0,w,c
  4616   002236  100B               	iorwf	(send_4bits@lcd+1)^0,w,c
  4617   002238  A4D8               	btfss	status,2,c
  4618   00223A  EF21  F011         	goto	u1781
  4619   00223E  EF23  F011         	goto	u1780
  4620   002242                     u1781:
  4621   002242  EF27  F011         	goto	l2742
  4622   002246                     u1780:
  4623   002246                     
  4624                           ;ECU_Layer/LCD/Lcd.c: 183:         ret = (Std_ReturnType)0x01;
  4625   002246  0E01               	movlw	1
  4626   002248  6E0E               	movwf	send_4bits@ret^0,c
  4627                           
  4628                           ;ECU_Layer/LCD/Lcd.c: 184:     }
  4629   00224A  EF5A  F011         	goto	l2744
  4630   00224E                     l2742:
  4631                           
  4632                           ;ECU_Layer/LCD/Lcd.c: 186:         ret = gpio_pin_write_logic(&(lcd->DATA_BITS[0]) , (co
      +                          mmand >> 0) & (uint8)0x01);
  4633   00224E  C00A  F001         	movff	send_4bits@lcd,gpio_pin_write_logic@str
  4634   002252  C00B  F002         	movff	send_4bits@lcd+1,gpio_pin_write_logic@str+1
  4635   002256  500C               	movf	send_4bits@command^0,w,c
  4636   002258  0B01               	andlw	1
  4637   00225A  6E03               	movwf	gpio_pin_write_logic@LOG^0,c
  4638   00225C  EC7B  F00D         	call	_gpio_pin_write_logic	;wreg free
  4639   002260  6E0E               	movwf	send_4bits@ret^0,c
  4640                           
  4641                           ;ECU_Layer/LCD/Lcd.c: 187:         ret = gpio_pin_write_logic(&(lcd->DATA_BITS[1]) , (co
      +                          mmand >> 1) & (uint8)0x01);
  4642   002262  0E01               	movlw	1
  4643   002264  240A               	addwf	send_4bits@lcd^0,w,c
  4644   002266  6E01               	movwf	gpio_pin_write_logic@str^0,c
  4645   002268  0E00               	movlw	0
  4646   00226A  200B               	addwfc	(send_4bits@lcd+1)^0,w,c
  4647   00226C  6E02               	movwf	(gpio_pin_write_logic@str+1)^0,c
  4648   00226E  90D8               	bcf	status,0,c
  4649   002270  300C               	rrcf	send_4bits@command^0,w,c
  4650   002272  0B01               	andlw	1
  4651   002274  6E03               	movwf	gpio_pin_write_logic@LOG^0,c
  4652   002276  EC7B  F00D         	call	_gpio_pin_write_logic	;wreg free
  4653   00227A  6E0E               	movwf	send_4bits@ret^0,c
  4654                           
  4655                           ;ECU_Layer/LCD/Lcd.c: 188:         ret = gpio_pin_write_logic(&(lcd->DATA_BITS[2]) , (co
      +                          mmand >> 2) & (uint8)0x01);
  4656   00227C  0E02               	movlw	2
  4657   00227E  240A               	addwf	send_4bits@lcd^0,w,c
  4658   002280  6E01               	movwf	gpio_pin_write_logic@str^0,c
  4659   002282  0E00               	movlw	0
  4660   002284  200B               	addwfc	(send_4bits@lcd+1)^0,w,c
  4661   002286  6E02               	movwf	(gpio_pin_write_logic@str+1)^0,c
  4662   002288  400C               	rrncf	send_4bits@command^0,w,c
  4663   00228A  42E8               	rrncf	wreg,f,c
  4664   00228C  0B3F               	andlw	63
  4665   00228E  0B01               	andlw	1
  4666   002290  6E03               	movwf	gpio_pin_write_logic@LOG^0,c
  4667   002292  EC7B  F00D         	call	_gpio_pin_write_logic	;wreg free
  4668   002296  6E0E               	movwf	send_4bits@ret^0,c
  4669                           
  4670                           ;ECU_Layer/LCD/Lcd.c: 189:         ret = gpio_pin_write_logic(&(lcd->DATA_BITS[3]) , (co
      +                          mmand >> 3) & (uint8)0x01);
  4671   002298  0E03               	movlw	3
  4672   00229A  240A               	addwf	send_4bits@lcd^0,w,c
  4673   00229C  6E01               	movwf	gpio_pin_write_logic@str^0,c
  4674   00229E  0E00               	movlw	0
  4675   0022A0  200B               	addwfc	(send_4bits@lcd+1)^0,w,c
  4676   0022A2  6E02               	movwf	(gpio_pin_write_logic@str+1)^0,c
  4677   0022A4  380C               	swapf	send_4bits@command^0,w,c
  4678   0022A6  46E8               	rlncf	wreg,f,c
  4679   0022A8  0B1F               	andlw	31
  4680   0022AA  0B01               	andlw	1
  4681   0022AC  6E03               	movwf	gpio_pin_write_logic@LOG^0,c
  4682   0022AE  EC7B  F00D         	call	_gpio_pin_write_logic	;wreg free
  4683   0022B2  6E0E               	movwf	send_4bits@ret^0,c
  4684   0022B4                     l2744:
  4685                           
  4686                           ;ECU_Layer/LCD/Lcd.c: 192:     return ret;
  4687   0022B4  500E               	movf	send_4bits@ret^0,w,c
  4688   0022B6  0012               	return		;funcret
  4689   0022B8                     __end_of_send_4bits:
  4690                           	callstack 0
  4691                           
  4692 ;; *************** function _enable_pin_4bits *****************
  4693 ;; Defined at:
  4694 ;;		line 163 in file "ECU_Layer/LCD/Lcd.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;  lcd             2    9[COMRAM] PTR const struct .
  4697 ;;		 -> lcd_1(6), 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;  ret             1   12[COMRAM] unsigned char 
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      unsigned char 
  4702 ;; Registers used:
  4703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4709 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;Total ram usage:        4 bytes
  4714 ;; Hardware stack levels used: 1
  4715 ;; Hardware stack levels required when called: 1
  4716 ;; This function calls:
  4717 ;;		_gpio_pin_write_logic
  4718 ;; This function is called by:
  4719 ;;		_lcd_4bits_send_command
  4720 ;;		_lcd_4bits_send_char
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           	psect	text28
  4725   002568                     __ptext28:
  4726                           	callstack 0
  4727   002568                     _enable_pin_4bits:
  4728                           	callstack 24
  4729   002568                     
  4730                           ;ECU_Layer/LCD/Lcd.c: 167:     if(lcd == ((void*)0)){
  4731   002568  500A               	movf	enable_pin_4bits@lcd^0,w,c
  4732   00256A  100B               	iorwf	(enable_pin_4bits@lcd+1)^0,w,c
  4733   00256C  A4D8               	btfss	status,2,c
  4734   00256E  EFBB  F012         	goto	u1791
  4735   002572  EFBD  F012         	goto	u1790
  4736   002576                     u1791:
  4737   002576  EFC1  F012         	goto	l2754
  4738   00257A                     u1790:
  4739   00257A                     
  4740                           ;ECU_Layer/LCD/Lcd.c: 168:         ret = (Std_ReturnType)0x01;
  4741   00257A  0E01               	movlw	1
  4742   00257C  6E0D               	movwf	enable_pin_4bits@ret^0,c
  4743                           
  4744                           ;ECU_Layer/LCD/Lcd.c: 169:     }
  4745   00257E  EFDD  F012         	goto	l2760
  4746   002582                     l2754:
  4747   002582  0E05               	movlw	5
  4748   002584  240A               	addwf	enable_pin_4bits@lcd^0,w,c
  4749   002586  6E01               	movwf	gpio_pin_write_logic@str^0,c
  4750   002588  0E00               	movlw	0
  4751   00258A  200B               	addwfc	(enable_pin_4bits@lcd+1)^0,w,c
  4752   00258C  6E02               	movwf	(gpio_pin_write_logic@str+1)^0,c
  4753   00258E  0E01               	movlw	1
  4754   002590  6E03               	movwf	gpio_pin_write_logic@LOG^0,c
  4755   002592  EC7B  F00D         	call	_gpio_pin_write_logic	;wreg free
  4756   002596                     
  4757                           ;ECU_Layer/LCD/Lcd.c: 172:         _delay((unsigned long)((5)*(8000000U/4000.0)));
  4758   002596  0E0D               	movlw	13
  4759   002598  6E0C               	movwf	??_enable_pin_4bits^0,c
  4760   00259A  0EFC               	movlw	252
  4761   00259C                     u3427:
  4762   00259C  2EE8               	decfsz	wreg,f,c
  4763   00259E  D7FE               	bra	u3427
  4764   0025A0  2E0C               	decfsz	??_enable_pin_4bits^0,f,c
  4765   0025A2  D7FC               	bra	u3427
  4766   0025A4                     
  4767                           ;ECU_Layer/LCD/Lcd.c: 173:         ret = gpio_pin_write_logic(&(lcd->EN_BIT) ,GPIO_LOW);
  4768   0025A4  0E05               	movlw	5
  4769   0025A6  240A               	addwf	enable_pin_4bits@lcd^0,w,c
  4770   0025A8  6E01               	movwf	gpio_pin_write_logic@str^0,c
  4771   0025AA  0E00               	movlw	0
  4772   0025AC  200B               	addwfc	(enable_pin_4bits@lcd+1)^0,w,c
  4773   0025AE  6E02               	movwf	(gpio_pin_write_logic@str+1)^0,c
  4774   0025B0  0E00               	movlw	0
  4775   0025B2  6E03               	movwf	gpio_pin_write_logic@LOG^0,c
  4776   0025B4  EC7B  F00D         	call	_gpio_pin_write_logic	;wreg free
  4777   0025B8  6E0D               	movwf	enable_pin_4bits@ret^0,c
  4778   0025BA                     l2760:
  4779                           
  4780                           ;ECU_Layer/LCD/Lcd.c: 175:     return ret;
  4781   0025BA  500D               	movf	enable_pin_4bits@ret^0,w,c
  4782   0025BC  0012               	return		;funcret
  4783   0025BE                     __end_of_enable_pin_4bits:
  4784                           	callstack 0
  4785                           
  4786 ;; *************** function _keypad_initialize *****************
  4787 ;; Defined at:
  4788 ;;		line 19 in file "ECU_Layer/KEYPAD/KeyPad.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  key_pad         2   13[COMRAM] PTR struct .
  4791 ;;		 -> keypad_1(8), 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  columns_coun    1   19[COMRAM] unsigned char 
  4794 ;;  rows_counter    1   18[COMRAM] unsigned char 
  4795 ;;  ret             1   17[COMRAM] unsigned char 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  1    wreg      unsigned char 
  4798 ;; Registers used:
  4799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4805 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4806 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;Total ram usage:        7 bytes
  4810 ;; Hardware stack levels used: 1
  4811 ;; Hardware stack levels required when called: 2
  4812 ;; This function calls:
  4813 ;;		_gpio_pin_direction_intialize
  4814 ;;		_gpio_pin_intialize
  4815 ;; This function is called by:
  4816 ;;		_main
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           	psect	text29
  4821   0022B8                     __ptext29:
  4822                           	callstack 0
  4823   0022B8                     _keypad_initialize:
  4824                           	callstack 28
  4825   0022B8                     
  4826                           ;ECU_Layer/KEYPAD/KeyPad.c: 23:     uint8 rows_counter = 0;
  4827   0022B8  0E00               	movlw	0
  4828   0022BA  6E13               	movwf	keypad_initialize@rows_counter^0,c
  4829                           
  4830                           ;ECU_Layer/KEYPAD/KeyPad.c: 24:     uint8 columns_counter = 0;
  4831   0022BC  0E00               	movlw	0
  4832   0022BE  6E14               	movwf	keypad_initialize@columns_counter^0,c
  4833   0022C0                     
  4834                           ;ECU_Layer/KEYPAD/KeyPad.c: 26:     if(key_pad == ((void*)0)){
  4835   0022C0  500E               	movf	keypad_initialize@key_pad^0,w,c
  4836   0022C2  100F               	iorwf	(keypad_initialize@key_pad+1)^0,w,c
  4837   0022C4  A4D8               	btfss	status,2,c
  4838   0022C6  EF67  F011         	goto	u2561
  4839   0022CA  EF69  F011         	goto	u2560
  4840   0022CE                     u2561:
  4841   0022CE  EF6D  F011         	goto	l3316
  4842   0022D2                     u2560:
  4843   0022D2                     
  4844                           ;ECU_Layer/KEYPAD/KeyPad.c: 27:         ret = (Std_ReturnType)0x01;
  4845   0022D2  0E01               	movlw	1
  4846   0022D4  6E12               	movwf	keypad_initialize@ret^0,c
  4847                           
  4848                           ;ECU_Layer/KEYPAD/KeyPad.c: 28:     }
  4849   0022D6  EF9A  F011         	goto	l3340
  4850   0022DA                     l3316:
  4851                           
  4852                           ;ECU_Layer/KEYPAD/KeyPad.c: 31:         for(rows_counter=0; rows_counter<4; rows_counter
      +                          ++){
  4853   0022DA  0E00               	movlw	0
  4854   0022DC  6E13               	movwf	keypad_initialize@rows_counter^0,c
  4855   0022DE                     l3322:
  4856   0022DE  5013               	movf	keypad_initialize@rows_counter^0,w,c
  4857   0022E0  240E               	addwf	keypad_initialize@key_pad^0,w,c
  4858   0022E2  6E0A               	movwf	gpio_pin_intialize@str^0,c
  4859   0022E4  0E00               	movlw	0
  4860   0022E6  200F               	addwfc	(keypad_initialize@key_pad+1)^0,w,c
  4861   0022E8  6E0B               	movwf	(gpio_pin_intialize@str+1)^0,c
  4862   0022EA  EC4F  F012         	call	_gpio_pin_intialize	;wreg free
  4863   0022EE                     
  4864                           ;ECU_Layer/KEYPAD/KeyPad.c: 33:         }
  4865   0022EE  2A13               	incf	keypad_initialize@rows_counter^0,f,c
  4866   0022F0  0E03               	movlw	3
  4867   0022F2  6413               	cpfsgt	keypad_initialize@rows_counter^0,c
  4868   0022F4  EF7E  F011         	goto	u2571
  4869   0022F8  EF80  F011         	goto	u2570
  4870   0022FC                     u2571:
  4871   0022FC  EF6F  F011         	goto	l3322
  4872   002300                     u2570:
  4873   002300                     
  4874                           ;ECU_Layer/KEYPAD/KeyPad.c: 35:         for(columns_counter=0; columns_counter<4; column
      +                          s_counter++){
  4875   002300  0E00               	movlw	0
  4876   002302  6E14               	movwf	keypad_initialize@columns_counter^0,c
  4877   002304                     l3334:
  4878                           
  4879                           ;ECU_Layer/KEYPAD/KeyPad.c: 36:             ret = gpio_pin_direction_intialize(&(key_pad
      +                          ->columns[columns_counter]));
  4880   002304  5014               	movf	keypad_initialize@columns_counter^0,w,c
  4881   002306  240E               	addwf	keypad_initialize@key_pad^0,w,c
  4882   002308  6E10               	movwf	??_keypad_initialize^0,c
  4883   00230A  0E00               	movlw	0
  4884   00230C  200F               	addwfc	(keypad_initialize@key_pad+1)^0,w,c
  4885   00230E  6E11               	movwf	(??_keypad_initialize+1)^0,c
  4886   002310  0E04               	movlw	4
  4887   002312  2410               	addwf	??_keypad_initialize^0,w,c
  4888   002314  6E01               	movwf	gpio_pin_direction_intialize@str^0,c
  4889   002316  0E00               	movlw	0
  4890   002318  2011               	addwfc	(??_keypad_initialize+1)^0,w,c
  4891   00231A  6E02               	movwf	(gpio_pin_direction_intialize@str+1)^0,c
  4892   00231C  EC0B  F00E         	call	_gpio_pin_direction_intialize	;wreg free
  4893   002320  6E12               	movwf	keypad_initialize@ret^0,c
  4894   002322                     
  4895                           ;ECU_Layer/KEYPAD/KeyPad.c: 37:         }
  4896   002322  2A14               	incf	keypad_initialize@columns_counter^0,f,c
  4897   002324  0E03               	movlw	3
  4898   002326  6414               	cpfsgt	keypad_initialize@columns_counter^0,c
  4899   002328  EF98  F011         	goto	u2581
  4900   00232C  EF9A  F011         	goto	u2580
  4901   002330                     u2581:
  4902   002330  EF82  F011         	goto	l3334
  4903   002334                     u2580:
  4904   002334                     l3340:
  4905                           
  4906                           ;ECU_Layer/KEYPAD/KeyPad.c: 40:     return ret;
  4907   002334  5012               	movf	keypad_initialize@ret^0,w,c
  4908   002336  0012               	return		;funcret
  4909   002338                     __end_of_keypad_initialize:
  4910                           	callstack 0
  4911                           
  4912 ;; *************** function _gpio_pin_intialize *****************
  4913 ;; Defined at:
  4914 ;;		line 108 in file "MCAL_Layer/GPIO/hal_gpio.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;  str             2    9[COMRAM] PTR const struct .
  4917 ;;		 -> lcd_1.DATA_BITS(4), lcd_1(6), keypad_1.rows(4), keypad_1(8), 
  4918 ;;		 -> relay_initialize@rel_pin(1), led_intialize@LED_IN(1), 
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  ret             1   12[COMRAM] unsigned char 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;                  1    wreg      unsigned char 
  4923 ;; Registers used:
  4924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4930 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;Total ram usage:        4 bytes
  4935 ;; Hardware stack levels used: 1
  4936 ;; Hardware stack levels required when called: 1
  4937 ;; This function calls:
  4938 ;;		_gpio_pin_direction_intialize
  4939 ;;		_gpio_pin_write_logic
  4940 ;; This function is called by:
  4941 ;;		_keypad_initialize
  4942 ;;		_lcd_4bits_initialze
  4943 ;;		_led_intialize
  4944 ;;		_relay_initialize
  4945 ;;		_seg_7_pins_intialize
  4946 ;;		_lcd_8bits_initialze
  4947 ;; This function uses a non-reentrant model
  4948 ;;
  4949                           
  4950                           	psect	text30
  4951   00249E                     __ptext30:
  4952                           	callstack 0
  4953   00249E                     _gpio_pin_intialize:
  4954                           	callstack 28
  4955   00249E                     
  4956                           ;MCAL_Layer/GPIO/hal_gpio.c: 112:     if(str == ((void*)0) || (str->PIN > 7)){
  4957   00249E  500A               	movf	gpio_pin_intialize@str^0,w,c
  4958   0024A0  100B               	iorwf	(gpio_pin_intialize@str+1)^0,w,c
  4959   0024A2  B4D8               	btfsc	status,2,c
  4960   0024A4  EF56  F012         	goto	u2321
  4961   0024A8  EF58  F012         	goto	u2320
  4962   0024AC                     u2321:
  4963   0024AC  EF67  F012         	goto	l3132
  4964   0024B0                     u2320:
  4965   0024B0  C00A  FFD9         	movff	gpio_pin_intialize@str,fsr2l
  4966   0024B4  C00B  FFDA         	movff	gpio_pin_intialize@str+1,fsr2h
  4967   0024B8  50DF               	movf	223,w,c
  4968   0024BA  0B07               	andlw	7
  4969   0024BC  6E0C               	movwf	??_gpio_pin_intialize^0,c
  4970   0024BE  0E07               	movlw	7
  4971   0024C0  640C               	cpfsgt	??_gpio_pin_intialize^0,c
  4972   0024C2  EF65  F012         	goto	u2331
  4973   0024C6  EF67  F012         	goto	u2330
  4974   0024CA                     u2331:
  4975   0024CA  EF6B  F012         	goto	l3134
  4976   0024CE                     u2330:
  4977   0024CE                     l3132:
  4978                           
  4979                           ;MCAL_Layer/GPIO/hal_gpio.c: 113:         ret = (Std_ReturnType)0x01;
  4980   0024CE  0E01               	movlw	1
  4981   0024D0  6E0D               	movwf	gpio_pin_intialize@ret^0,c
  4982                           
  4983                           ;MCAL_Layer/GPIO/hal_gpio.c: 114:     }
  4984   0024D2  EF81  F012         	goto	l3136
  4985   0024D6                     l3134:
  4986                           
  4987                           ;MCAL_Layer/GPIO/hal_gpio.c: 116:        ret = gpio_pin_direction_intialize(str);
  4988   0024D6  C00A  F001         	movff	gpio_pin_intialize@str,gpio_pin_direction_intialize@str
  4989   0024DA  C00B  F002         	movff	gpio_pin_intialize@str+1,gpio_pin_direction_intialize@str+1
  4990   0024DE  EC0B  F00E         	call	_gpio_pin_direction_intialize	;wreg free
  4991   0024E2  6E0D               	movwf	gpio_pin_intialize@ret^0,c
  4992                           
  4993                           ;MCAL_Layer/GPIO/hal_gpio.c: 117:        ret = gpio_pin_write_logic(str , str->Logic);
  4994   0024E4  C00A  F001         	movff	gpio_pin_intialize@str,gpio_pin_write_logic@str
  4995   0024E8  C00B  F002         	movff	gpio_pin_intialize@str+1,gpio_pin_write_logic@str+1
  4996   0024EC  C00A  FFD9         	movff	gpio_pin_intialize@str,fsr2l
  4997   0024F0  C00B  FFDA         	movff	gpio_pin_intialize@str+1,fsr2h
  4998   0024F4  0E00               	movlw	0
  4999   0024F6  BEDF               	btfsc	indf2,7,c
  5000   0024F8  0E01               	movlw	1
  5001   0024FA  6E03               	movwf	gpio_pin_write_logic@LOG^0,c
  5002   0024FC  EC7B  F00D         	call	_gpio_pin_write_logic	;wreg free
  5003   002500  6E0D               	movwf	gpio_pin_intialize@ret^0,c
  5004   002502                     l3136:
  5005                           
  5006                           ;MCAL_Layer/GPIO/hal_gpio.c: 120:     return ret;
  5007   002502  500D               	movf	gpio_pin_intialize@ret^0,w,c
  5008   002504  0012               	return		;funcret
  5009   002506                     __end_of_gpio_pin_intialize:
  5010                           	callstack 0
  5011                           
  5012 ;; *************** function _gpio_pin_write_logic *****************
  5013 ;; Defined at:
  5014 ;;		line 58 in file "MCAL_Layer/GPIO/hal_gpio.c"
  5015 ;; Parameters:    Size  Location     Type
  5016 ;;  str             2    0[COMRAM] PTR const struct .
  5017 ;;		 -> lcd_1.DATA_BITS(4), lcd_1(6), keypad_1.rows(4), keypad_1(8), 
  5018 ;;		 -> relay_off@rel_pin(1), relay_on@rel_pin(1), relay_initialize@rel_pin(1), led_turn_off@LED_IN(1), 
  5019 ;;		 -> led_turn_on@LED_IN(1), led_intialize@LED_IN(1), 
  5020 ;;  LOG             1    2[COMRAM] enum E2989
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;  ret             1    0        unsigned char 
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  1    wreg      unsigned char 
  5025 ;; Registers used:
  5026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5032 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;Total ram usage:        9 bytes
  5037 ;; Hardware stack levels used: 1
  5038 ;; This function calls:
  5039 ;;		Nothing
  5040 ;; This function is called by:
  5041 ;;		_keypad_read_value
  5042 ;;		_turnoff_all_rows
  5043 ;;		_gpio_pin_intialize
  5044 ;;		_lcd_4bits_send_command
  5045 ;;		_lcd_4bits_send_char
  5046 ;;		_enable_pin_4bits
  5047 ;;		_send_4bits
  5048 ;;		_led_turn_on
  5049 ;;		_led_turn_off
  5050 ;;		_dc_motor_move_forward
  5051 ;;		_dc_motor_move_backward
  5052 ;;		_dc_motor_stop
  5053 ;;		_relay_on
  5054 ;;		_relay_off
  5055 ;;		_seg_7_pins_write
  5056 ;;		_lcd_8bits_send_command
  5057 ;;		_lcd_8bits_send_char
  5058 ;;		_enable_pin_8bits
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           	psect	text31
  5063   001AF6                     __ptext31:
  5064                           	callstack 0
  5065   001AF6                     _gpio_pin_write_logic:
  5066                           	callstack 24
  5067   001AF6                     
  5068                           ;MCAL_Layer/GPIO/hal_gpio.c: 61:     if(str == ((void*)0) || (str->PIN > 7)){
  5069   001AF6  5001               	movf	gpio_pin_write_logic@str^0,w,c
  5070   001AF8  1002               	iorwf	(gpio_pin_write_logic@str+1)^0,w,c
  5071   001AFA  B4D8               	btfsc	status,2,c
  5072   001AFC  EF82  F00D         	goto	u1731
  5073   001B00  EF84  F00D         	goto	u1730
  5074   001B04                     u1731:
  5075   001B04  EF93  F00D         	goto	l2710
  5076   001B08                     u1730:
  5077   001B08  C001  FFD9         	movff	gpio_pin_write_logic@str,fsr2l
  5078   001B0C  C002  FFDA         	movff	gpio_pin_write_logic@str+1,fsr2h
  5079   001B10  50DF               	movf	223,w,c
  5080   001B12  0B07               	andlw	7
  5081   001B14  6E04               	movwf	??_gpio_pin_write_logic^0,c
  5082   001B16  0E07               	movlw	7
  5083   001B18  6404               	cpfsgt	??_gpio_pin_write_logic^0,c
  5084   001B1A  EF91  F00D         	goto	u1741
  5085   001B1E  EF93  F00D         	goto	u1740
  5086   001B22                     u1741:
  5087   001B22  EFF4  F00D         	goto	l2718
  5088   001B26                     u1740:
  5089   001B26                     l2710:
  5090                           
  5091                           ;MCAL_Layer/GPIO/hal_gpio.c: 63:     }
  5092   001B26  EF09  F00E         	goto	l2720
  5093   001B2A                     l2712:
  5094                           
  5095                           ;MCAL_Layer/GPIO/hal_gpio.c: 68:                 (*LAT_REG[str->PORT] |= (0x01 << str->P
      +                          IN));
  5096   001B2A  C001  FFD9         	movff	gpio_pin_write_logic@str,fsr2l
  5097   001B2E  C002  FFDA         	movff	gpio_pin_write_logic@str+1,fsr2h
  5098   001B32  50DF               	movf	223,w,c
  5099   001B34  0B07               	andlw	7
  5100   001B36  6E04               	movwf	??_gpio_pin_write_logic^0,c
  5101   001B38  0E01               	movlw	1
  5102   001B3A  6E05               	movwf	(??_gpio_pin_write_logic+1)^0,c
  5103   001B3C  2A04               	incf	??_gpio_pin_write_logic^0,f,c
  5104   001B3E  EFA3  F00D         	goto	u1754
  5105   001B42                     u1755:
  5106   001B42  90D8               	bcf	status,0,c
  5107   001B44  3605               	rlcf	(??_gpio_pin_write_logic+1)^0,f,c
  5108   001B46                     u1754:
  5109   001B46  2E04               	decfsz	??_gpio_pin_write_logic^0,f,c
  5110   001B48  EFA1  F00D         	goto	u1755
  5111   001B4C  C001  FFD9         	movff	gpio_pin_write_logic@str,fsr2l
  5112   001B50  C002  FFDA         	movff	gpio_pin_write_logic@str+1,fsr2h
  5113   001B54  30DF               	rrcf	223,w,c
  5114   001B56  32E8               	rrcf	wreg,f,c
  5115   001B58  32E8               	rrcf	wreg,f,c
  5116   001B5A  0B07               	andlw	7
  5117   001B5C  6E06               	movwf	(??_gpio_pin_write_logic+2)^0,c
  5118   001B5E  5006               	movf	(??_gpio_pin_write_logic+2)^0,w,c
  5119   001B60  0D02               	mullw	2
  5120   001B62  0E94               	movlw	low _LAT_REG
  5121   001B64  24F3               	addwf	243,w,c
  5122   001B66  6ED9               	movwf	fsr2l,c
  5123   001B68  0E00               	movlw	high _LAT_REG
  5124   001B6A  20F4               	addwfc	prodh,w,c
  5125   001B6C  6EDA               	movwf	fsr2h,c
  5126   001B6E  CFDE F007          	movff	postinc2,??_gpio_pin_write_logic+3
  5127   001B72  CFDD F008          	movff	postdec2,??_gpio_pin_write_logic+4
  5128   001B76  C007  FFD9         	movff	??_gpio_pin_write_logic+3,fsr2l
  5129   001B7A  C008  FFDA         	movff	??_gpio_pin_write_logic+4,fsr2h
  5130   001B7E  5005               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  5131   001B80  12DF               	iorwf	indf2,f,c
  5132                           
  5133                           ;MCAL_Layer/GPIO/hal_gpio.c: 69:                 break;
  5134   001B82  EF09  F00E         	goto	l2720
  5135   001B86                     l2714:
  5136                           
  5137                           ;MCAL_Layer/GPIO/hal_gpio.c: 71:                 (*LAT_REG[str->PORT] &= ~(0x01 << str->
      +                          PIN));
  5138   001B86  C001  FFD9         	movff	gpio_pin_write_logic@str,fsr2l
  5139   001B8A  C002  FFDA         	movff	gpio_pin_write_logic@str+1,fsr2h
  5140   001B8E  50DF               	movf	223,w,c
  5141   001B90  0B07               	andlw	7
  5142   001B92  6E04               	movwf	??_gpio_pin_write_logic^0,c
  5143   001B94  0E01               	movlw	1
  5144   001B96  6E05               	movwf	(??_gpio_pin_write_logic+1)^0,c
  5145   001B98  2A04               	incf	??_gpio_pin_write_logic^0,f,c
  5146   001B9A  EFD1  F00D         	goto	u1764
  5147   001B9E                     u1765:
  5148   001B9E  90D8               	bcf	status,0,c
  5149   001BA0  3605               	rlcf	(??_gpio_pin_write_logic+1)^0,f,c
  5150   001BA2                     u1764:
  5151   001BA2  2E04               	decfsz	??_gpio_pin_write_logic^0,f,c
  5152   001BA4  EFCF  F00D         	goto	u1765
  5153   001BA8  5005               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  5154   001BAA  0AFF               	xorlw	255
  5155   001BAC  6E06               	movwf	(??_gpio_pin_write_logic+2)^0,c
  5156   001BAE  C001  FFD9         	movff	gpio_pin_write_logic@str,fsr2l
  5157   001BB2  C002  FFDA         	movff	gpio_pin_write_logic@str+1,fsr2h
  5158   001BB6  30DF               	rrcf	223,w,c
  5159   001BB8  32E8               	rrcf	wreg,f,c
  5160   001BBA  32E8               	rrcf	wreg,f,c
  5161   001BBC  0B07               	andlw	7
  5162   001BBE  6E07               	movwf	(??_gpio_pin_write_logic+3)^0,c
  5163   001BC0  5007               	movf	(??_gpio_pin_write_logic+3)^0,w,c
  5164   001BC2  0D02               	mullw	2
  5165   001BC4  0E94               	movlw	low _LAT_REG
  5166   001BC6  24F3               	addwf	243,w,c
  5167   001BC8  6ED9               	movwf	fsr2l,c
  5168   001BCA  0E00               	movlw	high _LAT_REG
  5169   001BCC  20F4               	addwfc	prodh,w,c
  5170   001BCE  6EDA               	movwf	fsr2h,c
  5171   001BD0  CFDE F008          	movff	postinc2,??_gpio_pin_write_logic+4
  5172   001BD4  CFDD F009          	movff	postdec2,??_gpio_pin_write_logic+5
  5173   001BD8  C008  FFD9         	movff	??_gpio_pin_write_logic+4,fsr2l
  5174   001BDC  C009  FFDA         	movff	??_gpio_pin_write_logic+5,fsr2h
  5175   001BE0  5006               	movf	(??_gpio_pin_write_logic+2)^0,w,c
  5176   001BE2  16DF               	andwf	indf2,f,c
  5177                           
  5178                           ;MCAL_Layer/GPIO/hal_gpio.c: 72:                 break;
  5179   001BE4  EF09  F00E         	goto	l2720
  5180   001BE8                     l2718:
  5181   001BE8  5003               	movf	gpio_pin_write_logic@LOG^0,w,c
  5182   001BEA  6E04               	movwf	??_gpio_pin_write_logic^0,c
  5183   001BEC  6A05               	clrf	(??_gpio_pin_write_logic+1)^0,c
  5184                           
  5185                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5186                           ; Switch size 1, requested type "simple"
  5187                           ; Number of cases is 1, Range of values is 0 to 0
  5188                           ; switch strategies available:
  5189                           ; Name         Instructions Cycles
  5190                           ; simple_byte            4     3 (average)
  5191                           ;	Chosen strategy is simple_byte
  5192   001BEE  5005               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  5193   001BF0  0A00               	xorlw	0	; case 0
  5194   001BF2  B4D8               	btfsc	status,2,c
  5195   001BF4  EFFE  F00D         	goto	l4080
  5196   001BF8  EF93  F00D         	goto	l2710
  5197   001BFC                     l4080:
  5198                           
  5199                           ; Switch size 1, requested type "simple"
  5200                           ; Number of cases is 2, Range of values is 0 to 1
  5201                           ; switch strategies available:
  5202                           ; Name         Instructions Cycles
  5203                           ; simple_byte            7     4 (average)
  5204                           ;	Chosen strategy is simple_byte
  5205   001BFC  5004               	movf	??_gpio_pin_write_logic^0,w,c
  5206   001BFE  0A00               	xorlw	0	; case 0
  5207   001C00  B4D8               	btfsc	status,2,c
  5208   001C02  EFC3  F00D         	goto	l2714
  5209   001C06  0A01               	xorlw	1	; case 1
  5210   001C08  B4D8               	btfsc	status,2,c
  5211   001C0A  EF95  F00D         	goto	l2712
  5212   001C0E  EF93  F00D         	goto	l2710
  5213   001C12                     l2720:
  5214                           
  5215                           ;MCAL_Layer/GPIO/hal_gpio.c: 78:     return ret;
  5216   001C12  0E01               	movlw	1
  5217   001C14  0012               	return		;funcret
  5218   001C16                     __end_of_gpio_pin_write_logic:
  5219                           	callstack 0
  5220                           
  5221 ;; *************** function _gpio_pin_direction_intialize *****************
  5222 ;; Defined at:
  5223 ;;		line 20 in file "MCAL_Layer/GPIO/hal_gpio.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;  str             2    0[COMRAM] PTR const struct .
  5226 ;;		 -> lcd_1.DATA_BITS(4), lcd_1(6), keypad_1.columns(4), keypad_1.rows(4), 
  5227 ;;		 -> keypad_1(8), relay_initialize@rel_pin(1), led_intialize@LED_IN(1), 
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;  ret             1    0        unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  1    wreg      unsigned char 
  5232 ;; Registers used:
  5233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5239 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5243 ;;Total ram usage:        8 bytes
  5244 ;; Hardware stack levels used: 1
  5245 ;; This function calls:
  5246 ;;		Nothing
  5247 ;; This function is called by:
  5248 ;;		_keypad_initialize
  5249 ;;		_gpio_pin_intialize
  5250 ;;		_button_initialize
  5251 ;;		_dc_motor_initialize
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           	psect	text32
  5256   001C16                     __ptext32:
  5257                           	callstack 0
  5258   001C16                     _gpio_pin_direction_intialize:
  5259                           	callstack 28
  5260   001C16                     
  5261                           ;MCAL_Layer/GPIO/hal_gpio.c: 24:     if(str == ((void*)0) || (str->PIN > 7)){
  5262   001C16  5001               	movf	gpio_pin_direction_intialize@str^0,w,c
  5263   001C18  1002               	iorwf	(gpio_pin_direction_intialize@str+1)^0,w,c
  5264   001C1A  B4D8               	btfsc	status,2,c
  5265   001C1C  EF12  F00E         	goto	u2201
  5266   001C20  EF14  F00E         	goto	u2200
  5267   001C24                     u2201:
  5268   001C24  EF23  F00E         	goto	l3048
  5269   001C28                     u2200:
  5270   001C28  C001  FFD9         	movff	gpio_pin_direction_intialize@str,fsr2l
  5271   001C2C  C002  FFDA         	movff	gpio_pin_direction_intialize@str+1,fsr2h
  5272   001C30  50DF               	movf	223,w,c
  5273   001C32  0B07               	andlw	7
  5274   001C34  6E03               	movwf	??_gpio_pin_direction_intialize^0,c
  5275   001C36  0E07               	movlw	7
  5276   001C38  6403               	cpfsgt	??_gpio_pin_direction_intialize^0,c
  5277   001C3A  EF21  F00E         	goto	u2211
  5278   001C3E  EF23  F00E         	goto	u2210
  5279   001C42                     u2211:
  5280   001C42  EF25  F00E         	goto	l3050
  5281   001C46                     u2210:
  5282   001C46                     l3048:
  5283                           
  5284                           ;MCAL_Layer/GPIO/hal_gpio.c: 26:     }
  5285   001C46  EF98  F00E         	goto	l214
  5286   001C4A                     l3050:
  5287                           
  5288                           ;MCAL_Layer/GPIO/hal_gpio.c: 28:         if(GPIO_DIRECTION_OUTPUT == str->Direction){
  5289   001C4A  C001  FFD9         	movff	gpio_pin_direction_intialize@str,fsr2l
  5290   001C4E  C002  FFDA         	movff	gpio_pin_direction_intialize@str+1,fsr2h
  5291   001C52  BCDF               	btfsc	indf2,6,c
  5292   001C54  EF2E  F00E         	goto	u2221
  5293   001C58  EF30  F00E         	goto	u2220
  5294   001C5C                     u2221:
  5295   001C5C  EF61  F00E         	goto	l3054
  5296   001C60                     u2220:
  5297   001C60                     
  5298                           ;MCAL_Layer/GPIO/hal_gpio.c: 30:             (*TRIS_REG[str->PORT] &= ~(0x01 << str->PIN
      +                          ));
  5299   001C60  C001  FFD9         	movff	gpio_pin_direction_intialize@str,fsr2l
  5300   001C64  C002  FFDA         	movff	gpio_pin_direction_intialize@str+1,fsr2h
  5301   001C68  50DF               	movf	223,w,c
  5302   001C6A  0B07               	andlw	7
  5303   001C6C  6E03               	movwf	??_gpio_pin_direction_intialize^0,c
  5304   001C6E  0E01               	movlw	1
  5305   001C70  6E04               	movwf	(??_gpio_pin_direction_intialize+1)^0,c
  5306   001C72  2A03               	incf	??_gpio_pin_direction_intialize^0,f,c
  5307   001C74  EF3E  F00E         	goto	u2234
  5308   001C78                     u2235:
  5309   001C78  90D8               	bcf	status,0,c
  5310   001C7A  3604               	rlcf	(??_gpio_pin_direction_intialize+1)^0,f,c
  5311   001C7C                     u2234:
  5312   001C7C  2E03               	decfsz	??_gpio_pin_direction_intialize^0,f,c
  5313   001C7E  EF3C  F00E         	goto	u2235
  5314   001C82  5004               	movf	(??_gpio_pin_direction_intialize+1)^0,w,c
  5315   001C84  0AFF               	xorlw	255
  5316   001C86  6E05               	movwf	(??_gpio_pin_direction_intialize+2)^0,c
  5317   001C88  C001  FFD9         	movff	gpio_pin_direction_intialize@str,fsr2l
  5318   001C8C  C002  FFDA         	movff	gpio_pin_direction_intialize@str+1,fsr2h
  5319   001C90  30DF               	rrcf	223,w,c
  5320   001C92  32E8               	rrcf	wreg,f,c
  5321   001C94  32E8               	rrcf	wreg,f,c
  5322   001C96  0B07               	andlw	7
  5323   001C98  6E06               	movwf	(??_gpio_pin_direction_intialize+3)^0,c
  5324   001C9A  5006               	movf	(??_gpio_pin_direction_intialize+3)^0,w,c
  5325   001C9C  0D02               	mullw	2
  5326   001C9E  0E8A               	movlw	low _TRIS_REG
  5327   001CA0  24F3               	addwf	243,w,c
  5328   001CA2  6ED9               	movwf	fsr2l,c
  5329   001CA4  0E00               	movlw	high _TRIS_REG
  5330   001CA6  20F4               	addwfc	prodh,w,c
  5331   001CA8  6EDA               	movwf	fsr2h,c
  5332   001CAA  CFDE F007          	movff	postinc2,??_gpio_pin_direction_intialize+4
  5333   001CAE  CFDD F008          	movff	postdec2,??_gpio_pin_direction_intialize+5
  5334   001CB2  C007  FFD9         	movff	??_gpio_pin_direction_intialize+4,fsr2l
  5335   001CB6  C008  FFDA         	movff	??_gpio_pin_direction_intialize+5,fsr2h
  5336   001CBA  5005               	movf	(??_gpio_pin_direction_intialize+2)^0,w,c
  5337   001CBC  16DF               	andwf	indf2,f,c
  5338                           
  5339                           ;MCAL_Layer/GPIO/hal_gpio.c: 31:         }
  5340   001CBE  EF98  F00E         	goto	l214
  5341   001CC2                     l3054:
  5342   001CC2  C001  FFD9         	movff	gpio_pin_direction_intialize@str,fsr2l
  5343   001CC6  C002  FFDA         	movff	gpio_pin_direction_intialize@str+1,fsr2h
  5344   001CCA  ACDF               	btfss	indf2,6,c
  5345   001CCC  EF6A  F00E         	goto	u2241
  5346   001CD0  EF6C  F00E         	goto	u2240
  5347   001CD4                     u2241:
  5348   001CD4  EF23  F00E         	goto	l3048
  5349   001CD8                     u2240:
  5350   001CD8                     
  5351                           ;MCAL_Layer/GPIO/hal_gpio.c: 34:             (*TRIS_REG[str->PORT] |= (0x01 << str->PIN)
      +                          );
  5352   001CD8  C001  FFD9         	movff	gpio_pin_direction_intialize@str,fsr2l
  5353   001CDC  C002  FFDA         	movff	gpio_pin_direction_intialize@str+1,fsr2h
  5354   001CE0  50DF               	movf	223,w,c
  5355   001CE2  0B07               	andlw	7
  5356   001CE4  6E03               	movwf	??_gpio_pin_direction_intialize^0,c
  5357   001CE6  0E01               	movlw	1
  5358   001CE8  6E04               	movwf	(??_gpio_pin_direction_intialize+1)^0,c
  5359   001CEA  2A03               	incf	??_gpio_pin_direction_intialize^0,f,c
  5360   001CEC  EF7A  F00E         	goto	u2254
  5361   001CF0                     u2255:
  5362   001CF0  90D8               	bcf	status,0,c
  5363   001CF2  3604               	rlcf	(??_gpio_pin_direction_intialize+1)^0,f,c
  5364   001CF4                     u2254:
  5365   001CF4  2E03               	decfsz	??_gpio_pin_direction_intialize^0,f,c
  5366   001CF6  EF78  F00E         	goto	u2255
  5367   001CFA  C001  FFD9         	movff	gpio_pin_direction_intialize@str,fsr2l
  5368   001CFE  C002  FFDA         	movff	gpio_pin_direction_intialize@str+1,fsr2h
  5369   001D02  30DF               	rrcf	223,w,c
  5370   001D04  32E8               	rrcf	wreg,f,c
  5371   001D06  32E8               	rrcf	wreg,f,c
  5372   001D08  0B07               	andlw	7
  5373   001D0A  6E05               	movwf	(??_gpio_pin_direction_intialize+2)^0,c
  5374   001D0C  5005               	movf	(??_gpio_pin_direction_intialize+2)^0,w,c
  5375   001D0E  0D02               	mullw	2
  5376   001D10  0E8A               	movlw	low _TRIS_REG
  5377   001D12  24F3               	addwf	243,w,c
  5378   001D14  6ED9               	movwf	fsr2l,c
  5379   001D16  0E00               	movlw	high _TRIS_REG
  5380   001D18  20F4               	addwfc	prodh,w,c
  5381   001D1A  6EDA               	movwf	fsr2h,c
  5382   001D1C  CFDE F006          	movff	postinc2,??_gpio_pin_direction_intialize+3
  5383   001D20  CFDD F007          	movff	postdec2,??_gpio_pin_direction_intialize+4
  5384   001D24  C006  FFD9         	movff	??_gpio_pin_direction_intialize+3,fsr2l
  5385   001D28  C007  FFDA         	movff	??_gpio_pin_direction_intialize+4,fsr2h
  5386   001D2C  5004               	movf	(??_gpio_pin_direction_intialize+1)^0,w,c
  5387   001D2E  12DF               	iorwf	indf2,f,c
  5388   001D30                     l214:
  5389                           
  5390                           ;MCAL_Layer/GPIO/hal_gpio.c: 40:     return ret;
  5391   001D30  0E01               	movlw	1
  5392   001D32  0012               	return		;funcret
  5393   001D34                     __end_of_gpio_pin_direction_intialize:
  5394                           	callstack 0
  5395                           
  5396                           	psect	rparam
  5397   000000                     
  5398                           	psect	config
  5399                           
  5400                           ; Padding undefined space
  5401   300000                     	org	3145728
  5402   300000  FF                 	db	255
  5403                           
  5404                           ;Config register CONFIG1H @ 0x300001
  5405                           ;	Oscillator Selection bits
  5406                           ;	OSC = RCIO6, External RC oscillator, port function on RA6
  5407                           ;	Fail-Safe Clock Monitor Enable bit
  5408                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  5409                           ;	Internal/External Oscillator Switchover bit
  5410                           ;	IESO = OFF, Oscillator Switchover mode disabled
  5411   300001                     	org	3145729
  5412   300001  07                 	db	7
  5413                           
  5414                           ;Config register CONFIG2L @ 0x300002
  5415                           ;	Power-up Timer Enable bit
  5416                           ;	PWRT = OFF, PWRT disabled
  5417                           ;	Brown-out Reset Enable bits
  5418                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  5419                           ;	Brown Out Reset Voltage bits
  5420                           ;	BORV = 3, Minimum setting
  5421   300002                     	org	3145730
  5422   300002  1F                 	db	31
  5423                           
  5424                           ;Config register CONFIG2H @ 0x300003
  5425                           ;	Watchdog Timer Enable bit
  5426                           ;	WDT = ON, WDT enabled
  5427                           ;	Watchdog Timer Postscale Select bits
  5428                           ;	WDTPS = 32768, 1:32768
  5429   300003                     	org	3145731
  5430   300003  1F                 	db	31
  5431                           
  5432                           ; Padding undefined space
  5433   300004                     	org	3145732
  5434   300004  FF                 	db	255
  5435                           
  5436                           ;Config register CONFIG3H @ 0x300005
  5437                           ;	CCP2 MUX bit
  5438                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  5439                           ;	PORTB A/D Enable bit
  5440                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  5441                           ;	Low-Power Timer1 Oscillator Enable bit
  5442                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  5443                           ;	MCLR Pin Enable bit
  5444                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  5445   300005                     	org	3145733
  5446   300005  83                 	db	131
  5447                           
  5448                           ;Config register CONFIG4L @ 0x300006
  5449                           ;	Stack Full/Underflow Reset Enable bit
  5450                           ;	STVREN = ON, Stack full/underflow will cause Reset
  5451                           ;	Single-Supply ICSP Enable bit
  5452                           ;	LVP = ON, Single-Supply ICSP enabled
  5453                           ;	Extended Instruction Set Enable bit
  5454                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  5455                           ;	Background Debugger Enable bit
  5456                           ;	DEBUG = 0x1, unprogrammed default
  5457   300006                     	org	3145734
  5458   300006  85                 	db	133
  5459                           
  5460                           ; Padding undefined space
  5461   300007                     	org	3145735
  5462   300007  FF                 	db	255
  5463                           
  5464                           ;Config register CONFIG5L @ 0x300008
  5465                           ;	Code Protection bit
  5466                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  5467                           ;	Code Protection bit
  5468                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  5469                           ;	Code Protection bit
  5470                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  5471                           ;	Code Protection bit
  5472                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  5473   300008                     	org	3145736
  5474   300008  0F                 	db	15
  5475                           
  5476                           ;Config register CONFIG5H @ 0x300009
  5477                           ;	Boot Block Code Protection bit
  5478                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  5479                           ;	Data EEPROM Code Protection bit
  5480                           ;	CPD = OFF, Data EEPROM not code-protected
  5481   300009                     	org	3145737
  5482   300009  C0                 	db	192
  5483                           
  5484                           ;Config register CONFIG6L @ 0x30000A
  5485                           ;	Write Protection bit
  5486                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  5487                           ;	Write Protection bit
  5488                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  5489                           ;	Write Protection bit
  5490                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  5491                           ;	Write Protection bit
  5492                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  5493   30000A                     	org	3145738
  5494   30000A  0F                 	db	15
  5495                           
  5496                           ;Config register CONFIG6H @ 0x30000B
  5497                           ;	Configuration Register Write Protection bit
  5498                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  5499                           ;	Boot Block Write Protection bit
  5500                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  5501                           ;	Data EEPROM Write Protection bit
  5502                           ;	WRTD = OFF, Data EEPROM not write-protected
  5503   30000B                     	org	3145739
  5504   30000B  E0                 	db	224
  5505                           
  5506                           ;Config register CONFIG7L @ 0x30000C
  5507                           ;	Table Read Protection bit
  5508                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  5509                           ;	Table Read Protection bit
  5510                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  5511                           ;	Table Read Protection bit
  5512                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  5513                           ;	Table Read Protection bit
  5514                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  5515   30000C                     	org	3145740
  5516   30000C  0F                 	db	15
  5517                           
  5518                           ;Config register CONFIG7H @ 0x30000D
  5519                           ;	Boot Block Table Read Protection bit
  5520                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  5521   30000D                     	org	3145741
  5522   30000D  40                 	db	64
  5523                           tosu	equ	0xFFF
  5524                           tosh	equ	0xFFE
  5525                           tosl	equ	0xFFD
  5526                           stkptr	equ	0xFFC
  5527                           pclatu	equ	0xFFB
  5528                           pclath	equ	0xFFA
  5529                           pcl	equ	0xFF9
  5530                           tblptru	equ	0xFF8
  5531                           tblptrh	equ	0xFF7
  5532                           tblptrl	equ	0xFF6
  5533                           tablat	equ	0xFF5
  5534                           prodh	equ	0xFF4
  5535                           prodl	equ	0xFF3
  5536                           indf0	equ	0xFEF
  5537                           postinc0	equ	0xFEE
  5538                           postdec0	equ	0xFED
  5539                           preinc0	equ	0xFEC
  5540                           plusw0	equ	0xFEB
  5541                           fsr0h	equ	0xFEA
  5542                           fsr0l	equ	0xFE9
  5543                           wreg	equ	0xFE8
  5544                           indf1	equ	0xFE7
  5545                           postinc1	equ	0xFE6
  5546                           postdec1	equ	0xFE5
  5547                           preinc1	equ	0xFE4
  5548                           plusw1	equ	0xFE3
  5549                           fsr1h	equ	0xFE2
  5550                           fsr1l	equ	0xFE1
  5551                           bsr	equ	0xFE0
  5552                           indf2	equ	0xFDF
  5553                           postinc2	equ	0xFDE
  5554                           postdec2	equ	0xFDD
  5555                           preinc2	equ	0xFDC
  5556                           plusw2	equ	0xFDB
  5557                           fsr2h	equ	0xFDA
  5558                           fsr2l	equ	0xFD9
  5559                           status	equ	0xFD8

Data Sizes:
    Strings     9
    Constant    16
    Data        45
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     89     124
    BANK0           128      0      70
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 3
		 -> STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S1393$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 4
		 -> result_s(COMRAM[4]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S1340$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S1340$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    memset@dest	PTR void  size(2) Largest target is 4
		 -> result_s(COMRAM[4]), str_2(COMRAM[4]), str(COMRAM[4]), 

    memset@s	PTR unsigned char  size(2) Largest target is 4
		 -> result_s(COMRAM[4]), str_2(COMRAM[4]), str(COMRAM[4]), 

    number_8bit_to_string@str	PTR unsigned char  size(2) Largest target is 4
		 -> result_s(COMRAM[4]), 

    send_4bits@lcd	PTR const struct . size(2) Largest target is 6
		 -> lcd_1(COMRAM[6]), 

    enable_pin_4bits@lcd	PTR const struct . size(2) Largest target is 6
		 -> lcd_1(COMRAM[6]), 

    lcd_4bits_set_cursor@lcd	PTR const struct . size(2) Largest target is 6
		 -> lcd_1(COMRAM[6]), 

    lcd_4bits_send_string_pos@data	PTR unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), STR_2(CODE[6]), STR_1(CODE[6]), result_s(COMRAM[4]), 
		 -> str(COMRAM[4]), 

    lcd_4bits_send_string_pos@lcd	PTR const struct . size(2) Largest target is 6
		 -> lcd_1(COMRAM[6]), 

    lcd_4bits_send_string@data	PTR unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), STR_2(CODE[6]), STR_1(CODE[6]), result_s(COMRAM[4]), 
		 -> str(COMRAM[4]), 

    lcd_4bits_send_string@lcd	PTR const struct . size(2) Largest target is 6
		 -> lcd_1(COMRAM[6]), 

    lcd_4bits_send_char_pos@lcd	PTR const struct . size(2) Largest target is 6
		 -> lcd_1(COMRAM[6]), 

    lcd_4bits_send_char@lcd	PTR const struct . size(2) Largest target is 6
		 -> lcd_1(COMRAM[6]), 

    lcd_4bits_send_command@lcd	PTR const struct . size(2) Largest target is 6
		 -> lcd_1(COMRAM[6]), 

    lcd_4bits_initialze@lcd	PTR const struct . size(2) Largest target is 6
		 -> lcd_1(COMRAM[6]), 

    convert_string_to_numbers@value	PTR unsigned char  size(2) Largest target is 1
		 -> value_2(COMRAM[1]), value_1(COMRAM[1]), 

    convert_string_to_numbers@str	PTR unsigned char  size(2) Largest target is 4
		 -> str_2(COMRAM[4]), str(COMRAM[4]), 

    num_2_read@str	PTR unsigned char  size(2) Largest target is 4
		 -> str_2(COMRAM[4]), 

    num_2_read@keypad	PTR struct . size(2) Largest target is 8
		 -> keypad_1(BANK0[8]), 

    num_2_read@lcd	PTR struct . size(2) Largest target is 6
		 -> lcd_1(COMRAM[6]), 

    num_1_read@str	PTR unsigned char  size(2) Largest target is 4
		 -> str(COMRAM[4]), 

    num_1_read@str_2	PTR unsigned char  size(2) Largest target is 4
		 -> str_2(COMRAM[4]), 

    num_1_read@operation	PTR unsigned char  size(2) Largest target is 1
		 -> operation(COMRAM[1]), 

    num_1_read@keypad	PTR struct . size(2) Largest target is 8
		 -> keypad_1(BANK0[8]), 

    num_1_read@lcd	PTR struct . size(2) Largest target is 6
		 -> lcd_1(COMRAM[6]), 

    sp__memset	PTR void  size(2) Largest target is 4
		 -> result_s(COMRAM[4]), str_2(COMRAM[4]), str(COMRAM[4]), 

    gpio_pin_intialize@str	PTR const struct . size(2) Largest target is 8
		 -> lcd_1.DATA_BITS(COMRAM[4]), lcd_1(COMRAM[6]), keypad_1.rows(BANK0[4]), keypad_1(BANK0[8]), 
		 -> relay_initialize@rel_pin(COMRAM[1]), led_intialize@LED_IN(COMRAM[1]), 

    gpio_pin_read_logic@LOG	PTR enum E2989 size(2) Largest target is 1
		 -> keypad_read_value@temp_value(COMRAM[1]), button_read@PIN_STATUS(COMRAM[1]), 

    gpio_pin_read_logic@str	PTR const struct . size(2) Largest target is 8
		 -> keypad_1.columns(BANK0[4]), keypad_1(BANK0[8]), 

    gpio_pin_write_logic@str	PTR const struct . size(2) Largest target is 8
		 -> lcd_1.DATA_BITS(COMRAM[4]), lcd_1(COMRAM[6]), keypad_1.rows(BANK0[4]), keypad_1(BANK0[8]), 
		 -> relay_off@rel_pin(COMRAM[1]), relay_on@rel_pin(COMRAM[1]), relay_initialize@rel_pin(COMRAM[1]), led_turn_off@LED_IN(COMRAM[1]), 
		 -> led_turn_on@LED_IN(COMRAM[1]), led_intialize@LED_IN(COMRAM[1]), 

    gpio_pin_direction_intialize@str	PTR const struct . size(2) Largest target is 8
		 -> lcd_1.DATA_BITS(COMRAM[4]), lcd_1(COMRAM[6]), keypad_1.columns(BANK0[4]), keypad_1.rows(BANK0[4]), 
		 -> keypad_1(BANK0[8]), relay_initialize@rel_pin(COMRAM[1]), led_intialize@LED_IN(COMRAM[1]), 

    PORT_REG	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTE(BITBIGSFRl[1]), PORTD(BITBIGSFRl[1]), PORTC(BITBIGSFRl[1]), PORTB(BITBIGSFRl[1]), 
		 -> PORTA(BITBIGSFRl[1]), 

    TRIS_REG	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISE(BITBIGSFRhh[1]), TRISD(BITBIGSFRhh[1]), TRISC(BITBIGSFRhh[1]), TRISB(BITBIGSFRhh[1]), 
		 -> TRISA(BITBIGSFRhl[1]), 

    LAT_REG	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATE(BITBIGSFRhl[1]), LATD(BITBIGSFRhl[1]), LATC(BITBIGSFRhl[1]), LATB(BITBIGSFRhl[1]), 
		 -> LATA(BITBIGSFRl[1]), 

    turnoff_all_rows@key_pad	PTR struct . size(2) Largest target is 8
		 -> keypad_1(BANK0[8]), 

    keypad_read_value@value	PTR unsigned char  size(2) Largest target is 1
		 -> num_2_read@temp_value(COMRAM[1]), num_1_read@temp_value(COMRAM[1]), 

    keypad_read_value@key_pad	PTR struct . size(2) Largest target is 8
		 -> keypad_1(BANK0[8]), 

    keypad_initialize@key_pad	PTR struct . size(2) Largest target is 8
		 -> keypad_1(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_number_8bit_to_string
    _number_8bit_to_string->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _num_1_read->_num_2_read
    _num_2_read->_lcd_4bits_send_string_pos
    _lcd_4bits_send_string_pos->_lcd_4bits_set_cursor
    _lcd_4bits_send_string->_lcd_4bits_send_char
    _keypad_read_value->_turnoff_all_rows
    _turnoff_all_rows->_gpio_pin_write_logic
    _lcd_4bits_send_char_pos->_lcd_4bits_set_cursor
    _lcd_4bits_set_cursor->_lcd_4bits_send_command
    _lcd_4bits_send_char->_send_4bits
    _lcd_4bits_initialze->_lcd_4bits_send_command
    _lcd_4bits_send_command->_send_4bits
    _send_4bits->_gpio_pin_write_logic
    _enable_pin_4bits->_gpio_pin_write_logic
    _keypad_initialize->_gpio_pin_intialize
    _gpio_pin_intialize->_gpio_pin_write_logic

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  255307
                                             87 COMRAM     2     2      0
          _convert_string_to_numbers
                  _keypad_initialize
                _lcd_4bits_initialze
            _lcd_4bits_send_char_pos
          _lcd_4bits_send_string_pos
                             _memset
                         _num_1_read
              _number_8bit_to_string
 ---------------------------------------------------------------------------------
 (1) _number_8bit_to_string                                4     2      2    8027
                                             84 COMRAM     3     1      2
                             _memset
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             24    16      8    5851
                                             62 COMRAM    22    14      8
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    5196
                                             54 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           19    13      6    4846
                                             40 COMRAM    14     8      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                13     9      4    3626
                                             27 COMRAM    13     9      4
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    1999
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4     931
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _memset                                              12     6      6    1859
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (1) _num_1_read                                          15     5     10  136211
                                             42 COMRAM    15     5     10
          _convert_string_to_numbers
                  _keypad_read_value
                _lcd_4bits_send_char
          _lcd_4bits_send_string_pos
                         _num_2_read
 ---------------------------------------------------------------------------------
 (2) _num_2_read                                          11     5      6   67321
                                             31 COMRAM    11     5      6
                  _keypad_read_value
                _lcd_4bits_send_char
          _lcd_4bits_send_string_pos
 ---------------------------------------------------------------------------------
 (3) _lcd_4bits_send_string_pos                            7     1      6   38510
                                             24 COMRAM     7     1      6
              _lcd_4bits_send_string
               _lcd_4bits_set_cursor
 ---------------------------------------------------------------------------------
 (4) _lcd_4bits_send_string                                5     1      4   17287
                                             18 COMRAM     5     1      4
                _lcd_4bits_send_char
 ---------------------------------------------------------------------------------
 (3) _keypad_read_value                                   10     6      4   11104
                                             13 COMRAM    10     6      4
                _gpio_pin_read_logic
               _gpio_pin_write_logic
                   _turnoff_all_rows
 ---------------------------------------------------------------------------------
 (4) _turnoff_all_rows                                     4     2      2    5105
                                              9 COMRAM     4     2      2
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (4) _gpio_pin_read_logic                                 10     6      4     438
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _convert_string_to_numbers                            9     5      4    1193
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _lcd_4bits_send_char_pos                              6     1      5   36724
                                             24 COMRAM     6     1      5
                _lcd_4bits_send_char
               _lcd_4bits_set_cursor
 ---------------------------------------------------------------------------------
 (4) _lcd_4bits_set_cursor                                 7     3      4   18937
                                             18 COMRAM     6     2      4
             _lcd_4bits_send_command
 ---------------------------------------------------------------------------------
 (5) _lcd_4bits_send_char                                  4     1      3   17021
                                             14 COMRAM     4     1      3
                   _enable_pin_4bits
               _gpio_pin_write_logic
                         _send_4bits
 ---------------------------------------------------------------------------------
 (1) _lcd_4bits_initialze                                  5     3      2   25300
                                             18 COMRAM     5     3      2
                 _gpio_pin_intialize
             _lcd_4bits_send_command
 ---------------------------------------------------------------------------------
 (5) _lcd_4bits_send_command                               4     1      3   18237
                                             14 COMRAM     4     1      3
                   _enable_pin_4bits
               _gpio_pin_write_logic
                         _send_4bits
 ---------------------------------------------------------------------------------
 (6) _send_4bits                                           5     2      3    5726
                                              9 COMRAM     5     2      3
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (6) _enable_pin_4bits                                     4     2      2    5287
                                              9 COMRAM     4     2      2
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (1) _keypad_initialize                                    7     5      2    7483
                                             13 COMRAM     7     5      2
       _gpio_pin_direction_intialize
                 _gpio_pin_intialize
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_intialize                                   4     2      2    6596
                                              9 COMRAM     4     2      2
       _gpio_pin_direction_intialize
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (7) _gpio_pin_write_logic                                10     7      3    4891
                                              0 COMRAM     9     6      3
 ---------------------------------------------------------------------------------
 (3) _gpio_pin_direction_intialize                         9     7      2     581
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _convert_string_to_numbers
   _keypad_initialize
     _gpio_pin_direction_intialize
     _gpio_pin_intialize
       _gpio_pin_direction_intialize
       _gpio_pin_write_logic
   _lcd_4bits_initialze
     _gpio_pin_intialize
     _lcd_4bits_send_command
       _enable_pin_4bits
         _gpio_pin_write_logic
       _gpio_pin_write_logic
       _send_4bits
         _gpio_pin_write_logic
   _lcd_4bits_send_char_pos
     _lcd_4bits_send_char
       _enable_pin_4bits
       _gpio_pin_write_logic
       _send_4bits
     _lcd_4bits_set_cursor
       _lcd_4bits_send_command
   _lcd_4bits_send_string_pos
     _lcd_4bits_send_string
       _lcd_4bits_send_char
     _lcd_4bits_set_cursor
   _memset
   _num_1_read
     _convert_string_to_numbers
     _keypad_read_value
       _gpio_pin_read_logic
       _gpio_pin_write_logic
       _turnoff_all_rows
         _gpio_pin_write_logic
     _lcd_4bits_send_char
     _lcd_4bits_send_string_pos
     _num_2_read
       _keypad_read_value
       _lcd_4bits_send_char
       _lcd_4bits_send_string_pos
   _number_8bit_to_string
     _memset
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      40        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      46       5       54.7%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     59      7C       1       97.6%
BITBIGSFRhh         69      0       0      36        0.0%
BITBIGSFRhl          4      0       0      37        0.0%
BITBIGSFRl           4      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C2      39        0.0%
DATA                 0      0      C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Sep 09 01:32:50 2023

                                  l43 2336                                    l61 2658  
                                  l54 1E20                          ___awdiv@sign 0006  
                   ?_turnoff_all_rows 000A                                   l214 1D30  
           _lcd_4bits_send_string_pos 26A6                                   l219 1D32  
                                 l245 21A4                                   l238 1C14  
                                 l431 249C                                   l441 2732  
                                 l426 1AF4                                   l354 1342  
                                 l346 14C8                                   l259 2504  
                                 l371 18B2                                   l436 2426  
                                 l356 133E                                   l373 18AE  
                                 l454 26EC                                   l473 210A  
                                 l449 222E                                   l802 205E  
                                 l483 22B6                                   l395 177E  
                                 l549 27F2                                   l478 25BC  
                                 l789 1FAE                    ??_turnoff_all_rows 000C  
                num_2_read@temp_value 002A       __end_of_lcd_4bits_send_char_pos 2734  
                keypad_initialize@ret 0012                                   _abs 2778  
                                 _pad 2338                                   _ret 0060  
                                 _str 0070                          ___awmod@sign 0006  
                                 prod 0FF3                 relay_initialize@F3042 0063  
                                 wreg 0FE8          turnoff_all_rows@rows_counter 000D  
                                ?_abs 0007                                  l1311 27B6  
                                l3000 21BC                                  l1304 260A  
                                l1233 1644                                  l3002 21C4  
                                l1323 1EEA                                  l1331 2776  
                                l3004 21F6                                  l1308 27AE  
                                l3020 18F6                                  l3012 18B4  
                                l3006 21FA                                  l3110 26D4  
                                l3102 26A6                                  l1334 2822  
                                l3022 1906                                  l3014 18D8  
                                l1246 26A4                                  l3200 1736  
                                l3008 222C                                  l3112 26EA  
                                l3104 26A6                                  l1272 23B0  
                                l1280 10B0                                  l3032 199A  
                                l3024 1922                                  l3016 18E6  
                                l3120 25E6                                  l3050 1C4A  
                                l3042 1C16                                  l3130 24B0  
                                l3210 177C                                  l3202 1748  
                                l3106 26B8                                  l3026 193E  
                                l3018 18F2                                  l3122 2602  
                                l1291 11AE                                  l3052 1C60  
                                l3044 1C16                                  l3132 24CE  
                                l3204 175A                                  l3108 26C0  
                                l3220 17BE                                  l3140 14D0  
                                l1268 235A                                  l3028 1982  
                                l3036 19AC                                  l3116 25BE  
                                l3300 266A                                  l1277 1062  
                                l3054 1CC2                                  l3046 1C28  
                                l3134 24D6                                  l3126 249E  
                                l3310 22B8                                  l3206 175C  
                                l3062 1D34                                  l3230 17EA  
                                l3214 1780                                  l3150 1530  
                                l3118 25CA                                  l3302 2672  
                                l1279 106A                                  l3056 1CD8  
                                l3048 1C46                                  l3136 2502  
                                l3128 249E                                  l3312 22C0  
                                l3208 176C                                  l3064 1D40  
                                l3240 1834                                  l3232 17FC  
                                l3216 1790                                  l3152 1588  
                                l3144 14EE                                  l3304 267A  
                                l3322 22DE                                  l3314 22D2  
                                l3090 1DFA                                  l3074 1D5E  
                                l3066 1D52                                  l3242 1852  
                                l3250 1856                                  l3234 180E  
                                l3218 17A0                                  l3226 17C4  
                                l3410 123C                                  l3402 11F4  
                                l3170 1632                                  l3162 15E8  
                                l3146 14FA                                  l1298 19D4  
                                l3306 2696                                  l3324 22EE  
                                l3340 2334                                  l3316 22DA  
                                l3180 167A                                  l3172 1646  
                                l3092 1DFC                                  l3084 1D96  
                                l3076 1D82                                  l3068 1D5A  
                                l3260 186E                                  l3244 1852  
                                l3236 1820                                  l3228 17DA  
                                l3420 127E                                  l3412 124E  
                                l3404 1208                                  l3164 161C  
                                l3156 15A2                                  l2700 1EA4  
                                l2710 1B26                                  l3334 2304  
                                l3326 22F0                                  l3350 19F4  
                                l3190 16D8                                  l3182 1696  
                                l3094 1E0C                                  l3086 1DBC  
                                l3078 1D92                                  l3270 18A6  
                                l3262 1880                                  l3238 1822  
                                l3422 127E                                  l3414 125A  
                                l3406 1218                                  l3166 1628  
                                l3158 15CE                                  l4080 1BFC  
                                l2712 1B2A                                  l2720 1C12  
                                l2704 1AF6                                  l3336 2322  
                                l3328 2300                                  l3360 1A2C  
                                l3352 1A18                                  l3344 19D6  
                                l3184 16A4                                  l3192 16EA  
                                l3096 1E0E                                  l3088 1DCC  
                                l3264 1890                                  l3424 127E  
                                l3416 125C                                  l3408 122A  
                                l3168 162E                                  l2800 1F8E  
                                l2714 1B86                                  l2706 1AF6  
                                l3338 2324                                  l3370 1A7A  
                                l3362 1A2E                                  l3346 19DA  
                                l3194 16FA                                  l3186 16B4  
                                l3178 165E                                  l3098 1E1E  
                                l3266 18A0                                  l3258 186C  
                                l3450 1320                                  l3426 129A  
                                l3418 126E                                  l3434 12C8  
                                l2802 1F9E                                  l2810 1FB4  
                                l2730 2740                                  l2708 1B08  
                                l2740 2246                                  l3380 1AC0  
                                l3372 1A80                                  l3364 1A3E  
                                l3348 19EC                                  l3460 26EE  
                                l3196 1710                                  l3188 16C6  
                                l3268 18A2                                  l3452 1330  
                                l3436 12DA                                  l3444 12FC  
                                l3428 12AE                                  l2804 1FA6  
                                l2820 1FE4                                  l2812 1FC2  
                                l2732 2752                                  l2900 1088  
                                l2718 1BE8                                  l2750 2568  
                                l2742 224E                                  l3382 1AD0  
                                l3374 1A90                                  l3366 1A4C  
                                l3358 1A1C                                  l4078 20E2  
                                l3462 2700                                  l3198 1720  
                                l3454 1332                                  l3446 12FE  
                                l3390 11B0                                  l2830 202A  
                                l2822 1FF6                                  l2814 1FCA  
                                l2734 2756                                  l2910 10C2  
                                l2902 1098                                  l3470 27BA  
                                l2760 25BA                                  l2752 257A  
                                l2744 22B4                                  l2736 2230  
                                l3384 1AE0                                  l3376 1AA0  
                                l3368 1A5C                                  l3464 2708  
                                l3456 1336                                  l3448 1310  
                                l3392 11C0                                  l2840 2056  
                                l2832 2032                                  l2824 1FFE  
                                l2816 1FCE                                  l2808 1FB0  
                                l2728 2734                                  l2912 10C8  
                                l2920 1122                                  l2904 10A4  
                                l3472 27BA                                  l2754 2582  
                                l2738 2234                                  l3378 1AB0  
                                l3386 1AF2                                  l3466 2730  
                                l3458 26EE                                  l3394 11D0  
                                l2770 1F06                                  l2834 2038  
                                l2826 2006                                  l2818 1FDC  
                                l2690 1E22                                  l2850 2366  
                                l2930 117E                                  l2922 113C  
                                l2914 10FA                                  l2906 10AC  
                                l3298 265A                                  l3474 27D6  
                                l2756 2596                                  l2748 2568  
                                l2940 211E                                  l3396 11EE  
                                l2780 1F2C                                  l2772 1F0A  
                                l2764 1EEC                                  l2828 2014  
                                l2836 203E                                  l2860 2792  
                                l2692 1E34                                  l2852 237A  
                                l2844 2338                                  l2932 118E  
                                l2924 114E                                  l2916 1100  
                                l2908 10B8                                  l3476 27F0  
                                l2758 25A4                                  l2870 2424  
                                l2862 23B2                                  l2942 213C  
                                l2950 260C                                  l2790 1F62  
                                l2782 1F3E                                  l2774 1F18  
                                l2766 1EF0                                  l2838 204E  
                                l2694 1E46                                  l2854 237E  
                                l2846 2346                                  l2926 1168  
                                l2918 1106                                  ?_pad 0011  
                                l2880 2442                                  l2864 23B2  
                                l2944 2140                                  l2936 210C  
                                l2952 2610                                  l2792 1F78  
                                l2784 1F46                                  l2776 1F20  
                                l2768 1EFE                                  l2696 1E50  
                                l2856 239C                                  l2848 2352  
                                l2928 1178                                  l3840 1344  
                                l2882 249A                                  l2874 2428  
                                l2866 23C4                                  l2946 21A2  
                                l2938 210C                                  l2962 262E  
                                l2954 2622                                  l2794 1F80  
                                l2786 1F4E                                  l2778 1F24  
                                l2858 2778                                  l2698 1E6E  
                                l2890 1040                                  l3850 13DC  
                                l3842 137C                                  l2876 2428  
                                l2868 23CC                                  l2980 208C  
                                l2972 2060                                  l2964 2644  
                                l2956 262A                                  l2796 1F82  
                                l2788 1F5C                                  l2892 1048  
                                l3860 143C                                  l3852 13F2  
                                l3844 138A                                  l2878 243A  
                                l2982 20A2                                  l2974 2060  
                                l2966 2646                                  l2798 1F88  
                                l2894 1056                                  l2886 101C  
                                l3862 144C                                  l3854 140C  
                                l3846 1398                                  l2984 20B8  
                                l2976 2072                                  l2968 2656  
                                l2896 1072                                  l2888 1030  
                                l3872 149C                                  l3864 146E  
                                l3856 1424                                  l3848 13C6  
                                l2978 2076                                  l2986 20CE  
                                l2898 1082                                  l3874 14AE  
                                l3866 1480                                  l3858 1436  
                                l2988 2108                                  l2996 21A6  
                                l3876 14B4                                  l3868 1488  
                                l2998 21AA                                  STR_1 1011  
                                STR_2 1011                                  STR_3 1011  
                                STR_4 1017                                  u2000 1056  
                                u2001 1052                                  u2010 1082  
                                u2011 107E                                  u2100 2622  
                                u2020 1098                                  u2101 261E  
                                u2021 1094                                  u2110 2656  
                                u2030 113C                                  u2111 2652  
                                u2031 1138                                  u2200 1C28  
                                u2120 2072                                  u2040 114E  
                                u2201 1C24                                  u2121 206E  
                                u2041 114A                                  u2210 1C46  
                                u2130 21BC                                  u2050 1168  
                                u2211 1C42                                  u2131 21B8  
                                u2051 1164                                  u2220 1C60  
                                u2140 21EE                                  u2300 26B8  
                                u2060 1178                                  u2221 1C5C  
                                u2301 26B4                                  u2061 1174  
                                _LATA 0F89                                  u2070 211E  
                                u2150 221C                                  u2310 2602  
                                _LATB 0F8A                                  u2071 211A  
                                u2311 25FE                                  _LATC 0F8B  
                                u2240 1CD8                                  u2320 24B0  
                                u2400 1696                                  u2080 213C  
                                u2160 222C                                  _LATD 0F8C  
                                u2241 1CD4                                  u2321 24AC  
                                u2401 1692                                  u2081 2138  
                                u2161 2228                                  _LATE 0F8D  
                                u2234 1C7C                                  u2330 24CE  
                                u2410 16FA                                  u2170 18D8  
                                u2235 1C78                                  u2331 24CA  
                                u2411 16F6                                  u2147 21E4  
                                u2171 18D4                                  u2420 1720  
                                u2260 1D52                                  u2500 1834  
                                u2340 14EA                                  u1700 1E46  
                                u2180 1922                                  u2421 171C  
                                u2261 1D4E                                  u2157 2212  
                                u2501 1830                                  u2341 14E6  
                                u1701 1E42                                  u2181 191E  
                                u2254 1CF4                                  u2430 1748  
                                u2094 218E                                  u2270 1DCC  
                                u2510 1868                                  u2350 152C  
                                u1710 1E6E                                  u2190 193E  
                                u2255 1CF0                                  u2431 1744  
                                u2095 218A                                  u2271 1DC8  
                                u2511 1864                                  u2351 1528  
                                u1711 1E6A                                  u2191 193A  
                                u2600 1A3E                                  u2440 176C  
                                u2280 1E0C                                  u2520 1880  
                                u2360 159E                                  u1800 1EFE  
                                u1720 1EA4                                  u2601 1A3A  
                                u2441 1768                                  u2281 1E08  
                                u2521 187C                                  u2361 159A  
                                u1801 1EFA                                  u1721 1EA0  
                                u1730 1B08                                  u2290 1E1E  
                                u2450 17A0                                  u2610 11D0  
                                u2370 15E4                                  u1810 1F18  
                                u3250 1436                                  u1731 1B04  
                                u2291 1E1A                                  u2451 179C  
                                u2611 11CC                                  u2371 15E0  
                                u1811 1F14                                  u3251 1432  
                                u1740 1B26                                  u2460 17EA  
                                u2620 1218                                  u2380 1644  
                                u1820 1F3E                                  u1900 202A  
                                u3260 1480                                  u1741 1B22  
                                u2461 17E6                                  u2621 1214  
                                u2381 1640                                  u1821 1F3A  
                                u1901 2026                                  u3261 147C  
                                u2390 167A                                  u2470 17FC  
                                u2630 122A                                  u1830 1F5C  
                                u1910 204E                                  u3270 14AE  
                                u3407 1A62                                  u2391 1676  
                                u2471 17F8                                  u2631 1226  
                                u1831 1F58                                  u1911 204A  
                                u3271 14AA                                  u2560 22D2  
                                u2480 180E                                  u2640 123C  
                                u1840 1F78                                  u1920 2346  
                                u2561 22CE                                  u3417 1A7C  
                                u2481 180A                                  u2641 1238  
                                u1841 1F74                                  u1921 2342  
                                u1754 1B46                                  u2570 2300  
                                u2490 1820                                  u2650 124E  
                                u1850 1F9E                                  u1690 1E34  
                                u1770 2776                                  u1930 239C  
                                u1755 1B42                                  u2571 22FC  
                                u3427 259C                                  u2491 181C  
                                u2651 124A                                  u1851 1F9A  
                                u1691 1E30                                  u1771 2772  
                                u1931 2398                                  u1764 1BA2  
                                u2580 2334                                  u1780 2246  
                                u2660 126E                                  u1860 1FC2  
                                u1940 2792                                  u1765 1B9E  
                                u2581 2330                                  u1781 2242  
                                u2661 126A                                  u1861 1FBE  
                                u1941 278E                                  u1790 257A  
                                u2590 19EC                                  u1950 23C4  
                                u2670 12DA                                  u1870 1FDC  
                                u1791 2576                                  u2591 19E8  
                                u1951 23C0                                  u2671 12D6  
                                u1871 1FD8                                  u1960 243A  
                                u2680 1310                                  u1880 1FF6  
                                u1961 2436                                  u2681 130C  
                                u1881 1FF2                                  u3377 1416  
                                u2690 2700                                  u1890 2014  
                                u1970 102C                                  u2691 26FC  
                                u3387 1D88                                  u1891 2010  
                                u1971 1026                                  u1980 102E  
                                u3397 1A44                                  u1990 1040  
                                u1991 103C                                  abs@a 0007  
                                _dbuf 00A6                                  _main 1344  
                                _dtoa 101C                                  _prec 005C  
                                pad@i 0018                                  pad@p 0015  
                                fsr0h 0FEA                                  fsr1h 0FE2  
                                indf0 0FEF                                  fsr2h 0FDA  
                                fsr0l 0FE9                                  indf2 0FDF  
                                fsr1l 0FE1                                  pad@w 001A  
                                fsr2l 0FD9                      num_1_read@keypad 002D  
                                prodl 0FF3                                  start 0000  
                        ___param_bank 0000                  keypad_read_value@ret 0014  
                               ??_abs 0009                  _gpio_pin_write_logic 1AF6  
                               ??_pad 0017                lcd_4bits_send_char@lcd 000F  
              lcd_4bits_send_char@ret 0012                                 ?_main 0001  
                               ?_dtoa 001C                       __end_of___awdiv 1FB0  
                     __end_of___awmod 2060                       ___awdiv@divisor 0003  
                     ___awdiv@counter 0005                          vfpfcnvrt@fmt 002B  
              ?_lcd_4bits_send_string 0013                                 _PORTA 0F80  
                               _PORTB 0F81                                 _PORTC 0F82  
                               _PORTD 0F83                                 _PORTE 0F84  
                               _TRISA 0F92                                 _TRISB 0F93  
                               _TRISC 0F94                                 _TRISD 0F95  
                               _TRISE 0F96                                 _lcd_1 0076  
                               _flags 005E                                 _fputc 1E22  
                               _fputs 2734                                 _str_2 006C  
                               pad@fp 0011                                 _width 005A  
                               _putch 2822                                 dtoa@d 001E  
                               dtoa@i 0026                                 dtoa@p 0022  
                               dtoa@s 0028                                 dtoa@w 0024  
                               tablat 0FF5         lcd_4bits_send_command@command 0011  
                               status 0FD8                       __end_of_sprintf 26A6  
         keypad_read_value@temp_value 0015                      num_2_read@keypad 0022  
          lcd_4bits_send_char_pos@ROW 001C            lcd_4bits_send_char_pos@lcd 0019  
          lcd_4bits_send_char_pos@ret 001E                       __initialization 2506  
         __end_of_lcd_4bits_initialze 1AF6                          __end_of_main 14D0  
                        __end_of_dtoa 11B0                 ?_gpio_pin_write_logic 0001  
         __end_of_lcd_4bits_send_char 2428                                ??_main 0058  
                              ??_dtoa 0020                         __activetblptr 0002  
                    led_turn_on@F3053 0066               lcd_4bits_send_char@data 0011  
             ?_lcd_4bits_send_command 000F                                ?_fputc 0001  
                              ?_fputs 000A                      ___awdiv@dividend 0001  
                              ?_putch 0001              keypad_read_value@key_pad 000E  
                        vfprintf@cfmt 003D                             ??___awdiv 0005  
                           ??___awmod 0005                                _memset 14D0  
                              clear_0 254C                                clear_1 2558  
                    ___awdiv@quotient 0007                       ___awmod@divisor 0003  
                              isa$std 0001                                _result 005F  
                     ___awmod@counter 0005                                pad@buf 0013  
                              dtoa@fp 001C            lcd_4bits_set_cursor@COLUMN 0016  
      __end_of_lcd_4bits_send_command 249E                                fputc@c 0001  
                              fputs@c 000E                                fputs@i 000F  
                        __pdataCOMRAM 0076                                fputs@s 000A  
                        __mediumconst 0000                                tblptrh 0FF7  
                              tblptrl 0FF6                                tblptru 0FF8  
                              putch@c 0001                      __end_of_vfprintf 260C  
                           ??_sprintf 0047            ?_convert_string_to_numbers 0001  
                          __accesstop 0080               __end_of__initialization 255E  
         lcd_4bits_send_char_pos@data 001B              number_8bit_to_string@str 0055  
                       ___rparam_used 0001                 _number_8bit_to_string 27B8  
                    _enable_pin_4bits 2568                ??_gpio_pin_write_logic 0004  
                      __pcstackCOMRAM 0001                          __pidataBANK0 27F4  
                       __end_of_fputc 1EEC                         __end_of_fputs 2778  
                       __end_of_putch 2824                         send_4bits@lcd 000A  
                       send_4bits@ret 000E               turnoff_all_rows@key_pad 000A  
              keypad_read_value@value 0010                               ??_fputc 0005  
                             ??_fputs 000E                               ??_putch 0001  
                          __pbssBANK0 00A6              ?_lcd_4bits_send_char_pos 0019  
   __end_of_lcd_4bits_send_string_pos 26EE          __end_of_lcd_4bits_set_cursor 210C  
                   led_turn_off@F3058 0065                       led_toggle@F3063 0064  
                             ?_memset 0001               ??_lcd_4bits_send_string 0017  
     convert_string_to_numbers@temp_1 0006       convert_string_to_numbers@temp_2 0007  
     convert_string_to_numbers@temp_3 0008                               _LAT_REG 0094  
           lcd_4bits_send_command@lcd 000F             lcd_4bits_send_command@ret 0012  
                          _btn_values 1001                         num_1_read@lcd 002B  
                       num_1_read@ret 0038                         num_1_read@str 002F  
              ?_number_8bit_to_string 0055                         num_2_read@lcd 0020  
                       num_2_read@ret 0029                         num_2_read@str 0024  
                             __Hparam 0000                               __Lparam 0000  
            keypad_initialize@key_pad 000E                   _gpio_pin_read_logic 210C  
                             ___awdiv 1EEC                               ___awmod 1FB0  
                           ?_vfprintf 0037      keypad_initialize@columns_counter 0014  
                        __psmallconst 1000            __end_of_gpio_pin_intialize 2506  
                             __pcinit 2506                               __ramtop 1000  
                       relay_on@F3047 0062                               __ptext0 1344  
                             __ptext1 27B8                               __ptext2 265A  
                             __ptext3 25BE                               __ptext4 18B4  
                             __ptext5 101C                               __ptext6 2338  
                             __ptext7 2734                               __ptext8 1E22  
                             __ptext9 2822                      ___awmod@dividend 0001  
                 num_1_read@counter_1 0036                   num_1_read@counter_2 0035  
                 num_1_read@counter_3 0037               lcd_4bits_set_cursor@ROW 0015  
                             _value_1 0075                               _value_2 0074  
             lcd_4bits_set_cursor@lcd 0013                            _send_4bits 2230  
                ?_gpio_pin_read_logic 0001                               _sprintf 265A  
                end_of_initialization 255E                            _num_1_read 11B0  
                          _num_2_read 1780       lcd_4bits_send_string_pos@COLUMN 001E  
                             fputc@fp 0003                               memset@c 0003  
                             memset@k 0009                               memset@n 0005  
                             memset@s 000B                         __Lmediumconst 0000  
                             fputs@fp 000C                   turnoff_all_rows@ret 000C  
               gpio_pin_intialize@ret 000D                 gpio_pin_intialize@str 000A  
                 num_1_read@operation 0031                     __end_of_vfpfcnvrt 19D6  
                             postdec1 0FE5                               postdec2 0FDD  
                             postinc0 0FEE                               postinc1 0FE6  
                             postinc2 0FDE                      vfpfcnvrt@convarg 0031  
                          ??_vfprintf 003D                  _lcd_4bits_set_cursor 2060  
__end_of_gpio_pin_direction_intialize 1D34          _gpio_pin_direction_intialize 1C16  
            __end_of_enable_pin_4bits 25BE                 ??_gpio_pin_read_logic 0005  
                    _turnoff_all_rows 260C           ??_convert_string_to_numbers 0005  
                     num_1_read@str_2 0033                           vfpfcnvrt@ap 002D  
                         vfpfcnvrt@cp 0035                           vfpfcnvrt@fp 0029  
                       __pidataCOMRAM 281A              lcd_4bits_send_string@lcd 0013  
            lcd_4bits_send_string@ret 0017                        __end_of_memset 1646  
               ?_lcd_4bits_set_cursor 0013                   enable_pin_4bits@lcd 000A  
                 enable_pin_4bits@ret 000D                   start_initialization 2506  
                   send_4bits@command 000C                           __end_of_abs 27B8  
                         __end_of_pad 23B2         ?_gpio_pin_direction_intialize 0001  
                   send_4bits@counter 000D                           ?_send_4bits 000A  
       lcd_4bits_send_string_pos@data 001B                           ?_num_1_read 002B  
                         ?_num_2_read 0020         lcd_4bits_send_char_pos@COLUMN 001D  
                         vfprintf@fmt 0039             _convert_string_to_numbers 1646  
                         __pdataBANK0 0080                              ??_memset 0007  
                          memset@dest 0001         __end_of_lcd_4bits_send_string 2230  
                         __pbssCOMRAM 005A               ??_number_8bit_to_string 0057  
     gpio_pin_direction_intialize@str 0001            ?_lcd_4bits_send_string_pos 0019  
       keypad_initialize@rows_counter 0013                             _dtoa$1420 0020  
                            ?___awdiv 0001                              ?___awmod 0001  
            ??_lcd_4bits_send_command 0012                ??_lcd_4bits_set_cursor 0017  
                         __smallconst 1000             lcd_4bits_send_string@data 0015  
                            ?_sprintf 003F      convert_string_to_numbers@counter 0009  
                  _gpio_pin_intialize 249E        ??_gpio_pin_direction_intialize 0003  
                 _lcd_4bits_initialze 19D6                   ?_gpio_pin_intialize 000A  
                           _operation 007C                   _lcd_4bits_send_char 23B2  
                            _PORT_REG 0080            lcd_4bits_initialze@counter 0016  
            __end_of_turnoff_all_rows 265A                             _vfpfcnvrt 18B4  
                            _TRIS_REG 008A                  ?_lcd_4bits_initialze 0013  
                ??_gpio_pin_intialize 000C               gpio_pin_write_logic@LOG 0003  
                ?_lcd_4bits_send_char 000F                     ?_enable_pin_4bits 000A  
             gpio_pin_write_logic@str 0001                             copy_data0 251A  
                           copy_data1 253A                     _keypad_initialize 22B8  
                  ??_enable_pin_4bits 000C                     _keypad_read_value 1D34  
              gpio_pin_read_logic@LOG 0003                    ?_keypad_initialize 000E  
              gpio_pin_read_logic@str 0001                    ?_keypad_read_value 000E  
                            __Hrparam 0000            number_8bit_to_string@value 0057  
                          vfprintf@ap 003B                              __Lrparam 0000  
                          vfprintf@fp 0037                   ??_keypad_initialize 0010  
             _lcd_4bits_send_char_pos 26EE                   ??_keypad_read_value 0012  
              lcd_4bits_initialze@lcd 0013                lcd_4bits_initialze@ret 0017  
                          ?_vfpfcnvrt 0029                 ??_lcd_4bits_initialze 0015  
                  __end_of_btn_values 1011           __end_of_gpio_pin_read_logic 21A6  
                  led_intialize@F3048 0067                            sprintf@fmt 0041  
               ??_lcd_4bits_send_char 0012             __end_of_keypad_initialize 2338  
                            __ptext10 2778                              __ptext11 1FB0  
                            __ptext20 210C                              __ptext12 1EEC  
                            __ptext21 1646                              __ptext13 14D0  
                            __ptext30 249E                              __ptext22 26EE  
                            __ptext14 11B0                              __ptext31 1AF6  
                            __ptext23 2060                              __ptext15 1780  
                            __ptext32 1C16                              __ptext24 23B2  
                            __ptext16 26A6                              __ptext25 19D6  
                            __ptext17 21A6                              __ptext26 2428  
                            __ptext18 1D34                          ??_send_4bits 000D  
                            __ptext27 2230                              __ptext19 260C  
                            __ptext28 2568                              __ptext29 22B8  
           __end_of_keypad_read_value 1E22                          ??_num_1_read 0035  
                        ??_num_2_read 0026         keypad_read_value@rows_counter 0016  
                            _keypad_1 009E                        relay_off@F3052 0061  
                            isa$xinst 0000                              _result_s 0068  
                            _vfprintf 25BE                    __end_of_send_4bits 22B8  
      convert_string_to_numbers@value 0003                    __end_of_num_1_read 1344  
                  __end_of_num_2_read 18B4     __end_of_convert_string_to_numbers 1780  
        __end_of_gpio_pin_write_logic 1C16                _lcd_4bits_send_command 2428  
                           sprintf@ap 0047         __end_of_number_8bit_to_string 27F4  
    keypad_read_value@columns_counter 0017           ??_lcd_4bits_send_string_pos 001F  
           ??_lcd_4bits_send_char_pos 001E                  num_1_read@temp_value 0039  
                         ??_vfpfcnvrt 002F                              sprintf@f 0049  
                            sprintf@s 003F                 _lcd_4bits_send_string 21A6  
        convert_string_to_numbers@ret 0005                   num_2_read@counter_1 0027  
                 num_2_read@counter_2 0026                   num_2_read@counter_3 0028  
        convert_string_to_numbers@str 0001          lcd_4bits_send_string_pos@ROW 001D  
        lcd_4bits_send_string_pos@lcd 0019          lcd_4bits_send_string_pos@ret 001F  
